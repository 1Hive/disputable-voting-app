{
  "address": "0x3E7F5a5dc128291171401fbEfaC648652C6E6180",
  "abi": [
    {
      "constant": true,
      "inputs": [],
      "name": "CHANGE_VOTE_TIME_ROLE",
      "outputs": [
        {
          "name": "",
          "type": "bytes32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "hasInitialized",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_executionScript",
          "type": "bytes"
        },
        {
          "name": "_context",
          "type": "bytes"
        }
      ],
      "name": "newVote",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_voteId",
          "type": "uint256"
        }
      ],
      "name": "isVoteOpenForVoting",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "MAX_VOTES_DELEGATION_SET_LENGTH",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_agreement",
          "type": "address"
        }
      ],
      "name": "setAgreement",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_script",
          "type": "bytes"
        }
      ],
      "name": "getEVMScriptExecutor",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getRecoveryVault",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_settingId",
          "type": "uint256"
        }
      ],
      "name": "getSetting",
      "outputs": [
        {
          "name": "voteTime",
          "type": "uint64"
        },
        {
          "name": "supportRequiredPct",
          "type": "uint64"
        },
        {
          "name": "minAcceptQuorumPct",
          "type": "uint64"
        },
        {
          "name": "delegatedVotingPeriod",
          "type": "uint64"
        },
        {
          "name": "quietEndingPeriod",
          "type": "uint64"
        },
        {
          "name": "quietEndingExtension",
          "type": "uint64"
        },
        {
          "name": "executionDelay",
          "type": "uint64"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "settingsLength",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_quietEndingPeriod",
          "type": "uint64"
        },
        {
          "name": "_quietEndingExtension",
          "type": "uint64"
        }
      ],
      "name": "changeQuietEndingConfiguration",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "CHANGE_EXECUTION_DELAY_ROLE",
      "outputs": [
        {
          "name": "",
          "type": "bytes32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "forwarderType",
      "outputs": [
        {
          "name": "",
          "type": "uint8"
        }
      ],
      "payable": false,
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_representative",
          "type": "address"
        }
      ],
      "name": "setRepresentative",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_voteId",
          "type": "uint256"
        }
      ],
      "name": "getVote",
      "outputs": [
        {
          "name": "yea",
          "type": "uint256"
        },
        {
          "name": "nay",
          "type": "uint256"
        },
        {
          "name": "totalPower",
          "type": "uint256"
        },
        {
          "name": "startDate",
          "type": "uint64"
        },
        {
          "name": "snapshotBlock",
          "type": "uint64"
        },
        {
          "name": "status",
          "type": "uint8"
        },
        {
          "name": "settingId",
          "type": "uint256"
        },
        {
          "name": "actionId",
          "type": "uint256"
        },
        {
          "name": "pausedAt",
          "type": "uint64"
        },
        {
          "name": "pauseDuration",
          "type": "uint64"
        },
        {
          "name": "quietEndingExtensionDuration",
          "type": "uint64"
        },
        {
          "name": "quietEndingSnapshotSupport",
          "type": "uint8"
        },
        {
          "name": "executionScriptHash",
          "type": "bytes32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_evmScript",
          "type": "bytes"
        },
        {
          "name": "_context",
          "type": "bytes"
        }
      ],
      "name": "forward",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_minAcceptQuorumPct",
          "type": "uint64"
        }
      ],
      "name": "changeMinAcceptQuorumPct",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "CHANGE_SUPPORT_ROLE",
      "outputs": [
        {
          "name": "",
          "type": "bytes32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_voteId",
          "type": "uint256"
        }
      ],
      "name": "canChallenge",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_executionDelay",
          "type": "uint64"
        }
      ],
      "name": "changeExecutionDelay",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_voteId",
          "type": "uint256"
        },
        {
          "name": "_supports",
          "type": "bool"
        },
        {
          "name": "_voters",
          "type": "address[]"
        }
      ],
      "name": "voteOnBehalfOf",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_voteId",
          "type": "uint256"
        }
      ],
      "name": "canClose",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "CHANGE_DELEGATED_VOTING_PERIOD_ROLE",
      "outputs": [
        {
          "name": "",
          "type": "bytes32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_disputableActionId",
          "type": "uint256"
        }
      ],
      "name": "onDisputableActionAllowed",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_supportRequiredPct",
          "type": "uint64"
        }
      ],
      "name": "changeSupportRequiredPct",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "token",
          "type": "address"
        }
      ],
      "name": "allowRecoverability",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_disputableActionId",
          "type": "uint256"
        },
        {
          "name": "_challengeId",
          "type": "uint256"
        },
        {
          "name": "_challenger",
          "type": "address"
        }
      ],
      "name": "onDisputableActionChallenged",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "appId",
      "outputs": [
        {
          "name": "",
          "type": "bytes32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_voteId",
          "type": "uint256"
        },
        {
          "name": "_voters",
          "type": "address[]"
        },
        {
          "name": "_representative",
          "type": "address"
        }
      ],
      "name": "canVoteOnBehalfOf",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "CHANGE_QUIET_ENDING_ROLE",
      "outputs": [
        {
          "name": "",
          "type": "bytes32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getInitializationBlock",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "CHALLENGE_ROLE",
      "outputs": [
        {
          "name": "",
          "type": "bytes32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_voter",
          "type": "address"
        },
        {
          "name": "_representative",
          "type": "address"
        }
      ],
      "name": "isRepresentativeOf",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_voteId",
          "type": "uint256"
        },
        {
          "name": "_executionScript",
          "type": "bytes"
        }
      ],
      "name": "executeVote",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "CHANGE_QUORUM_ROLE",
      "outputs": [
        {
          "name": "",
          "type": "bytes32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_voteId",
          "type": "uint256"
        },
        {
          "name": "_voter",
          "type": "address"
        }
      ],
      "name": "getCastVote",
      "outputs": [
        {
          "name": "state",
          "type": "uint8"
        },
        {
          "name": "caster",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "transferToVault",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_sender",
          "type": "address"
        },
        {
          "name": "_role",
          "type": "bytes32"
        },
        {
          "name": "_params",
          "type": "uint256[]"
        }
      ],
      "name": "canPerform",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getEVMScriptRegistry",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_voteId",
          "type": "uint256"
        }
      ],
      "name": "canRepresentativesVote",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_token",
          "type": "address"
        },
        {
          "name": "_voteTime",
          "type": "uint64"
        },
        {
          "name": "_supportRequiredPct",
          "type": "uint64"
        },
        {
          "name": "_minAcceptQuorumPct",
          "type": "uint64"
        },
        {
          "name": "_delegatedVotingPeriod",
          "type": "uint64"
        },
        {
          "name": "_quietEndingPeriod",
          "type": "uint64"
        },
        {
          "name": "_quietEndingExtension",
          "type": "uint64"
        },
        {
          "name": "_executionDelay",
          "type": "uint64"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_disputableActionId",
          "type": "uint256"
        }
      ],
      "name": "onDisputableActionVoided",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_delegatedVotingPeriod",
          "type": "uint64"
        }
      ],
      "name": "changeDelegatedVotingPeriod",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getAgreement",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "CREATE_VOTES_ROLE",
      "outputs": [
        {
          "name": "",
          "type": "bytes32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_sender",
          "type": "address"
        },
        {
          "name": "_evmScript",
          "type": "bytes"
        }
      ],
      "name": "canForward",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_voteTime",
          "type": "uint64"
        }
      ],
      "name": "changeVoteTime",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_voteId",
          "type": "uint256"
        },
        {
          "name": "_supports",
          "type": "bool"
        }
      ],
      "name": "vote",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_voteId",
          "type": "uint256"
        }
      ],
      "name": "canExecute",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_voteId",
          "type": "uint256"
        },
        {
          "name": "_voter",
          "type": "address"
        }
      ],
      "name": "canVote",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "SET_AGREEMENT_ROLE",
      "outputs": [
        {
          "name": "",
          "type": "bytes32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "kernel",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "isPetrified",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "votesLength",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_disputableActionId",
          "type": "uint256"
        }
      ],
      "name": "onDisputableActionRejected",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "PCT_BASE",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "isForwarder",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "settingId",
          "type": "uint256"
        }
      ],
      "name": "NewSetting",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "voteTime",
          "type": "uint64"
        }
      ],
      "name": "ChangeVoteTime",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "supportRequiredPct",
          "type": "uint64"
        }
      ],
      "name": "ChangeSupportRequired",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "minAcceptQuorumPct",
          "type": "uint64"
        }
      ],
      "name": "ChangeMinQuorum",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "delegatedVotingPeriod",
          "type": "uint64"
        }
      ],
      "name": "ChangeDelegatedVotingPeriod",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "quietEndingPeriod",
          "type": "uint64"
        },
        {
          "indexed": false,
          "name": "quietEndingExtension",
          "type": "uint64"
        }
      ],
      "name": "ChangeQuietEndingConfiguration",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "executionDelay",
          "type": "uint64"
        }
      ],
      "name": "ChangeExecutionDelay",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "voteId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "context",
          "type": "bytes"
        },
        {
          "indexed": false,
          "name": "executionScript",
          "type": "bytes"
        }
      ],
      "name": "StartVote",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "voteId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "name": "challengeId",
          "type": "uint256"
        }
      ],
      "name": "PauseVote",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "voteId",
          "type": "uint256"
        }
      ],
      "name": "ResumeVote",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "voteId",
          "type": "uint256"
        }
      ],
      "name": "CancelVote",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "voteId",
          "type": "uint256"
        }
      ],
      "name": "ExecuteVote",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "voteId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "passing",
          "type": "bool"
        }
      ],
      "name": "QuietEndingExtendVote",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "voteId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "name": "voter",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "supports",
          "type": "bool"
        },
        {
          "indexed": false,
          "name": "caster",
          "type": "address"
        }
      ],
      "name": "CastVote",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "voter",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "representative",
          "type": "address"
        }
      ],
      "name": "ChangeRepresentative",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "voteId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "name": "voter",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "representative",
          "type": "address"
        }
      ],
      "name": "ProxyVoteFailure",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "executor",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "script",
          "type": "bytes"
        },
        {
          "indexed": false,
          "name": "input",
          "type": "bytes"
        },
        {
          "indexed": false,
          "name": "returnData",
          "type": "bytes"
        }
      ],
      "name": "ScriptResult",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "vault",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "RecoverToVault",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "agreement",
          "type": "address"
        }
      ],
      "name": "AgreementSet",
      "type": "event"
    }
  ],
  "transactionHash": "0x9a030e6e825d210650016603121a67f13d853f646159b16bf8335594c7178565",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0xdf456B614fE9FF1C7c0B380330Da29C96d40FB02",
    "contractAddress": null,
    "transactionIndex": 4,
    "gasUsed": "5096966",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x100c7145cc8e6e45d26bb814654039d93ce1eef8f31d4ac896b6ab2343dee721",
    "transactionHash": "0x9a030e6e825d210650016603121a67f13d853f646159b16bf8335594c7178565",
    "logs": [],
    "blockNumber": 18915062,
    "cumulativeGasUsed": "6208572",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "6568041b60ddd830c7b55f78e39fe1bf",
  "metadata": "{\"compiler\":{\"version\":\"0.4.24+commit.e67f0147\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":true,\"inputs\":[],\"name\":\"CHANGE_VOTE_TIME_ROLE\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasInitialized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_executionScript\",\"type\":\"bytes\"},{\"name\":\"_context\",\"type\":\"bytes\"}],\"name\":\"newVote\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_voteId\",\"type\":\"uint256\"}],\"name\":\"isVoteOpenForVoting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_VOTES_DELEGATION_SET_LENGTH\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_agreement\",\"type\":\"address\"}],\"name\":\"setAgreement\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_script\",\"type\":\"bytes\"}],\"name\":\"getEVMScriptExecutor\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRecoveryVault\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_settingId\",\"type\":\"uint256\"}],\"name\":\"getSetting\",\"outputs\":[{\"name\":\"voteTime\",\"type\":\"uint64\"},{\"name\":\"supportRequiredPct\",\"type\":\"uint64\"},{\"name\":\"minAcceptQuorumPct\",\"type\":\"uint64\"},{\"name\":\"delegatedVotingPeriod\",\"type\":\"uint64\"},{\"name\":\"quietEndingPeriod\",\"type\":\"uint64\"},{\"name\":\"quietEndingExtension\",\"type\":\"uint64\"},{\"name\":\"executionDelay\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"settingsLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_quietEndingPeriod\",\"type\":\"uint64\"},{\"name\":\"_quietEndingExtension\",\"type\":\"uint64\"}],\"name\":\"changeQuietEndingConfiguration\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CHANGE_EXECUTION_DELAY_ROLE\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"forwarderType\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_representative\",\"type\":\"address\"}],\"name\":\"setRepresentative\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_voteId\",\"type\":\"uint256\"}],\"name\":\"getVote\",\"outputs\":[{\"name\":\"yea\",\"type\":\"uint256\"},{\"name\":\"nay\",\"type\":\"uint256\"},{\"name\":\"totalPower\",\"type\":\"uint256\"},{\"name\":\"startDate\",\"type\":\"uint64\"},{\"name\":\"snapshotBlock\",\"type\":\"uint64\"},{\"name\":\"status\",\"type\":\"uint8\"},{\"name\":\"settingId\",\"type\":\"uint256\"},{\"name\":\"actionId\",\"type\":\"uint256\"},{\"name\":\"pausedAt\",\"type\":\"uint64\"},{\"name\":\"pauseDuration\",\"type\":\"uint64\"},{\"name\":\"quietEndingExtensionDuration\",\"type\":\"uint64\"},{\"name\":\"quietEndingSnapshotSupport\",\"type\":\"uint8\"},{\"name\":\"executionScriptHash\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_evmScript\",\"type\":\"bytes\"},{\"name\":\"_context\",\"type\":\"bytes\"}],\"name\":\"forward\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_minAcceptQuorumPct\",\"type\":\"uint64\"}],\"name\":\"changeMinAcceptQuorumPct\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CHANGE_SUPPORT_ROLE\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_voteId\",\"type\":\"uint256\"}],\"name\":\"canChallenge\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_executionDelay\",\"type\":\"uint64\"}],\"name\":\"changeExecutionDelay\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_voteId\",\"type\":\"uint256\"},{\"name\":\"_supports\",\"type\":\"bool\"},{\"name\":\"_voters\",\"type\":\"address[]\"}],\"name\":\"voteOnBehalfOf\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_voteId\",\"type\":\"uint256\"}],\"name\":\"canClose\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CHANGE_DELEGATED_VOTING_PERIOD_ROLE\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_disputableActionId\",\"type\":\"uint256\"}],\"name\":\"onDisputableActionAllowed\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_supportRequiredPct\",\"type\":\"uint64\"}],\"name\":\"changeSupportRequiredPct\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"}],\"name\":\"allowRecoverability\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_disputableActionId\",\"type\":\"uint256\"},{\"name\":\"_challengeId\",\"type\":\"uint256\"},{\"name\":\"_challenger\",\"type\":\"address\"}],\"name\":\"onDisputableActionChallenged\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"appId\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_voteId\",\"type\":\"uint256\"},{\"name\":\"_voters\",\"type\":\"address[]\"},{\"name\":\"_representative\",\"type\":\"address\"}],\"name\":\"canVoteOnBehalfOf\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CHANGE_QUIET_ENDING_ROLE\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getInitializationBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CHALLENGE_ROLE\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_voter\",\"type\":\"address\"},{\"name\":\"_representative\",\"type\":\"address\"}],\"name\":\"isRepresentativeOf\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_voteId\",\"type\":\"uint256\"},{\"name\":\"_executionScript\",\"type\":\"bytes\"}],\"name\":\"executeVote\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CHANGE_QUORUM_ROLE\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_voteId\",\"type\":\"uint256\"},{\"name\":\"_voter\",\"type\":\"address\"}],\"name\":\"getCastVote\",\"outputs\":[{\"name\":\"state\",\"type\":\"uint8\"},{\"name\":\"caster\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"transferToVault\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\"},{\"name\":\"_role\",\"type\":\"bytes32\"},{\"name\":\"_params\",\"type\":\"uint256[]\"}],\"name\":\"canPerform\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getEVMScriptRegistry\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_voteId\",\"type\":\"uint256\"}],\"name\":\"canRepresentativesVote\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_voteTime\",\"type\":\"uint64\"},{\"name\":\"_supportRequiredPct\",\"type\":\"uint64\"},{\"name\":\"_minAcceptQuorumPct\",\"type\":\"uint64\"},{\"name\":\"_delegatedVotingPeriod\",\"type\":\"uint64\"},{\"name\":\"_quietEndingPeriod\",\"type\":\"uint64\"},{\"name\":\"_quietEndingExtension\",\"type\":\"uint64\"},{\"name\":\"_executionDelay\",\"type\":\"uint64\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_disputableActionId\",\"type\":\"uint256\"}],\"name\":\"onDisputableActionVoided\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_delegatedVotingPeriod\",\"type\":\"uint64\"}],\"name\":\"changeDelegatedVotingPeriod\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAgreement\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CREATE_VOTES_ROLE\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\"},{\"name\":\"_evmScript\",\"type\":\"bytes\"}],\"name\":\"canForward\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_voteTime\",\"type\":\"uint64\"}],\"name\":\"changeVoteTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_voteId\",\"type\":\"uint256\"},{\"name\":\"_supports\",\"type\":\"bool\"}],\"name\":\"vote\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_voteId\",\"type\":\"uint256\"}],\"name\":\"canExecute\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_voteId\",\"type\":\"uint256\"},{\"name\":\"_voter\",\"type\":\"address\"}],\"name\":\"canVote\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SET_AGREEMENT_ROLE\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"kernel\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isPetrified\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"votesLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_disputableActionId\",\"type\":\"uint256\"}],\"name\":\"onDisputableActionRejected\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PCT_BASE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isForwarder\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"settingId\",\"type\":\"uint256\"}],\"name\":\"NewSetting\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"voteTime\",\"type\":\"uint64\"}],\"name\":\"ChangeVoteTime\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"supportRequiredPct\",\"type\":\"uint64\"}],\"name\":\"ChangeSupportRequired\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"minAcceptQuorumPct\",\"type\":\"uint64\"}],\"name\":\"ChangeMinQuorum\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"delegatedVotingPeriod\",\"type\":\"uint64\"}],\"name\":\"ChangeDelegatedVotingPeriod\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"quietEndingPeriod\",\"type\":\"uint64\"},{\"indexed\":false,\"name\":\"quietEndingExtension\",\"type\":\"uint64\"}],\"name\":\"ChangeQuietEndingConfiguration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"executionDelay\",\"type\":\"uint64\"}],\"name\":\"ChangeExecutionDelay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"voteId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"context\",\"type\":\"bytes\"},{\"indexed\":false,\"name\":\"executionScript\",\"type\":\"bytes\"}],\"name\":\"StartVote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"voteId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"challengeId\",\"type\":\"uint256\"}],\"name\":\"PauseVote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"voteId\",\"type\":\"uint256\"}],\"name\":\"ResumeVote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"voteId\",\"type\":\"uint256\"}],\"name\":\"CancelVote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"voteId\",\"type\":\"uint256\"}],\"name\":\"ExecuteVote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"voteId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"passing\",\"type\":\"bool\"}],\"name\":\"QuietEndingExtendVote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"voteId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"supports\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"caster\",\"type\":\"address\"}],\"name\":\"CastVote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"representative\",\"type\":\"address\"}],\"name\":\"ChangeRepresentative\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"voteId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"representative\",\"type\":\"address\"}],\"name\":\"ProxyVoteFailure\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"executor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"script\",\"type\":\"bytes\"},{\"indexed\":false,\"name\":\"input\",\"type\":\"bytes\"},{\"indexed\":false,\"name\":\"returnData\",\"type\":\"bytes\"}],\"name\":\"ScriptResult\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"vault\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RecoverToVault\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"agreement\",\"type\":\"address\"}],\"name\":\"AgreementSet\",\"type\":\"event\"}],\"devdoc\":{\"methods\":{\"allowRecoverability(address)\":{\"details\":\"By default deriving from AragonApp makes it recoverable\",\"params\":{\"token\":\"Token address that would be recovered\"},\"return\":\"bool whether the app allows the recovery\"},\"canChallenge(uint256)\":{\"details\":\"Tell if a vote can be challenged     Called by the linked Agreement when a challenge is requested for the associated vote\",\"params\":{\"_voteId\":\"Identification number of the vote being queried\"},\"return\":\"True if the vote can be challenged\"},\"canClose(uint256)\":{\"details\":\"Tell if a vote can be closed     Called by the linked Agreement when the action associated with the vote is requested to be manually closed\",\"params\":{\"_voteId\":\"Identification number of the vote being queried\"},\"return\":\"True if the vote can be closed\"},\"canExecute(uint256)\":{\"details\":\"Tell if a vote can be executed     Initialization check is implicitly provided by `_getVote()` as new votes can only be     created via `newVote()`, which requires initialization\",\"params\":{\"_voteId\":\"Identification number of the vote being queried\"},\"return\":\"True if the vote can be executed\"},\"canForward(address,bytes)\":{\"details\":\"Tell if an address can forward actions (by creating a vote)     IForwarderWithContext interface conformance\",\"params\":{\"_evmScript\":\"EVM script being forwarded\",\"_sender\":\"Address intending to forward an action\"},\"return\":\"True if the address is allowed create a vote containing the action\"},\"canPerform(address,bytes32,uint256[])\":{\"details\":\"Check whether an action can be performed by a sender for a particular role on this app\",\"params\":{\"_params\":\"Permission params for the role\",\"_role\":\"Role on this app\",\"_sender\":\"Sender of the call\"},\"return\":\"Boolean indicating whether the sender has the permissions to perform the action.        Always returns false if the app hasn't been initialized yet.\"},\"canRepresentativesVote(uint256)\":{\"details\":\"Tell if a vote currently allows representatives to vote for delegated voters     Initialization check is implicitly provided by `_getVote()` as new votes can only be     created via `newVote()`, which requires initialization\",\"params\":{\"_voteId\":\"Vote identifier\"},\"return\":\"True if the vote currently allows representatives to vote\"},\"canVote(uint256,address)\":{\"details\":\"Tell if a voter can participate in a vote     Initialization check is implicitly provided by `_getVote()` as new votes can only be     created via `newVote()`, which requires initialization\",\"params\":{\"_voteId\":\"Identification number of the vote being queried\",\"_voter\":\"Address of the voter being queried\"},\"return\":\"True if the voter can participate in the vote\"},\"canVoteOnBehalfOf(uint256,address[],address)\":{\"details\":\"Tell if a representative can vote on behalf of delegated voters in a vote     Initialization check is implicitly provided by `_getVote()` as new votes can only be     created via `newVote()`, which requires initialization\",\"params\":{\"_representative\":\"Address of the representative being queried\",\"_voteId\":\"Identification number of the vote being queried\",\"_voters\":\"Addresses of the delegated voters being queried\"},\"return\":\"True if the representative can vote on behalf of the delegated voters in the vote\"},\"changeDelegatedVotingPeriod(uint64)\":{\"params\":{\"_delegatedVotingPeriod\":\"New delegated voting period\"}},\"changeExecutionDelay(uint64)\":{\"params\":{\"_executionDelay\":\"New execution delay\"}},\"changeMinAcceptQuorumPct(uint64)\":{\"params\":{\"_minAcceptQuorumPct\":\"New minimum acceptance quorum; expressed as a percentage of 10^18\"}},\"changeQuietEndingConfiguration(uint64,uint64)\":{\"params\":{\"_quietEndingExtension\":\"New quiet ending extension\",\"_quietEndingPeriod\":\"New quiet ending period\"}},\"changeSupportRequiredPct(uint64)\":{\"params\":{\"_supportRequiredPct\":\"New required support; expressed as a percentage of 10^18\"}},\"changeVoteTime(uint64)\":{\"params\":{\"_voteTime\":\"New vote time\"}},\"executeVote(uint256,bytes)\":{\"details\":\"Initialization check is implicitly provided by `_getVote()` as new votes can only be     created via `newVote()`, which requires initialization\",\"params\":{\"_executionScript\":\"Action (encoded as an EVM script) to be executed, must match the one used when the vote was created\",\"_voteId\":\"Identification number of the vote\"}},\"forward(bytes,bytes)\":{\"details\":\"IForwarderWithContext interface conformance.     This app (as a DisputableAragonApp) is required to be the initial step in the forwarding chain.\",\"params\":{\"_context\":\"Additional context for the vote, also used as the disputable action's context on the linked Agreement\",\"_evmScript\":\"Action (encoded as an EVM script) that will be allowed to execute if the vote passes\"}},\"forwarderType()\":{\"details\":\"Tell the forwarder type\",\"return\":\"Always 2 (ForwarderType.WITH_CONTEXT)\"},\"getAgreement()\":{\"details\":\"Tell the linked Agreement\",\"return\":\"Agreement\"},\"getCastVote(uint256,address)\":{\"details\":\"Tell the state of a voter for a vote     Initialization check is implicitly provided by `_getVote()` as new votes can only be     created via `newVote()`, which requires initialization\",\"params\":{\"_voteId\":\"Identification number of the vote\",\"_voter\":\"Address of the voter being queried\"},\"return\":\"state Voter's cast state being queriedcaster Address of the vote's caster\"},\"getInitializationBlock()\":{\"return\":\"Block number in which the contract was initialized\"},\"getRecoveryVault()\":{\"details\":\"Get the recovery vault for the app\",\"return\":\"Recovery vault address for the app\"},\"getSetting(uint256)\":{\"details\":\"Tell the information for a setting     Initialization check is implicitly provided by `_getSetting()` as new settings can only be     created via `change*()` functions which require initialization\",\"params\":{\"_settingId\":\"Identification number of the setting\"},\"return\":\"voteTime Base vote durationsupportRequiredPct Required support % (yes power / voted power) for a vote to pass; expressed as a percentage of 10^18minAcceptQuorumPct Required quorum % (yes power / total power) for a vote to pass; expressed as a percentage of 10^18delegatedVotingPeriod Duration of the delegated voting periodquietEndingPeriod Duration to detect non-quiet endingsquietEndingExtension Duration to extend a vote in case of non-quiet endingexecutionDelay Duration to wait before a passed vote can be executed\"},\"getVote(uint256)\":{\"details\":\"Tell the information for a vote     Initialization check is implicitly provided by `_getVote()` as new votes can only be     created via `newVote()`, which requires initialization\",\"params\":{\"_voteId\":\"Identification number of the vote\"},\"return\":\"yea Voting power fornay Voting power againsttotalPower Total voting power available (based on the snapshot block)startDate Datetime when the vote was createdsnapshotBlock Block number used to check voting power on attached tokenstatus Status of the votesettingId Identification number of the setting applicable to the voteactionId Identification number of the associated disputable action on the linked AgreementpausedAt Datetime when the vote was pausedpauseDuration Duration of the pause (only updated once resumed)quietEndingExtensionDuration Duration a vote was extended due to non-quiet endingsquietEndingSnapshotSupport Snapshot of the vote's support at the beginning of the first quiet ending periodexecutionScriptHash Hash of the EVM script attached to the vote\"},\"hasInitialized()\":{\"return\":\"Whether the contract has been initialized by the time of the current block\"},\"initialize(address,uint64,uint64,uint64,uint64,uint64,uint64,uint64)\":{\"params\":{\"_delegatedVotingPeriod\":\"Duration from the start of a vote that representatives are allowed to vote on behalf of principals\",\"_executionDelay\":\"Duration to wait before a passed vote can be executed\",\"_minAcceptQuorumPct\":\"Required quorum % (yes power / total power) for a vote to pass; expressed as a percentage of 10^18\",\"_quietEndingExtension\":\"Duration to extend a vote in case of non-quiet ending\",\"_quietEndingPeriod\":\"Duration to detect non-quiet endings\",\"_supportRequiredPct\":\"Required support % (yes power / voted power) for a vote to pass; expressed as a percentage of 10^18\",\"_token\":\"MiniMeToken Address that will be used as governance token\",\"_voteTime\":\"Base duration a vote will be open for voting\"}},\"isForwarder()\":{\"details\":\"Report whether the implementing app is a forwarder     Required for backwards compatibility with aragonOS 4\",\"return\":\"Always true\"},\"isRepresentativeOf(address,address)\":{\"details\":\"Tell if a representative currently represents another voter\",\"params\":{\"_representative\":\"Address of the representative being queried\",\"_voter\":\"Address of the delegated voter being queried\"},\"return\":\"True if the representative currently represents the voter\"},\"isVoteOpenForVoting(uint256)\":{\"details\":\"Tell if a vote is open for voting     Initialization check is implicitly provided by `_getVote()` as new votes can only be     created via `newVote()`, which requires initialization\",\"params\":{\"_voteId\":\"Identification number of the vote being queried\"},\"return\":\"True if the vote is open for voting\"},\"newVote(bytes,bytes)\":{\"params\":{\"_context\":\"Additional context for the vote, also used as the disputable action's context on the linked Agreement\",\"_executionScript\":\"Action (encoded as an EVM script) that will be allowed to execute if the vote passes\"},\"return\":\"Identification number of the newly created vote\"},\"onDisputableActionAllowed(uint256)\":{\"details\":\"This hook must be implemented by Disputable apps. We provide a base implementation to ensure that the `onlyAgreement` modifier     is included. Subclasses should implement the internal implementation of the hook.\",\"params\":{\"_disputableActionId\":\"Identifier of the action to be allowed\"}},\"onDisputableActionChallenged(uint256,uint256,address)\":{\"details\":\"This hook must be implemented by Disputable apps. We provide a base implementation to ensure that the `onlyAgreement` modifier     is included. Subclasses should implement the internal implementation of the hook.\",\"params\":{\"_challengeId\":\"Identifier of the challenge in the context of the Agreement\",\"_challenger\":\"Address that submitted the challenge\",\"_disputableActionId\":\"Identifier of the action to be challenged\"}},\"onDisputableActionRejected(uint256)\":{\"details\":\"This hook must be implemented by Disputable apps. We provide a base implementation to ensure that the `onlyAgreement` modifier     is included. Subclasses should implement the internal implementation of the hook.\",\"params\":{\"_disputableActionId\":\"Identifier of the action to be rejected\"}},\"onDisputableActionVoided(uint256)\":{\"details\":\"This hook must be implemented by Disputable apps. We provide a base implementation to ensure that the `onlyAgreement` modifier     is included. Subclasses should implement the internal implementation of the hook.\",\"params\":{\"_disputableActionId\":\"Identifier of the action to be voided\"}},\"setAgreement(address)\":{\"params\":{\"_agreement\":\"Agreement instance to be set\"}},\"setRepresentative(address)\":{\"params\":{\"_representative\":\"Address of the representative who is allowed to vote on behalf of the sender. Use the zero address for none.\"}},\"supportsInterface(bytes4)\":{\"details\":\"Query if a contract implements a certain interface\",\"params\":{\"_interfaceId\":\"The interface identifier being queried, as specified in ERC-165\"},\"return\":\"True if the contract implements the requested interface and if its not 0xffffffff, false otherwise\"},\"transferToVault(address)\":{\"params\":{\"_token\":\"Token balance to be sent to recovery vault.\"}},\"vote(uint256,bool)\":{\"details\":\"Initialization check is implicitly provided by `_getVote()` as new votes can only be     created via `newVote()`, which requires initialization\",\"params\":{\"_supports\":\"Whether voter supports the vote\",\"_voteId\":\"Identification number of the vote\"}},\"voteOnBehalfOf(uint256,bool,address[])\":{\"details\":\"Initialization check is implicitly provided by `_getVote()` as new votes can only be     created via `newVote()`, which requires initialization\",\"params\":{\"_supports\":\"Whether the representative supports the vote\",\"_voteId\":\"Identification number of the vote\",\"_voters\":\"Addresses of the delegated voters to vote on behalf of\"}}}},\"userdoc\":{\"methods\":{\"changeDelegatedVotingPeriod(uint64)\":{\"notice\":\"Change delegated voting period to `@transformTime(_delegatedVotingPeriod)`\"},\"changeExecutionDelay(uint64)\":{\"notice\":\"Change execution delay to `@transformTime(_executionDelay)`\"},\"changeMinAcceptQuorumPct(uint64)\":{\"notice\":\"Change minimum acceptance quorum to `@formatPct(_minAcceptQuorumPct)`%\"},\"changeQuietEndingConfiguration(uint64,uint64)\":{\"notice\":\"Change quiet ending period to `@transformTime(_quietEndingPeriod)` with extensions of `@transformTime(_quietEndingExtension)`\"},\"changeSupportRequiredPct(uint64)\":{\"notice\":\"Change required support to `@formatPct(_supportRequiredPct)`%\"},\"changeVoteTime(uint64)\":{\"notice\":\"Change vote time to `@transformTime(_voteTime)`\"},\"executeVote(uint256,bytes)\":{\"notice\":\"Execute vote #`_voteId`\"},\"forward(bytes,bytes)\":{\"notice\":\"Create a vote to execute the desired action\"},\"initialize(address,uint64,uint64,uint64,uint64,uint64,uint64,uint64)\":{\"notice\":\"Initialize Disputable Voting with `_token.symbol(): string` for governance, a voting duration of `@transformTime(_voteTime)`, minimum support of `@formatPct(_supportRequiredPct)`%, minimum acceptance quorum of `@formatPct(_minAcceptQuorumPct)`%, a delegated voting period of `@transformTime(_delegatedVotingPeriod), and a execution delay of `@transformTime(_executionDelay)`\"},\"newVote(bytes,bytes)\":{\"notice\":\"Create a new vote about \\\"`_context`\\\"\"},\"onDisputableActionAllowed(uint256)\":{\"notice\":\"Allow disputable action #`_disputableActionId`\"},\"onDisputableActionChallenged(uint256,uint256,address)\":{\"notice\":\"Challenge disputable action #`_disputableActionId`\"},\"onDisputableActionRejected(uint256)\":{\"notice\":\"Reject disputable action #`_disputableActionId`\"},\"onDisputableActionVoided(uint256)\":{\"notice\":\"Void disputable action #`_disputableActionId`\"},\"setAgreement(address)\":{\"notice\":\"Set Agreement to `_agreement`\"},\"setRepresentative(address)\":{\"notice\":\"`_representative == 0x0 ? 'Set your voting representative to ' + _representative : 'Remove your representative'`\"},\"transferToVault(address)\":{\"notice\":\"Send funds to recovery Vault. This contract should never receive funds,        but in case it does, this function allows one to recover them.\"},\"vote(uint256,bool)\":{\"notice\":\"Vote `_supports ? 'yes' : 'no'` in vote #`_voteId`\"},\"voteOnBehalfOf(uint256,bool,address[])\":{\"notice\":\"Vote `_supports ? 'yes' : 'no'` in vote #`_voteId` on behalf of delegated voters\"}}}},\"settings\":{\"compilationTarget\":{\"contracts/DisputableVoting.sol\":\"DisputableVoting\"},\"evmVersion\":\"byzantium\",\"libraries\":{},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@aragon/minime/contracts/ITokenController.sol\":{\"content\":\"pragma solidity ^0.4.24;\\n\\n/// @dev The token controller contract must implement these functions\\n\\n\\ninterface ITokenController {\\n    /// @notice Called when `_owner` sends ether to the MiniMe Token contract\\n    /// @param _owner The address that sent the ether to create tokens\\n    /// @return True if the ether is accepted, false if it throws\\n    function proxyPayment(address _owner) external payable returns(bool);\\n\\n    /// @notice Notifies the controller about a token transfer allowing the\\n    ///  controller to react if desired\\n    /// @param _from The origin of the transfer\\n    /// @param _to The destination of the transfer\\n    /// @param _amount The amount of the transfer\\n    /// @return False if the controller does not authorize the transfer\\n    function onTransfer(address _from, address _to, uint _amount) external returns(bool);\\n\\n    /// @notice Notifies the controller about an approval allowing the\\n    ///  controller to react if desired\\n    /// @param _owner The address that calls `approve()`\\n    /// @param _spender The spender in the `approve()` call\\n    /// @param _amount The amount in the `approve()` call\\n    /// @return False if the controller does not authorize the approval\\n    function onApprove(address _owner, address _spender, uint _amount) external returns(bool);\\n}\\n\",\"keccak256\":\"0x030d1ea5543fd23d3c962cbf34b1c3b6e15d9bbfb711416e1cf4160c3bcdccaa\"},\"@aragon/minime/contracts/MiniMeToken.sol\":{\"content\":\"pragma solidity ^0.4.24;\\n\\n/*\\n    Copyright 2016, Jordi Baylina\\n    This program is free software: you can redistribute it and/or modify\\n    it under the terms of the GNU General Public License as published by\\n    the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n    This program is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    GNU General Public License for more details.\\n    You should have received a copy of the GNU General Public License\\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n */\\n\\n/// @title MiniMeToken Contract\\n/// @author Jordi Baylina\\n/// @dev This token contract's goal is to make it easy for anyone to clone this\\n///  token using the token distribution at a given block, this will allow DAO's\\n///  and DApps to upgrade their features in a decentralized manner without\\n///  affecting the original token\\n/// @dev It is ERC20 compliant, but still needs to under go further testing.\\n\\nimport \\\"./ITokenController.sol\\\";\\n\\ncontract Controlled {\\n    /// @notice The address of the controller is the only address that can call\\n    ///  a function with this modifier\\n    modifier onlyController {\\n        require(msg.sender == controller);\\n        _;\\n    }\\n\\n    address public controller;\\n\\n    function Controlled()  public { controller = msg.sender;}\\n\\n    /// @notice Changes the controller of the contract\\n    /// @param _newController The new controller of the contract\\n    function changeController(address _newController) onlyController  public {\\n        controller = _newController;\\n    }\\n}\\n\\ncontract ApproveAndCallFallBack {\\n    function receiveApproval(\\n        address from,\\n        uint256 _amount,\\n        address _token,\\n        bytes _data\\n    ) public;\\n}\\n\\n/// @dev The actual token contract, the default controller is the msg.sender\\n///  that deploys the contract, so usually this token will be deployed by a\\n///  token controller contract, which Giveth will call a \\\"Campaign\\\"\\ncontract MiniMeToken is Controlled {\\n\\n    string public name;                //The Token's name: e.g. DigixDAO Tokens\\n    uint8 public decimals;             //Number of decimals of the smallest unit\\n    string public symbol;              //An identifier: e.g. REP\\n    string public version = \\\"MMT_0.1\\\"; //An arbitrary versioning scheme\\n\\n\\n    /// @dev `Checkpoint` is the structure that attaches a block number to a\\n    ///  given value, the block number attached is the one that last changed the\\n    ///  value\\n    struct Checkpoint {\\n\\n        // `fromBlock` is the block number that the value was generated from\\n        uint128 fromBlock;\\n\\n        // `value` is the amount of tokens at a specific block number\\n        uint128 value;\\n    }\\n\\n    // `parentToken` is the Token address that was cloned to produce this token;\\n    //  it will be 0x0 for a token that was not cloned\\n    MiniMeToken public parentToken;\\n\\n    // `parentSnapShotBlock` is the block number from the Parent Token that was\\n    //  used to determine the initial distribution of the Clone Token\\n    uint public parentSnapShotBlock;\\n\\n    // `creationBlock` is the block number that the Clone Token was created\\n    uint public creationBlock;\\n\\n    // `balances` is the map that tracks the balance of each address, in this\\n    //  contract when the balance changes the block number that the change\\n    //  occurred is also included in the map\\n    mapping (address => Checkpoint[]) balances;\\n\\n    // `allowed` tracks any extra transfer rights as in all ERC20 tokens\\n    mapping (address => mapping (address => uint256)) allowed;\\n\\n    // Tracks the history of the `totalSupply` of the token\\n    Checkpoint[] totalSupplyHistory;\\n\\n    // Flag that determines if the token is transferable or not.\\n    bool public transfersEnabled;\\n\\n    // The factory used to create new clone tokens\\n    MiniMeTokenFactory public tokenFactory;\\n\\n////////////////\\n// Constructor\\n////////////////\\n\\n    /// @notice Constructor to create a MiniMeToken\\n    /// @param _tokenFactory The address of the MiniMeTokenFactory contract that\\n    ///  will create the Clone token contracts, the token factory needs to be\\n    ///  deployed first\\n    /// @param _parentToken Address of the parent token, set to 0x0 if it is a\\n    ///  new token\\n    /// @param _parentSnapShotBlock Block of the parent token that will\\n    ///  determine the initial distribution of the clone token, set to 0 if it\\n    ///  is a new token\\n    /// @param _tokenName Name of the new token\\n    /// @param _decimalUnits Number of decimals of the new token\\n    /// @param _tokenSymbol Token Symbol for the new token\\n    /// @param _transfersEnabled If true, tokens will be able to be transferred\\n    function MiniMeToken(\\n        MiniMeTokenFactory _tokenFactory,\\n        MiniMeToken _parentToken,\\n        uint _parentSnapShotBlock,\\n        string _tokenName,\\n        uint8 _decimalUnits,\\n        string _tokenSymbol,\\n        bool _transfersEnabled\\n    )  public\\n    {\\n        tokenFactory = _tokenFactory;\\n        name = _tokenName;                                 // Set the name\\n        decimals = _decimalUnits;                          // Set the decimals\\n        symbol = _tokenSymbol;                             // Set the symbol\\n        parentToken = _parentToken;\\n        parentSnapShotBlock = _parentSnapShotBlock;\\n        transfersEnabled = _transfersEnabled;\\n        creationBlock = block.number;\\n    }\\n\\n\\n///////////////////\\n// ERC20 Methods\\n///////////////////\\n\\n    /// @notice Send `_amount` tokens to `_to` from `msg.sender`\\n    /// @param _to The address of the recipient\\n    /// @param _amount The amount of tokens to be transferred\\n    /// @return Whether the transfer was successful or not\\n    function transfer(address _to, uint256 _amount) public returns (bool success) {\\n        require(transfersEnabled);\\n        return doTransfer(msg.sender, _to, _amount);\\n    }\\n\\n    /// @notice Send `_amount` tokens to `_to` from `_from` on the condition it\\n    ///  is approved by `_from`\\n    /// @param _from The address holding the tokens being transferred\\n    /// @param _to The address of the recipient\\n    /// @param _amount The amount of tokens to be transferred\\n    /// @return True if the transfer was successful\\n    function transferFrom(address _from, address _to, uint256 _amount) public returns (bool success) {\\n\\n        // The controller of this contract can move tokens around at will,\\n        //  this is important to recognize! Confirm that you trust the\\n        //  controller of this contract, which in most situations should be\\n        //  another open source smart contract or 0x0\\n        if (msg.sender != controller) {\\n            require(transfersEnabled);\\n\\n            // The standard ERC 20 transferFrom functionality\\n            if (allowed[_from][msg.sender] < _amount)\\n                return false;\\n            allowed[_from][msg.sender] -= _amount;\\n        }\\n        return doTransfer(_from, _to, _amount);\\n    }\\n\\n    /// @dev This is the actual transfer function in the token contract, it can\\n    ///  only be called by other functions in this contract.\\n    /// @param _from The address holding the tokens being transferred\\n    /// @param _to The address of the recipient\\n    /// @param _amount The amount of tokens to be transferred\\n    /// @return True if the transfer was successful\\n    function doTransfer(address _from, address _to, uint _amount) internal returns(bool) {\\n        if (_amount == 0) {\\n            return true;\\n        }\\n        require(parentSnapShotBlock < block.number);\\n        // Do not allow transfer to 0x0 or the token contract itself\\n        require((_to != 0) && (_to != address(this)));\\n        // If the amount being transfered is more than the balance of the\\n        //  account the transfer returns false\\n        var previousBalanceFrom = balanceOfAt(_from, block.number);\\n        if (previousBalanceFrom < _amount) {\\n            return false;\\n        }\\n        // Alerts the token controller of the transfer\\n        if (isContract(controller)) {\\n            // Adding the ` == true` makes the linter shut up so...\\n            require(ITokenController(controller).onTransfer(_from, _to, _amount) == true);\\n        }\\n        // First update the balance array with the new value for the address\\n        //  sending the tokens\\n        updateValueAtNow(balances[_from], previousBalanceFrom - _amount);\\n        // Then update the balance array with the new value for the address\\n        //  receiving the tokens\\n        var previousBalanceTo = balanceOfAt(_to, block.number);\\n        require(previousBalanceTo + _amount >= previousBalanceTo); // Check for overflow\\n        updateValueAtNow(balances[_to], previousBalanceTo + _amount);\\n        // An event to make the transfer easy to find on the blockchain\\n        Transfer(_from, _to, _amount);\\n        return true;\\n    }\\n\\n    /// @param _owner The address that's balance is being requested\\n    /// @return The balance of `_owner` at the current block\\n    function balanceOf(address _owner) public constant returns (uint256 balance) {\\n        return balanceOfAt(_owner, block.number);\\n    }\\n\\n    /// @notice `msg.sender` approves `_spender` to spend `_amount` tokens on\\n    ///  its behalf. This is a modified version of the ERC20 approve function\\n    ///  to be a little bit safer\\n    /// @param _spender The address of the account able to transfer the tokens\\n    /// @param _amount The amount of tokens to be approved for transfer\\n    /// @return True if the approval was successful\\n    function approve(address _spender, uint256 _amount) public returns (bool success) {\\n        require(transfersEnabled);\\n\\n        // To change the approve amount you first have to reduce the addresses`\\n        //  allowance to zero by calling `approve(_spender,0)` if it is not\\n        //  already 0 to mitigate the race condition described here:\\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n        require((_amount == 0) || (allowed[msg.sender][_spender] == 0));\\n\\n        // Alerts the token controller of the approve function call\\n        if (isContract(controller)) {\\n            // Adding the ` == true` makes the linter shut up so...\\n            require(ITokenController(controller).onApprove(msg.sender, _spender, _amount) == true);\\n        }\\n\\n        allowed[msg.sender][_spender] = _amount;\\n        Approval(msg.sender, _spender, _amount);\\n        return true;\\n    }\\n\\n    /// @dev This function makes it easy to read the `allowed[]` map\\n    /// @param _owner The address of the account that owns the token\\n    /// @param _spender The address of the account able to transfer the tokens\\n    /// @return Amount of remaining tokens of _owner that _spender is allowed\\n    ///  to spend\\n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\\n        return allowed[_owner][_spender];\\n    }\\n\\n    /// @notice `msg.sender` approves `_spender` to send `_amount` tokens on\\n    ///  its behalf, and then a function is triggered in the contract that is\\n    ///  being approved, `_spender`. This allows users to use their tokens to\\n    ///  interact with contracts in one function call instead of two\\n    /// @param _spender The address of the contract able to transfer the tokens\\n    /// @param _amount The amount of tokens to be approved for transfer\\n    /// @return True if the function call was successful\\n    function approveAndCall(ApproveAndCallFallBack _spender, uint256 _amount, bytes _extraData) public returns (bool success) {\\n        require(approve(_spender, _amount));\\n\\n        _spender.receiveApproval(\\n            msg.sender,\\n            _amount,\\n            this,\\n            _extraData\\n        );\\n\\n        return true;\\n    }\\n\\n    /// @dev This function makes it easy to get the total number of tokens\\n    /// @return The total number of tokens\\n    function totalSupply() public constant returns (uint) {\\n        return totalSupplyAt(block.number);\\n    }\\n\\n\\n////////////////\\n// Query balance and totalSupply in History\\n////////////////\\n\\n    /// @dev Queries the balance of `_owner` at a specific `_blockNumber`\\n    /// @param _owner The address from which the balance will be retrieved\\n    /// @param _blockNumber The block number when the balance is queried\\n    /// @return The balance at `_blockNumber`\\n    function balanceOfAt(address _owner, uint _blockNumber) public constant returns (uint) {\\n\\n        // These next few lines are used when the balance of the token is\\n        //  requested before a check point was ever created for this token, it\\n        //  requires that the `parentToken.balanceOfAt` be queried at the\\n        //  genesis block for that token as this contains initial balance of\\n        //  this token\\n        if ((balances[_owner].length == 0) || (balances[_owner][0].fromBlock > _blockNumber)) {\\n            if (address(parentToken) != 0) {\\n                return parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock));\\n            } else {\\n                // Has no parent\\n                return 0;\\n            }\\n\\n        // This will return the expected balance during normal situations\\n        } else {\\n            return getValueAt(balances[_owner], _blockNumber);\\n        }\\n    }\\n\\n    /// @notice Total amount of tokens at a specific `_blockNumber`.\\n    /// @param _blockNumber The block number when the totalSupply is queried\\n    /// @return The total amount of tokens at `_blockNumber`\\n    function totalSupplyAt(uint _blockNumber) public constant returns(uint) {\\n\\n        // These next few lines are used when the totalSupply of the token is\\n        //  requested before a check point was ever created for this token, it\\n        //  requires that the `parentToken.totalSupplyAt` be queried at the\\n        //  genesis block for this token as that contains totalSupply of this\\n        //  token at this block number.\\n        if ((totalSupplyHistory.length == 0) || (totalSupplyHistory[0].fromBlock > _blockNumber)) {\\n            if (address(parentToken) != 0) {\\n                return parentToken.totalSupplyAt(min(_blockNumber, parentSnapShotBlock));\\n            } else {\\n                return 0;\\n            }\\n\\n        // This will return the expected totalSupply during normal situations\\n        } else {\\n            return getValueAt(totalSupplyHistory, _blockNumber);\\n        }\\n    }\\n\\n////////////////\\n// Clone Token Method\\n////////////////\\n\\n    /// @notice Creates a new clone token with the initial distribution being\\n    ///  this token at `_snapshotBlock`\\n    /// @param _cloneTokenName Name of the clone token\\n    /// @param _cloneDecimalUnits Number of decimals of the smallest unit\\n    /// @param _cloneTokenSymbol Symbol of the clone token\\n    /// @param _snapshotBlock Block when the distribution of the parent token is\\n    ///  copied to set the initial distribution of the new clone token;\\n    ///  if the block is zero than the actual block, the current block is used\\n    /// @param _transfersEnabled True if transfers are allowed in the clone\\n    /// @return The address of the new MiniMeToken Contract\\n    function createCloneToken(\\n        string _cloneTokenName,\\n        uint8 _cloneDecimalUnits,\\n        string _cloneTokenSymbol,\\n        uint _snapshotBlock,\\n        bool _transfersEnabled\\n    ) public returns(MiniMeToken)\\n    {\\n        uint256 snapshot = _snapshotBlock == 0 ? block.number - 1 : _snapshotBlock;\\n\\n        MiniMeToken cloneToken = tokenFactory.createCloneToken(\\n            this,\\n            snapshot,\\n            _cloneTokenName,\\n            _cloneDecimalUnits,\\n            _cloneTokenSymbol,\\n            _transfersEnabled\\n        );\\n\\n        cloneToken.changeController(msg.sender);\\n\\n        // An event to make the token easy to find on the blockchain\\n        NewCloneToken(address(cloneToken), snapshot);\\n        return cloneToken;\\n    }\\n\\n////////////////\\n// Generate and destroy tokens\\n////////////////\\n\\n    /// @notice Generates `_amount` tokens that are assigned to `_owner`\\n    /// @param _owner The address that will be assigned the new tokens\\n    /// @param _amount The quantity of tokens generated\\n    /// @return True if the tokens are generated correctly\\n    function generateTokens(address _owner, uint _amount) onlyController public returns (bool) {\\n        uint curTotalSupply = totalSupply();\\n        require(curTotalSupply + _amount >= curTotalSupply); // Check for overflow\\n        uint previousBalanceTo = balanceOf(_owner);\\n        require(previousBalanceTo + _amount >= previousBalanceTo); // Check for overflow\\n        updateValueAtNow(totalSupplyHistory, curTotalSupply + _amount);\\n        updateValueAtNow(balances[_owner], previousBalanceTo + _amount);\\n        Transfer(0, _owner, _amount);\\n        return true;\\n    }\\n\\n\\n    /// @notice Burns `_amount` tokens from `_owner`\\n    /// @param _owner The address that will lose the tokens\\n    /// @param _amount The quantity of tokens to burn\\n    /// @return True if the tokens are burned correctly\\n    function destroyTokens(address _owner, uint _amount) onlyController public returns (bool) {\\n        uint curTotalSupply = totalSupply();\\n        require(curTotalSupply >= _amount);\\n        uint previousBalanceFrom = balanceOf(_owner);\\n        require(previousBalanceFrom >= _amount);\\n        updateValueAtNow(totalSupplyHistory, curTotalSupply - _amount);\\n        updateValueAtNow(balances[_owner], previousBalanceFrom - _amount);\\n        Transfer(_owner, 0, _amount);\\n        return true;\\n    }\\n\\n////////////////\\n// Enable tokens transfers\\n////////////////\\n\\n\\n    /// @notice Enables token holders to transfer their tokens freely if true\\n    /// @param _transfersEnabled True if transfers are allowed in the clone\\n    function enableTransfers(bool _transfersEnabled) onlyController public {\\n        transfersEnabled = _transfersEnabled;\\n    }\\n\\n////////////////\\n// Internal helper functions to query and set a value in a snapshot array\\n////////////////\\n\\n    /// @dev `getValueAt` retrieves the number of tokens at a given block number\\n    /// @param checkpoints The history of values being queried\\n    /// @param _block The block number to retrieve the value at\\n    /// @return The number of tokens being queried\\n    function getValueAt(Checkpoint[] storage checkpoints, uint _block) constant internal returns (uint) {\\n        if (checkpoints.length == 0)\\n            return 0;\\n\\n        // Shortcut for the actual value\\n        if (_block >= checkpoints[checkpoints.length-1].fromBlock)\\n            return checkpoints[checkpoints.length-1].value;\\n        if (_block < checkpoints[0].fromBlock)\\n            return 0;\\n\\n        // Binary search of the value in the array\\n        uint min = 0;\\n        uint max = checkpoints.length-1;\\n        while (max > min) {\\n            uint mid = (max + min + 1) / 2;\\n            if (checkpoints[mid].fromBlock<=_block) {\\n                min = mid;\\n            } else {\\n                max = mid-1;\\n            }\\n        }\\n        return checkpoints[min].value;\\n    }\\n\\n    /// @dev `updateValueAtNow` used to update the `balances` map and the\\n    ///  `totalSupplyHistory`\\n    /// @param checkpoints The history of data being updated\\n    /// @param _value The new number of tokens\\n    function updateValueAtNow(Checkpoint[] storage checkpoints, uint _value) internal {\\n        require(_value <= uint128(-1));\\n\\n        if ((checkpoints.length == 0) || (checkpoints[checkpoints.length - 1].fromBlock < block.number)) {\\n            Checkpoint storage newCheckPoint = checkpoints[checkpoints.length++];\\n            newCheckPoint.fromBlock = uint128(block.number);\\n            newCheckPoint.value = uint128(_value);\\n        } else {\\n            Checkpoint storage oldCheckPoint = checkpoints[checkpoints.length - 1];\\n            oldCheckPoint.value = uint128(_value);\\n        }\\n    }\\n\\n    /// @dev Internal function to determine if an address is a contract\\n    /// @param _addr The address being queried\\n    /// @return True if `_addr` is a contract\\n    function isContract(address _addr) constant internal returns(bool) {\\n        uint size;\\n        if (_addr == 0)\\n            return false;\\n\\n        assembly {\\n            size := extcodesize(_addr)\\n        }\\n\\n        return size>0;\\n    }\\n\\n    /// @dev Helper function to return a min betwen the two uints\\n    function min(uint a, uint b) pure internal returns (uint) {\\n        return a < b ? a : b;\\n    }\\n\\n    /// @notice The fallback function: If the contract's controller has not been\\n    ///  set to 0, then the `proxyPayment` method is called which relays the\\n    ///  ether and creates tokens as described in the token controller contract\\n    function () external payable {\\n        require(isContract(controller));\\n        // Adding the ` == true` makes the linter shut up so...\\n        require(ITokenController(controller).proxyPayment.value(msg.value)(msg.sender) == true);\\n    }\\n\\n//////////\\n// Safety Methods\\n//////////\\n\\n    /// @notice This method can be used by the controller to extract mistakenly\\n    ///  sent tokens to this contract.\\n    /// @param _token The address of the token contract that you want to recover\\n    ///  set to 0 in case you want to extract ether.\\n    function claimTokens(address _token) onlyController public {\\n        if (_token == 0x0) {\\n            controller.transfer(this.balance);\\n            return;\\n        }\\n\\n        MiniMeToken token = MiniMeToken(_token);\\n        uint balance = token.balanceOf(this);\\n        token.transfer(controller, balance);\\n        ClaimedTokens(_token, controller, balance);\\n    }\\n\\n////////////////\\n// Events\\n////////////////\\n    event ClaimedTokens(address indexed _token, address indexed _controller, uint _amount);\\n    event Transfer(address indexed _from, address indexed _to, uint256 _amount);\\n    event NewCloneToken(address indexed _cloneToken, uint _snapshotBlock);\\n    event Approval(\\n        address indexed _owner,\\n        address indexed _spender,\\n        uint256 _amount\\n        );\\n\\n}\\n\\n\\n////////////////\\n// MiniMeTokenFactory\\n////////////////\\n\\n/// @dev This contract is used to generate clone contracts from a contract.\\n///  In solidity this is the way to create a contract from a contract of the\\n///  same class\\ncontract MiniMeTokenFactory {\\n    event NewFactoryCloneToken(address indexed _cloneToken, address indexed _parentToken, uint _snapshotBlock);\\n\\n    /// @notice Update the DApp by creating a new token with new functionalities\\n    ///  the msg.sender becomes the controller of this clone token\\n    /// @param _parentToken Address of the token being cloned\\n    /// @param _snapshotBlock Block of the parent token that will\\n    ///  determine the initial distribution of the clone token\\n    /// @param _tokenName Name of the new token\\n    /// @param _decimalUnits Number of decimals of the new token\\n    /// @param _tokenSymbol Token Symbol for the new token\\n    /// @param _transfersEnabled If true, tokens will be able to be transferred\\n    /// @return The address of the new token contract\\n    function createCloneToken(\\n        MiniMeToken _parentToken,\\n        uint _snapshotBlock,\\n        string _tokenName,\\n        uint8 _decimalUnits,\\n        string _tokenSymbol,\\n        bool _transfersEnabled\\n    ) public returns (MiniMeToken)\\n    {\\n        MiniMeToken newToken = new MiniMeToken(\\n            this,\\n            _parentToken,\\n            _snapshotBlock,\\n            _tokenName,\\n            _decimalUnits,\\n            _tokenSymbol,\\n            _transfersEnabled\\n        );\\n\\n        newToken.changeController(msg.sender);\\n        NewFactoryCloneToken(address(newToken), address(_parentToken), _snapshotBlock);\\n        return newToken;\\n    }\\n}\",\"keccak256\":\"0x919edb5f2d6fd10329d7de8bbe4c31b144a744d4201b588ead3ddd71cbc2a70c\"},\"@aragon/os/contracts/acl/ACLSyntaxSugar.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\n\\ncontract ACLSyntaxSugar {\\n    function arr() internal pure returns (uint256[]) {\\n        return new uint256[](0);\\n    }\\n\\n    function arr(bytes32 _a) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a));\\n    }\\n\\n    function arr(bytes32 _a, bytes32 _b) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a), uint256(_b));\\n    }\\n\\n    function arr(address _a) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a));\\n    }\\n\\n    function arr(address _a, address _b) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a), uint256(_b));\\n    }\\n\\n    function arr(address _a, uint256 _b, uint256 _c) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a), _b, _c);\\n    }\\n\\n    function arr(address _a, uint256 _b, uint256 _c, uint256 _d) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a), _b, _c, _d);\\n    }\\n\\n    function arr(address _a, uint256 _b) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a), uint256(_b));\\n    }\\n\\n    function arr(address _a, address _b, uint256 _c, uint256 _d, uint256 _e) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a), uint256(_b), _c, _d, _e);\\n    }\\n\\n    function arr(address _a, address _b, address _c) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a), uint256(_b), uint256(_c));\\n    }\\n\\n    function arr(address _a, address _b, uint256 _c) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a), uint256(_b), uint256(_c));\\n    }\\n\\n    function arr(uint256 _a) internal pure returns (uint256[] r) {\\n        r = new uint256[](1);\\n        r[0] = _a;\\n    }\\n\\n    function arr(uint256 _a, uint256 _b) internal pure returns (uint256[] r) {\\n        r = new uint256[](2);\\n        r[0] = _a;\\n        r[1] = _b;\\n    }\\n\\n    function arr(uint256 _a, uint256 _b, uint256 _c) internal pure returns (uint256[] r) {\\n        r = new uint256[](3);\\n        r[0] = _a;\\n        r[1] = _b;\\n        r[2] = _c;\\n    }\\n\\n    function arr(uint256 _a, uint256 _b, uint256 _c, uint256 _d) internal pure returns (uint256[] r) {\\n        r = new uint256[](4);\\n        r[0] = _a;\\n        r[1] = _b;\\n        r[2] = _c;\\n        r[3] = _d;\\n    }\\n\\n    function arr(uint256 _a, uint256 _b, uint256 _c, uint256 _d, uint256 _e) internal pure returns (uint256[] r) {\\n        r = new uint256[](5);\\n        r[0] = _a;\\n        r[1] = _b;\\n        r[2] = _c;\\n        r[3] = _d;\\n        r[4] = _e;\\n    }\\n}\\n\\n\\ncontract ACLHelpers {\\n    function decodeParamOp(uint256 _x) internal pure returns (uint8 b) {\\n        return uint8(_x >> (8 * 30));\\n    }\\n\\n    function decodeParamId(uint256 _x) internal pure returns (uint8 b) {\\n        return uint8(_x >> (8 * 31));\\n    }\\n\\n    function decodeParamsList(uint256 _x) internal pure returns (uint32 a, uint32 b, uint32 c) {\\n        a = uint32(_x);\\n        b = uint32(_x >> (8 * 4));\\n        c = uint32(_x >> (8 * 8));\\n    }\\n}\\n\",\"keccak256\":\"0x672a96975fc17f66905e775645cc93249426ce9601aef597a13d1e449c7f89d0\"},\"@aragon/os/contracts/acl/IACL.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\n\\ninterface IACL {\\n    function initialize(address permissionsCreator) external;\\n\\n    // TODO: this should be external\\n    // See https://github.com/ethereum/solidity/issues/4832\\n    function hasPermission(address who, address where, bytes32 what, bytes how) public view returns (bool);\\n}\\n\",\"keccak256\":\"0x7e081f42891bbcc8fa9f3a67efb34ecafa8e2c075e37a01d74d221c45ddfdd10\"},\"@aragon/os/contracts/apps/AppStorage.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\nimport \\\"./IAragonApp.sol\\\";\\nimport \\\"../common/UnstructuredStorage.sol\\\";\\nimport \\\"../kernel/IKernel.sol\\\";\\n\\n\\ncontract AppStorage is IAragonApp {\\n    using UnstructuredStorage for bytes32;\\n\\n    /* Hardcoded constants to save gas\\n    bytes32 internal constant KERNEL_POSITION = keccak256(\\\"aragonOS.appStorage.kernel\\\");\\n    bytes32 internal constant APP_ID_POSITION = keccak256(\\\"aragonOS.appStorage.appId\\\");\\n    */\\n    bytes32 internal constant KERNEL_POSITION = 0x4172f0f7d2289153072b0a6ca36959e0cbe2efc3afe50fc81636caa96338137b;\\n    bytes32 internal constant APP_ID_POSITION = 0xd625496217aa6a3453eecb9c3489dc5a53e6c67b444329ea2b2cbc9ff547639b;\\n\\n    function kernel() public view returns (IKernel) {\\n        return IKernel(KERNEL_POSITION.getStorageAddress());\\n    }\\n\\n    function appId() public view returns (bytes32) {\\n        return APP_ID_POSITION.getStorageBytes32();\\n    }\\n\\n    function setKernel(IKernel _kernel) internal {\\n        KERNEL_POSITION.setStorageAddress(address(_kernel));\\n    }\\n\\n    function setAppId(bytes32 _appId) internal {\\n        APP_ID_POSITION.setStorageBytes32(_appId);\\n    }\\n}\\n\",\"keccak256\":\"0x57f490644a5acb26fca0b4cb2cc7f52e64b0dbe9ca5d111f7c1b4e5250ed93ad\"},\"@aragon/os/contracts/apps/AragonApp.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\nimport \\\"./AppStorage.sol\\\";\\nimport \\\"../acl/ACLSyntaxSugar.sol\\\";\\nimport \\\"../common/Autopetrified.sol\\\";\\nimport \\\"../common/ConversionHelpers.sol\\\";\\nimport \\\"../common/ReentrancyGuard.sol\\\";\\nimport \\\"../common/VaultRecoverable.sol\\\";\\nimport \\\"../evmscript/EVMScriptRunner.sol\\\";\\nimport \\\"../lib/standards/ERC165.sol\\\";\\n\\n\\n// Contracts inheriting from AragonApp are, by default, immediately petrified upon deployment so\\n// that they can never be initialized.\\n// Unless overriden, this behaviour enforces those contracts to be usable only behind an AppProxy.\\n// ReentrancyGuard, EVMScriptRunner, and ACLSyntaxSugar are not directly used by this contract, but\\n// are included so that they are automatically usable by subclassing contracts\\ncontract AragonApp is ERC165, AppStorage, Autopetrified, VaultRecoverable, ReentrancyGuard, EVMScriptRunner, ACLSyntaxSugar {\\n    string private constant ERROR_AUTH_FAILED = \\\"APP_AUTH_FAILED\\\";\\n\\n    modifier auth(bytes32 _role) {\\n        require(canPerform(msg.sender, _role, new uint256[](0)), ERROR_AUTH_FAILED);\\n        _;\\n    }\\n\\n    modifier authP(bytes32 _role, uint256[] _params) {\\n        require(canPerform(msg.sender, _role, _params), ERROR_AUTH_FAILED);\\n        _;\\n    }\\n\\n    /**\\n    * @dev Check whether an action can be performed by a sender for a particular role on this app\\n    * @param _sender Sender of the call\\n    * @param _role Role on this app\\n    * @param _params Permission params for the role\\n    * @return Boolean indicating whether the sender has the permissions to perform the action.\\n    *         Always returns false if the app hasn't been initialized yet.\\n    */\\n    function canPerform(address _sender, bytes32 _role, uint256[] _params) public view returns (bool) {\\n        if (!hasInitialized()) {\\n            return false;\\n        }\\n\\n        IKernel linkedKernel = kernel();\\n        if (address(linkedKernel) == address(0)) {\\n            return false;\\n        }\\n\\n        return linkedKernel.hasPermission(\\n            _sender,\\n            address(this),\\n            _role,\\n            ConversionHelpers.dangerouslyCastUintArrayToBytes(_params)\\n        );\\n    }\\n\\n    /**\\n    * @dev Get the recovery vault for the app\\n    * @return Recovery vault address for the app\\n    */\\n    function getRecoveryVault() public view returns (address) {\\n        // Funds recovery via a vault is only available when used with a kernel\\n        return kernel().getRecoveryVault(); // if kernel is not set, it will revert\\n    }\\n\\n    /**\\n    * @dev Query if a contract implements a certain interface\\n    * @param _interfaceId The interface identifier being queried, as specified in ERC-165\\n    * @return True if the contract implements the requested interface and if its not 0xffffffff, false otherwise\\n    */\\n    function supportsInterface(bytes4 _interfaceId) public pure returns (bool) {\\n        return super.supportsInterface(_interfaceId) || _interfaceId == ARAGON_APP_INTERFACE_ID;\\n    }\\n}\\n\",\"keccak256\":\"0xa6c2ed08d7df92bf791ff85ecc9e400a874acfa6a7d961fa07e9175fb77231f4\"},\"@aragon/os/contracts/apps/IAragonApp.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\nimport \\\"../kernel/IKernel.sol\\\";\\n\\n\\ncontract IAragonApp {\\n    // Includes appId and kernel methods:\\n    bytes4 internal constant ARAGON_APP_INTERFACE_ID = bytes4(0x54053e6c);\\n\\n    function kernel() public view returns (IKernel);\\n    function appId() public view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xdf64e62d609623a151c233b5f473f385117d68172aa2bf1ac4dc5cd8c5a3fc5b\"},\"@aragon/os/contracts/apps/disputable/DisputableAragonApp.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\nimport \\\"./IAgreement.sol\\\";\\nimport \\\"./IDisputable.sol\\\";\\nimport \\\"../AragonApp.sol\\\";\\nimport \\\"../../lib/math/SafeMath64.sol\\\";\\nimport \\\"../../lib/token/ERC20.sol\\\";\\n\\n\\ncontract DisputableAragonApp is IDisputable, AragonApp {\\n    /* Validation errors */\\n    string internal constant ERROR_SENDER_NOT_AGREEMENT = \\\"DISPUTABLE_SENDER_NOT_AGREEMENT\\\";\\n    string internal constant ERROR_AGREEMENT_STATE_INVALID = \\\"DISPUTABLE_AGREEMENT_STATE_INVAL\\\";\\n\\n    // This role is used to protect who can challenge actions in derived Disputable apps. However, it is not required\\n    // to be validated in the app itself as the connected Agreement is responsible for performing the check on a challenge.\\n    // bytes32 public constant CHALLENGE_ROLE = keccak256(\\\"CHALLENGE_ROLE\\\");\\n    bytes32 public constant CHALLENGE_ROLE = 0xef025787d7cd1a96d9014b8dc7b44899b8c1350859fb9e1e05f5a546dd65158d;\\n\\n    // bytes32 public constant SET_AGREEMENT_ROLE = keccak256(\\\"SET_AGREEMENT_ROLE\\\");\\n    bytes32 public constant SET_AGREEMENT_ROLE = 0x8dad640ab1b088990c972676ada708447affc660890ec9fc9a5483241c49f036;\\n\\n    // bytes32 internal constant AGREEMENT_POSITION = keccak256(\\\"aragonOS.appStorage.agreement\\\");\\n    bytes32 internal constant AGREEMENT_POSITION = 0x6dbe80ccdeafbf5f3fff5738b224414f85e9370da36f61bf21c65159df7409e9;\\n\\n    modifier onlyAgreement() {\\n        require(address(_getAgreement()) == msg.sender, ERROR_SENDER_NOT_AGREEMENT);\\n        _;\\n    }\\n\\n    /**\\n    * @notice Challenge disputable action #`_disputableActionId`\\n    * @dev This hook must be implemented by Disputable apps. We provide a base implementation to ensure that the `onlyAgreement` modifier\\n    *      is included. Subclasses should implement the internal implementation of the hook.\\n    * @param _disputableActionId Identifier of the action to be challenged\\n    * @param _challengeId Identifier of the challenge in the context of the Agreement\\n    * @param _challenger Address that submitted the challenge\\n    */\\n    function onDisputableActionChallenged(uint256 _disputableActionId, uint256 _challengeId, address _challenger) external onlyAgreement {\\n        _onDisputableActionChallenged(_disputableActionId, _challengeId, _challenger);\\n    }\\n\\n    /**\\n    * @notice Allow disputable action #`_disputableActionId`\\n    * @dev This hook must be implemented by Disputable apps. We provide a base implementation to ensure that the `onlyAgreement` modifier\\n    *      is included. Subclasses should implement the internal implementation of the hook.\\n    * @param _disputableActionId Identifier of the action to be allowed\\n    */\\n    function onDisputableActionAllowed(uint256 _disputableActionId) external onlyAgreement {\\n        _onDisputableActionAllowed(_disputableActionId);\\n    }\\n\\n    /**\\n    * @notice Reject disputable action #`_disputableActionId`\\n    * @dev This hook must be implemented by Disputable apps. We provide a base implementation to ensure that the `onlyAgreement` modifier\\n    *      is included. Subclasses should implement the internal implementation of the hook.\\n    * @param _disputableActionId Identifier of the action to be rejected\\n    */\\n    function onDisputableActionRejected(uint256 _disputableActionId) external onlyAgreement {\\n        _onDisputableActionRejected(_disputableActionId);\\n    }\\n\\n    /**\\n    * @notice Void disputable action #`_disputableActionId`\\n    * @dev This hook must be implemented by Disputable apps. We provide a base implementation to ensure that the `onlyAgreement` modifier\\n    *      is included. Subclasses should implement the internal implementation of the hook.\\n    * @param _disputableActionId Identifier of the action to be voided\\n    */\\n    function onDisputableActionVoided(uint256 _disputableActionId) external onlyAgreement {\\n        _onDisputableActionVoided(_disputableActionId);\\n    }\\n\\n    /**\\n    * @notice Set Agreement to `_agreement`\\n    * @param _agreement Agreement instance to be set\\n    */\\n    function setAgreement(IAgreement _agreement) external auth(SET_AGREEMENT_ROLE) {\\n        IAgreement agreement = _getAgreement();\\n        require(agreement == IAgreement(0) && _agreement != IAgreement(0), ERROR_AGREEMENT_STATE_INVALID);\\n\\n        AGREEMENT_POSITION.setStorageAddress(address(_agreement));\\n        emit AgreementSet(_agreement);\\n    }\\n\\n    /**\\n    * @dev Tell the linked Agreement\\n    * @return Agreement\\n    */\\n    function getAgreement() external view returns (IAgreement) {\\n        return _getAgreement();\\n    }\\n\\n    /**\\n    * @dev Query if a contract implements a certain interface\\n    * @param _interfaceId The interface identifier being queried, as specified in ERC-165\\n    * @return True if the contract implements the requested interface and if its not 0xffffffff, false otherwise\\n    */\\n    function supportsInterface(bytes4 _interfaceId) public pure returns (bool) {\\n        return super.supportsInterface(_interfaceId) || _interfaceId == DISPUTABLE_INTERFACE_ID;\\n    }\\n\\n    /**\\n    * @dev Internal implementation of the `onDisputableActionChallenged` hook\\n    * @param _disputableActionId Identifier of the action to be challenged\\n    * @param _challengeId Identifier of the challenge in the context of the Agreement\\n    * @param _challenger Address that submitted the challenge\\n    */\\n    function _onDisputableActionChallenged(uint256 _disputableActionId, uint256 _challengeId, address _challenger) internal;\\n\\n    /**\\n    * @dev Internal implementation of the `onDisputableActionRejected` hook\\n    * @param _disputableActionId Identifier of the action to be rejected\\n    */\\n    function _onDisputableActionRejected(uint256 _disputableActionId) internal;\\n\\n    /**\\n    * @dev Internal implementation of the `onDisputableActionAllowed` hook\\n    * @param _disputableActionId Identifier of the action to be allowed\\n    */\\n    function _onDisputableActionAllowed(uint256 _disputableActionId) internal;\\n\\n    /**\\n    * @dev Internal implementation of the `onDisputableActionVoided` hook\\n    * @param _disputableActionId Identifier of the action to be voided\\n    */\\n    function _onDisputableActionVoided(uint256 _disputableActionId) internal;\\n\\n    /**\\n    * @dev Register a new disputable action in the Agreement\\n    * @param _disputableActionId Identifier of the action in the context of the Disputable\\n    * @param _context Link to human-readable context for the given action\\n    * @param _submitter Address that submitted the action\\n    * @return Unique identifier for the created action in the context of the Agreement\\n    */\\n    function _registerDisputableAction(uint256 _disputableActionId, bytes _context, address _submitter) internal returns (uint256) {\\n        IAgreement agreement = _ensureAgreement();\\n        return agreement.newAction(_disputableActionId, _context, _submitter);\\n    }\\n\\n    /**\\n    * @dev Close disputable action in the Agreement\\n    * @param _actionId Identifier of the action in the context of the Agreement\\n    */\\n    function _closeDisputableAction(uint256 _actionId) internal {\\n        IAgreement agreement = _ensureAgreement();\\n        agreement.closeAction(_actionId);\\n    }\\n\\n    /**\\n    * @dev Tell the linked Agreement\\n    * @return Agreement\\n    */\\n    function _getAgreement() internal view returns (IAgreement) {\\n        return IAgreement(AGREEMENT_POSITION.getStorageAddress());\\n    }\\n\\n    /**\\n    * @dev Tell the linked Agreement or revert if it has not been set\\n    * @return Agreement\\n    */\\n    function _ensureAgreement() internal view returns (IAgreement) {\\n        IAgreement agreement = _getAgreement();\\n        require(agreement != IAgreement(0), ERROR_AGREEMENT_STATE_INVALID);\\n        return agreement;\\n    }\\n}\\n\",\"keccak256\":\"0x263599fea1510ae4c2b911afd3fb44ef4b0c6e8f75860f1269145482c7400053\"},\"@aragon/os/contracts/apps/disputable/IAgreement.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\nimport \\\"../../lib/token/ERC20.sol\\\";\\n\\n\\ncontract IAgreement {\\n\\n    event ActionSubmitted(uint256 indexed actionId, address indexed disputable);\\n    event ActionClosed(uint256 indexed actionId);\\n    event ActionChallenged(uint256 indexed actionId, uint256 indexed challengeId);\\n    event ActionSettled(uint256 indexed actionId, uint256 indexed challengeId);\\n    event ActionDisputed(uint256 indexed actionId, uint256 indexed challengeId);\\n    event ActionAccepted(uint256 indexed actionId, uint256 indexed challengeId);\\n    event ActionVoided(uint256 indexed actionId, uint256 indexed challengeId);\\n    event ActionRejected(uint256 indexed actionId, uint256 indexed challengeId);\\n\\n    enum ChallengeState {\\n        Waiting,\\n        Settled,\\n        Disputed,\\n        Rejected,\\n        Accepted,\\n        Voided\\n    }\\n\\n    function newAction(uint256 _disputableActionId, bytes _context, address _submitter) external returns (uint256);\\n\\n    function closeAction(uint256 _actionId) external;\\n\\n    function challengeAction(uint256 _actionId, uint256 _settlementOffer, bool _finishedSubmittingEvidence, bytes _context) external;\\n\\n    function settleAction(uint256 _actionId) external;\\n\\n    function disputeAction(uint256 _actionId, bool _finishedSubmittingEvidence) external;\\n}\\n\",\"keccak256\":\"0xe8fa5edb52014934b90ceda4f7d8e191b5c164ebc5506189b56f0e183567f90f\"},\"@aragon/os/contracts/apps/disputable/IDisputable.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\nimport \\\"./IAgreement.sol\\\";\\nimport \\\"../../lib/standards/ERC165.sol\\\";\\nimport \\\"../../lib/token/ERC20.sol\\\";\\n\\n\\ncontract IDisputable is ERC165 {\\n    // Includes setAgreement, onDisputableActionChallenged, onDisputableActionAllowed,\\n    // onDisputableActionRejected, onDisputableActionVoided, getAgreement, canChallenge, and canClose methods:\\n    bytes4 internal constant DISPUTABLE_INTERFACE_ID = bytes4(0xf3d3bb51);\\n\\n    event AgreementSet(IAgreement indexed agreement);\\n\\n    function setAgreement(IAgreement _agreement) external;\\n\\n    function onDisputableActionChallenged(uint256 _disputableActionId, uint256 _challengeId, address _challenger) external;\\n\\n    function onDisputableActionAllowed(uint256 _disputableActionId) external;\\n\\n    function onDisputableActionRejected(uint256 _disputableActionId) external;\\n\\n    function onDisputableActionVoided(uint256 _disputableActionId) external;\\n\\n    function getAgreement() external view returns (IAgreement);\\n\\n    function canChallenge(uint256 _disputableActionId) external view returns (bool);\\n\\n    function canClose(uint256 _disputableActionId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xce0da286f2b52dc33c9846b101ff075ac9461881aaf1753058151d51b1d55436\"},\"@aragon/os/contracts/common/Autopetrified.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\nimport \\\"./Petrifiable.sol\\\";\\n\\n\\ncontract Autopetrified is Petrifiable {\\n    constructor() public {\\n        // Immediately petrify base (non-proxy) instances of inherited contracts on deploy.\\n        // This renders them uninitializable (and unusable without a proxy).\\n        petrify();\\n    }\\n}\\n\",\"keccak256\":\"0x42f0422744e13674e38bfbef079af7150883aba96ddbe61c5ae50df31d42696e\"},\"@aragon/os/contracts/common/ConversionHelpers.sol\":{\"content\":\"pragma solidity ^0.4.24;\\n\\n\\nlibrary ConversionHelpers {\\n    string private constant ERROR_IMPROPER_LENGTH = \\\"CONVERSION_IMPROPER_LENGTH\\\";\\n\\n    function dangerouslyCastUintArrayToBytes(uint256[] memory _input) internal pure returns (bytes memory output) {\\n        // Force cast the uint256[] into a bytes array, by overwriting its length\\n        // Note that the bytes array doesn't need to be initialized as we immediately overwrite it\\n        // with the input and a new length. The input becomes invalid from this point forward.\\n        uint256 byteLength = _input.length * 32;\\n        assembly {\\n            output := _input\\n            mstore(output, byteLength)\\n        }\\n    }\\n\\n    function dangerouslyCastBytesToUintArray(bytes memory _input) internal pure returns (uint256[] memory output) {\\n        // Force cast the bytes array into a uint256[], by overwriting its length\\n        // Note that the uint256[] doesn't need to be initialized as we immediately overwrite it\\n        // with the input and a new length. The input becomes invalid from this point forward.\\n        uint256 intsLength = _input.length / 32;\\n        require(_input.length == intsLength * 32, ERROR_IMPROPER_LENGTH);\\n\\n        assembly {\\n            output := _input\\n            mstore(output, intsLength)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9872383d458352f5c68fa5afd1fc84ab6b172cbee33359cfa57655b8eda92416\"},\"@aragon/os/contracts/common/EtherTokenConstant.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\n\\n// aragonOS and aragon-apps rely on address(0) to denote native ETH, in\\n// contracts where both tokens and ETH are accepted\\ncontract EtherTokenConstant {\\n    address internal constant ETH = address(0);\\n}\\n\",\"keccak256\":\"0x6b2fa091968161075154a77fa741a3484c891d73cd3cd14ede502ff56dd08dfc\"},\"@aragon/os/contracts/common/IVaultRecoverable.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\n\\ninterface IVaultRecoverable {\\n    event RecoverToVault(address indexed vault, address indexed token, uint256 amount);\\n\\n    function transferToVault(address token) external;\\n\\n    function allowRecoverability(address token) external view returns (bool);\\n    function getRecoveryVault() external view returns (address);\\n}\\n\",\"keccak256\":\"0xa8e004decf086e817a864b485473b687c2c468c82af7b5011d9908586f7cbf36\"},\"@aragon/os/contracts/common/Initializable.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\nimport \\\"./TimeHelpers.sol\\\";\\nimport \\\"./UnstructuredStorage.sol\\\";\\n\\n\\ncontract Initializable is TimeHelpers {\\n    using UnstructuredStorage for bytes32;\\n\\n    // keccak256(\\\"aragonOS.initializable.initializationBlock\\\")\\n    bytes32 internal constant INITIALIZATION_BLOCK_POSITION = 0xebb05b386a8d34882b8711d156f463690983dc47815980fb82aeeff1aa43579e;\\n\\n    string private constant ERROR_ALREADY_INITIALIZED = \\\"INIT_ALREADY_INITIALIZED\\\";\\n    string private constant ERROR_NOT_INITIALIZED = \\\"INIT_NOT_INITIALIZED\\\";\\n\\n    modifier onlyInit {\\n        require(getInitializationBlock() == 0, ERROR_ALREADY_INITIALIZED);\\n        _;\\n    }\\n\\n    modifier isInitialized {\\n        require(hasInitialized(), ERROR_NOT_INITIALIZED);\\n        _;\\n    }\\n\\n    /**\\n    * @return Block number in which the contract was initialized\\n    */\\n    function getInitializationBlock() public view returns (uint256) {\\n        return INITIALIZATION_BLOCK_POSITION.getStorageUint256();\\n    }\\n\\n    /**\\n    * @return Whether the contract has been initialized by the time of the current block\\n    */\\n    function hasInitialized() public view returns (bool) {\\n        uint256 initializationBlock = getInitializationBlock();\\n        return initializationBlock != 0 && getBlockNumber() >= initializationBlock;\\n    }\\n\\n    /**\\n    * @dev Function to be called by top level contract after initialization has finished.\\n    */\\n    function initialized() internal onlyInit {\\n        INITIALIZATION_BLOCK_POSITION.setStorageUint256(getBlockNumber());\\n    }\\n\\n    /**\\n    * @dev Function to be called by top level contract after initialization to enable the contract\\n    *      at a future block number rather than immediately.\\n    */\\n    function initializedAt(uint256 _blockNumber) internal onlyInit {\\n        INITIALIZATION_BLOCK_POSITION.setStorageUint256(_blockNumber);\\n    }\\n}\\n\",\"keccak256\":\"0xc859366d3143499d1458ea55cb5374ae1ca1faf41763cad5e051dea2da373ba1\"},\"@aragon/os/contracts/common/IsContract.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\n\\ncontract IsContract {\\n    /*\\n    * NOTE: this should NEVER be used for authentication\\n    * (see pitfalls: https://github.com/fergarrui/ethereum-security/tree/master/contracts/extcodesize).\\n    *\\n    * This is only intended to be used as a sanity check that an address is actually a contract,\\n    * RATHER THAN an address not being a contract.\\n    */\\n    function isContract(address _target) internal view returns (bool) {\\n        if (_target == address(0)) {\\n            return false;\\n        }\\n\\n        uint256 size;\\n        assembly { size := extcodesize(_target) }\\n        return size > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x9dd99d770a5eed901ba749e1f02e4fae443e71e899f4909f56825dfc378da089\"},\"@aragon/os/contracts/common/Petrifiable.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\nimport \\\"./Initializable.sol\\\";\\n\\n\\ncontract Petrifiable is Initializable {\\n    // Use block UINT256_MAX (which should be never) as the initializable date\\n    uint256 internal constant PETRIFIED_BLOCK = uint256(-1);\\n\\n    function isPetrified() public view returns (bool) {\\n        return getInitializationBlock() == PETRIFIED_BLOCK;\\n    }\\n\\n    /**\\n    * @dev Function to be called by top level contract to prevent being initialized.\\n    *      Useful for freezing base contracts when they're used behind proxies.\\n    */\\n    function petrify() internal onlyInit {\\n        initializedAt(PETRIFIED_BLOCK);\\n    }\\n}\\n\",\"keccak256\":\"0x797d3a58b782032f6afc51725326c0b51dceb00f3af6b85b25bd91cc10d22504\"},\"@aragon/os/contracts/common/ReentrancyGuard.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\nimport \\\"../common/UnstructuredStorage.sol\\\";\\n\\n\\ncontract ReentrancyGuard {\\n    using UnstructuredStorage for bytes32;\\n\\n    /* Hardcoded constants to save gas\\n    bytes32 internal constant REENTRANCY_MUTEX_POSITION = keccak256(\\\"aragonOS.reentrancyGuard.mutex\\\");\\n    */\\n    bytes32 private constant REENTRANCY_MUTEX_POSITION = 0xe855346402235fdd185c890e68d2c4ecad599b88587635ee285bce2fda58dacb;\\n\\n    string private constant ERROR_REENTRANT = \\\"REENTRANCY_REENTRANT_CALL\\\";\\n\\n    modifier nonReentrant() {\\n        // Ensure mutex is unlocked\\n        require(!REENTRANCY_MUTEX_POSITION.getStorageBool(), ERROR_REENTRANT);\\n\\n        // Lock mutex before function call\\n        REENTRANCY_MUTEX_POSITION.setStorageBool(true);\\n\\n        // Perform function call\\n        _;\\n\\n        // Unlock mutex after function call\\n        REENTRANCY_MUTEX_POSITION.setStorageBool(false);\\n    }\\n}\\n\",\"keccak256\":\"0xd89653c118bbd8cace423c45daa37986c566672198a415254011c028d1831189\"},\"@aragon/os/contracts/common/SafeERC20.sol\":{\"content\":\"// Inspired by AdEx (https://github.com/AdExNetwork/adex-protocol-eth/blob/b9df617829661a7518ee10f4cb6c4108659dd6d5/contracts/libs/SafeERC20.sol)\\n// and 0x (https://github.com/0xProject/0x-monorepo/blob/737d1dc54d72872e24abce5a1dbe1b66d35fa21a/contracts/protocol/contracts/protocol/AssetProxy/ERC20Proxy.sol#L143)\\n\\npragma solidity ^0.4.24;\\n\\nimport \\\"../lib/token/ERC20.sol\\\";\\n\\n\\nlibrary SafeERC20 {\\n    // Before 0.5, solidity has a mismatch between `address.transfer()` and `token.transfer()`:\\n    // https://github.com/ethereum/solidity/issues/3544\\n    bytes4 private constant TRANSFER_SELECTOR = 0xa9059cbb;\\n\\n    string private constant ERROR_TOKEN_BALANCE_REVERTED = \\\"SAFE_ERC_20_BALANCE_REVERTED\\\";\\n    string private constant ERROR_TOKEN_ALLOWANCE_REVERTED = \\\"SAFE_ERC_20_ALLOWANCE_REVERTED\\\";\\n\\n    function invokeAndCheckSuccess(address _addr, bytes memory _calldata)\\n        private\\n        returns (bool)\\n    {\\n        bool ret;\\n        assembly {\\n            let ptr := mload(0x40)    // free memory pointer\\n\\n            let success := call(\\n                gas,                  // forward all gas\\n                _addr,                // address\\n                0,                    // no value\\n                add(_calldata, 0x20), // calldata start\\n                mload(_calldata),     // calldata length\\n                ptr,                  // write output over free memory\\n                0x20                  // uint256 return\\n            )\\n\\n            if gt(success, 0) {\\n                // Check number of bytes returned from last function call\\n                switch returndatasize\\n\\n                // No bytes returned: assume success\\n                case 0 {\\n                    ret := 1\\n                }\\n\\n                // 32 bytes returned: check if non-zero\\n                case 0x20 {\\n                    // Only return success if returned data was true\\n                    // Already have output in ptr\\n                    ret := eq(mload(ptr), 1)\\n                }\\n\\n                // Not sure what was returned: don't mark as success\\n                default { }\\n            }\\n        }\\n        return ret;\\n    }\\n\\n    function staticInvoke(address _addr, bytes memory _calldata)\\n        private\\n        view\\n        returns (bool, uint256)\\n    {\\n        bool success;\\n        uint256 ret;\\n        assembly {\\n            let ptr := mload(0x40)    // free memory pointer\\n\\n            success := staticcall(\\n                gas,                  // forward all gas\\n                _addr,                // address\\n                add(_calldata, 0x20), // calldata start\\n                mload(_calldata),     // calldata length\\n                ptr,                  // write output over free memory\\n                0x20                  // uint256 return\\n            )\\n\\n            if gt(success, 0) {\\n                ret := mload(ptr)\\n            }\\n        }\\n        return (success, ret);\\n    }\\n\\n    /**\\n    * @dev Same as a standards-compliant ERC20.transfer() that never reverts (returns false).\\n    *      Note that this makes an external call to the token.\\n    */\\n    function safeTransfer(ERC20 _token, address _to, uint256 _amount) internal returns (bool) {\\n        bytes memory transferCallData = abi.encodeWithSelector(\\n            TRANSFER_SELECTOR,\\n            _to,\\n            _amount\\n        );\\n        return invokeAndCheckSuccess(_token, transferCallData);\\n    }\\n\\n    /**\\n    * @dev Same as a standards-compliant ERC20.transferFrom() that never reverts (returns false).\\n    *      Note that this makes an external call to the token.\\n    */\\n    function safeTransferFrom(ERC20 _token, address _from, address _to, uint256 _amount) internal returns (bool) {\\n        bytes memory transferFromCallData = abi.encodeWithSelector(\\n            _token.transferFrom.selector,\\n            _from,\\n            _to,\\n            _amount\\n        );\\n        return invokeAndCheckSuccess(_token, transferFromCallData);\\n    }\\n\\n    /**\\n    * @dev Same as a standards-compliant ERC20.approve() that never reverts (returns false).\\n    *      Note that this makes an external call to the token.\\n    */\\n    function safeApprove(ERC20 _token, address _spender, uint256 _amount) internal returns (bool) {\\n        bytes memory approveCallData = abi.encodeWithSelector(\\n            _token.approve.selector,\\n            _spender,\\n            _amount\\n        );\\n        return invokeAndCheckSuccess(_token, approveCallData);\\n    }\\n\\n    /**\\n    * @dev Static call into ERC20.balanceOf().\\n    * Reverts if the call fails for some reason (should never fail).\\n    */\\n    function staticBalanceOf(ERC20 _token, address _owner) internal view returns (uint256) {\\n        bytes memory balanceOfCallData = abi.encodeWithSelector(\\n            _token.balanceOf.selector,\\n            _owner\\n        );\\n\\n        (bool success, uint256 tokenBalance) = staticInvoke(_token, balanceOfCallData);\\n        require(success, ERROR_TOKEN_BALANCE_REVERTED);\\n\\n        return tokenBalance;\\n    }\\n\\n    /**\\n    * @dev Static call into ERC20.allowance().\\n    * Reverts if the call fails for some reason (should never fail).\\n    */\\n    function staticAllowance(ERC20 _token, address _owner, address _spender) internal view returns (uint256) {\\n        bytes memory allowanceCallData = abi.encodeWithSelector(\\n            _token.allowance.selector,\\n            _owner,\\n            _spender\\n        );\\n\\n        (bool success, uint256 allowance) = staticInvoke(_token, allowanceCallData);\\n        require(success, ERROR_TOKEN_ALLOWANCE_REVERTED);\\n\\n        return allowance;\\n    }\\n\\n    /**\\n    * @dev Static call into ERC20.totalSupply().\\n    * Reverts if the call fails for some reason (should never fail).\\n    */\\n    function staticTotalSupply(ERC20 _token) internal view returns (uint256) {\\n        bytes memory totalSupplyCallData = abi.encodeWithSelector(_token.totalSupply.selector);\\n\\n        (bool success, uint256 totalSupply) = staticInvoke(_token, totalSupplyCallData);\\n        require(success, ERROR_TOKEN_ALLOWANCE_REVERTED);\\n\\n        return totalSupply;\\n    }\\n}\\n\",\"keccak256\":\"0xd251a1207e1faa4c41500bf927310bb739b1fbc0bf880f236f8e0a9236d6a03a\"},\"@aragon/os/contracts/common/TimeHelpers.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\nimport \\\"./Uint256Helpers.sol\\\";\\n\\n\\ncontract TimeHelpers {\\n    using Uint256Helpers for uint256;\\n\\n    /**\\n    * @dev Returns the current block number.\\n    *      Using a function rather than `block.number` allows us to easily mock the block number in\\n    *      tests.\\n    */\\n    function getBlockNumber() internal view returns (uint256) {\\n        return block.number;\\n    }\\n\\n    /**\\n    * @dev Returns the current block number, converted to uint64.\\n    *      Using a function rather than `block.number` allows us to easily mock the block number in\\n    *      tests.\\n    */\\n    function getBlockNumber64() internal view returns (uint64) {\\n        return getBlockNumber().toUint64();\\n    }\\n\\n    /**\\n    * @dev Returns the current timestamp.\\n    *      Using a function rather than `block.timestamp` allows us to easily mock it in\\n    *      tests.\\n    */\\n    function getTimestamp() internal view returns (uint256) {\\n        return block.timestamp; // solium-disable-line security/no-block-members\\n    }\\n\\n    /**\\n    * @dev Returns the current timestamp, converted to uint64.\\n    *      Using a function rather than `block.timestamp` allows us to easily mock it in\\n    *      tests.\\n    */\\n    function getTimestamp64() internal view returns (uint64) {\\n        return getTimestamp().toUint64();\\n    }\\n}\\n\",\"keccak256\":\"0xfaba85207f0bb4bb5d7b6685a963c39a3258641bda6e523175640c3f9aeb2045\"},\"@aragon/os/contracts/common/Uint256Helpers.sol\":{\"content\":\"pragma solidity ^0.4.24;\\n\\n\\nlibrary Uint256Helpers {\\n    uint256 private constant MAX_UINT64 = uint64(-1);\\n\\n    string private constant ERROR_NUMBER_TOO_BIG = \\\"UINT64_NUMBER_TOO_BIG\\\";\\n\\n    function toUint64(uint256 a) internal pure returns (uint64) {\\n        require(a <= MAX_UINT64, ERROR_NUMBER_TOO_BIG);\\n        return uint64(a);\\n    }\\n}\\n\",\"keccak256\":\"0x83033025a3f4402be3b7bcc9a23ce96ae4fadc7f251da8f139d73a13a3400b0c\"},\"@aragon/os/contracts/common/UnstructuredStorage.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\n\\nlibrary UnstructuredStorage {\\n    function getStorageBool(bytes32 position) internal view returns (bool data) {\\n        assembly { data := sload(position) }\\n    }\\n\\n    function getStorageAddress(bytes32 position) internal view returns (address data) {\\n        assembly { data := sload(position) }\\n    }\\n\\n    function getStorageBytes32(bytes32 position) internal view returns (bytes32 data) {\\n        assembly { data := sload(position) }\\n    }\\n\\n    function getStorageUint256(bytes32 position) internal view returns (uint256 data) {\\n        assembly { data := sload(position) }\\n    }\\n\\n    function setStorageBool(bytes32 position, bool data) internal {\\n        assembly { sstore(position, data) }\\n    }\\n\\n    function setStorageAddress(bytes32 position, address data) internal {\\n        assembly { sstore(position, data) }\\n    }\\n\\n    function setStorageBytes32(bytes32 position, bytes32 data) internal {\\n        assembly { sstore(position, data) }\\n    }\\n\\n    function setStorageUint256(bytes32 position, uint256 data) internal {\\n        assembly { sstore(position, data) }\\n    }\\n}\\n\",\"keccak256\":\"0xe497dcb85bbbf10224623247f39a4aeed7d3b230de2a811f3b69cb0e7d0a64d4\"},\"@aragon/os/contracts/common/VaultRecoverable.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\nimport \\\"../lib/token/ERC20.sol\\\";\\nimport \\\"./EtherTokenConstant.sol\\\";\\nimport \\\"./IsContract.sol\\\";\\nimport \\\"./IVaultRecoverable.sol\\\";\\nimport \\\"./SafeERC20.sol\\\";\\n\\n\\ncontract VaultRecoverable is IVaultRecoverable, EtherTokenConstant, IsContract {\\n    using SafeERC20 for ERC20;\\n\\n    string private constant ERROR_DISALLOWED = \\\"RECOVER_DISALLOWED\\\";\\n    string private constant ERROR_VAULT_NOT_CONTRACT = \\\"RECOVER_VAULT_NOT_CONTRACT\\\";\\n    string private constant ERROR_TOKEN_TRANSFER_FAILED = \\\"RECOVER_TOKEN_TRANSFER_FAILED\\\";\\n\\n    /**\\n     * @notice Send funds to recovery Vault. This contract should never receive funds,\\n     *         but in case it does, this function allows one to recover them.\\n     * @param _token Token balance to be sent to recovery vault.\\n     */\\n    function transferToVault(address _token) external {\\n        require(allowRecoverability(_token), ERROR_DISALLOWED);\\n        address vault = getRecoveryVault();\\n        require(isContract(vault), ERROR_VAULT_NOT_CONTRACT);\\n\\n        uint256 balance;\\n        if (_token == ETH) {\\n            balance = address(this).balance;\\n            vault.transfer(balance);\\n        } else {\\n            ERC20 token = ERC20(_token);\\n            balance = token.staticBalanceOf(this);\\n            require(token.safeTransfer(vault, balance), ERROR_TOKEN_TRANSFER_FAILED);\\n        }\\n\\n        emit RecoverToVault(vault, _token, balance);\\n    }\\n\\n    /**\\n    * @dev By default deriving from AragonApp makes it recoverable\\n    * @param token Token address that would be recovered\\n    * @return bool whether the app allows the recovery\\n    */\\n    function allowRecoverability(address token) public view returns (bool) {\\n        return true;\\n    }\\n\\n    // Cast non-implemented interface to be public so we can use it internally\\n    function getRecoveryVault() public view returns (address);\\n}\\n\",\"keccak256\":\"0xea4ded621a63f988b83ac27b4a23cad0a42c3d77bcf6ca7b88681ae4ea650cf4\"},\"@aragon/os/contracts/evmscript/EVMScriptRunner.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\nimport \\\"./IEVMScriptExecutor.sol\\\";\\nimport \\\"./IEVMScriptRegistry.sol\\\";\\n\\nimport \\\"../apps/AppStorage.sol\\\";\\nimport \\\"../kernel/KernelConstants.sol\\\";\\nimport \\\"../common/Initializable.sol\\\";\\n\\n\\ncontract EVMScriptRunner is AppStorage, Initializable, EVMScriptRegistryConstants, KernelNamespaceConstants {\\n    string private constant ERROR_EXECUTOR_UNAVAILABLE = \\\"EVMRUN_EXECUTOR_UNAVAILABLE\\\";\\n    string private constant ERROR_PROTECTED_STATE_MODIFIED = \\\"EVMRUN_PROTECTED_STATE_MODIFIED\\\";\\n\\n    /* This is manually crafted in assembly\\n    string private constant ERROR_EXECUTOR_INVALID_RETURN = \\\"EVMRUN_EXECUTOR_INVALID_RETURN\\\";\\n    */\\n\\n    event ScriptResult(address indexed executor, bytes script, bytes input, bytes returnData);\\n\\n    function getEVMScriptExecutor(bytes _script) public view returns (IEVMScriptExecutor) {\\n        return IEVMScriptExecutor(getEVMScriptRegistry().getScriptExecutor(_script));\\n    }\\n\\n    function getEVMScriptRegistry() public view returns (IEVMScriptRegistry) {\\n        address registryAddr = kernel().getApp(KERNEL_APP_ADDR_NAMESPACE, EVMSCRIPT_REGISTRY_APP_ID);\\n        return IEVMScriptRegistry(registryAddr);\\n    }\\n\\n    function runScript(bytes _script, bytes _input, address[] _blacklist)\\n        internal\\n        isInitialized\\n        protectState\\n        returns (bytes)\\n    {\\n        IEVMScriptExecutor executor = getEVMScriptExecutor(_script);\\n        require(address(executor) != address(0), ERROR_EXECUTOR_UNAVAILABLE);\\n\\n        bytes4 sig = executor.execScript.selector;\\n        bytes memory data = abi.encodeWithSelector(sig, _script, _input, _blacklist);\\n\\n        bytes memory output;\\n        assembly {\\n            let success := delegatecall(\\n                gas,                // forward all gas\\n                executor,           // address\\n                add(data, 0x20),    // calldata start\\n                mload(data),        // calldata length\\n                0,                  // don't write output (we'll handle this ourselves)\\n                0                   // don't write output\\n            )\\n\\n            output := mload(0x40) // free mem ptr get\\n\\n            switch success\\n            case 0 {\\n                // If the call errored, forward its full error data\\n                returndatacopy(output, 0, returndatasize)\\n                revert(output, returndatasize)\\n            }\\n            default {\\n                switch gt(returndatasize, 0x3f)\\n                case 0 {\\n                    // Need at least 0x40 bytes returned for properly ABI-encoded bytes values,\\n                    // revert with \\\"EVMRUN_EXECUTOR_INVALID_RETURN\\\"\\n                    // See remix: doing a `revert(\\\"EVMRUN_EXECUTOR_INVALID_RETURN\\\")` always results in\\n                    // this memory layout\\n                    mstore(output, 0x08c379a000000000000000000000000000000000000000000000000000000000)         // error identifier\\n                    mstore(add(output, 0x04), 0x0000000000000000000000000000000000000000000000000000000000000020) // starting offset\\n                    mstore(add(output, 0x24), 0x000000000000000000000000000000000000000000000000000000000000001e) // reason length\\n                    mstore(add(output, 0x44), 0x45564d52554e5f4558454355544f525f494e56414c49445f52455455524e0000) // reason\\n\\n                    revert(output, 100) // 100 = 4 + 3 * 32 (error identifier + 3 words for the ABI encoded error)\\n                }\\n                default {\\n                    // Copy result\\n                    //\\n                    // Needs to perform an ABI decode for the expected `bytes` return type of\\n                    // `executor.execScript()` as solidity will automatically ABI encode the returned bytes as:\\n                    //    [ position of the first dynamic length return value = 0x20 (32 bytes) ]\\n                    //    [ output length (32 bytes) ]\\n                    //    [ output content (N bytes) ]\\n                    //\\n                    // Perform the ABI decode by ignoring the first 32 bytes of the return data\\n                    let copysize := sub(returndatasize, 0x20)\\n                    returndatacopy(output, 0x20, copysize)\\n\\n                    mstore(0x40, add(output, copysize)) // free mem ptr set\\n                }\\n            }\\n        }\\n\\n        emit ScriptResult(address(executor), _script, _input, output);\\n\\n        return output;\\n    }\\n\\n    modifier protectState {\\n        address preKernel = address(kernel());\\n        bytes32 preAppId = appId();\\n        _; // exec\\n        require(address(kernel()) == preKernel, ERROR_PROTECTED_STATE_MODIFIED);\\n        require(appId() == preAppId, ERROR_PROTECTED_STATE_MODIFIED);\\n    }\\n}\\n\",\"keccak256\":\"0xf8b4ccf7ee558224c155604a4a0b5cc35715367cda5010fb38e21d63ec5236c9\"},\"@aragon/os/contracts/evmscript/IEVMScriptExecutor.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\n\\ninterface IEVMScriptExecutor {\\n    function execScript(bytes script, bytes input, address[] blacklist) external returns (bytes);\\n    function executorType() external pure returns (bytes32);\\n}\\n\",\"keccak256\":\"0x76ad18a278e36e14147f5b58a1157de67ce95f28813f3e1eacfedaaf53dd33b9\"},\"@aragon/os/contracts/evmscript/IEVMScriptRegistry.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\nimport \\\"./IEVMScriptExecutor.sol\\\";\\n\\n\\ncontract EVMScriptRegistryConstants {\\n    /* Hardcoded constants to save gas\\n    bytes32 internal constant EVMSCRIPT_REGISTRY_APP_ID = apmNamehash(\\\"evmreg\\\");\\n    */\\n    bytes32 internal constant EVMSCRIPT_REGISTRY_APP_ID = 0xddbcfd564f642ab5627cf68b9b7d374fb4f8a36e941a75d89c87998cef03bd61;\\n}\\n\\n\\ninterface IEVMScriptRegistry {\\n    function addScriptExecutor(IEVMScriptExecutor executor) external returns (uint id);\\n    function disableScriptExecutor(uint256 executorId) external;\\n\\n    // TODO: this should be external\\n    // See https://github.com/ethereum/solidity/issues/4832\\n    function getScriptExecutor(bytes script) public view returns (IEVMScriptExecutor);\\n}\\n\",\"keccak256\":\"0x66b255ac1537765d6e79cc0ed02df004e7bf214863773901e207baafd59dc2ce\"},\"@aragon/os/contracts/forwarding/IAbstractForwarder.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\n\\n/**\\n* @title Abstract forwarder interface\\n* @dev This is the base interface for all forwarders.\\n*      Forwarding allows separately installed applications (smart contracts implementing the forwarding interface) to execute multi-step actions via EVM scripts.\\n*      You should only support the forwarding interface if your \\\"action step\\\" is asynchronous (e.g. requiring a delay period or a voting period).\\n*      Note: you should **NOT** directly inherit from this interface; see one of the other, non-abstract interfaces available.\\n*/\\ncontract IAbstractForwarder {\\n    enum ForwarderType {\\n        NOT_IMPLEMENTED,\\n        NO_CONTEXT,\\n        WITH_CONTEXT\\n    }\\n\\n    /**\\n    * @dev Tell whether the proposed forwarding path (an EVM script) from the given sender is allowed.\\n    *      However, this is not a strict guarantee of safety: the implemented `forward()` method is\\n    *      still allowed to revert even if `canForward()` returns true for the same parameters.\\n    * @return True if the sender's proposed path is allowed\\n    */\\n    function canForward(address sender, bytes evmScript) external view returns (bool);\\n\\n    /**\\n    * @dev Tell the forwarder type\\n    * @return Forwarder type\\n    */\\n    function forwarderType() external pure returns (ForwarderType);\\n\\n    /**\\n    * @dev Report whether the implementing app is a forwarder\\n    *      Required for backwards compatibility with aragonOS 4\\n    * @return Always true\\n    */\\n    function isForwarder() external pure returns (bool) {\\n        return true;\\n    }\\n}\\n\",\"keccak256\":\"0x76ef48aa741c5deff4ed3454351e2c186df3453f73c44b84ce938e9dc1234d4a\"},\"@aragon/os/contracts/forwarding/IForwarderWithContext.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\nimport \\\"./IAbstractForwarder.sol\\\";\\n\\n\\n/**\\n* @title Forwarder interface requiring context information\\n* @dev This forwarder interface allows for additional context to be attached to the action by the sender.\\n*/\\ncontract IForwarderWithContext is IAbstractForwarder {\\n    /**\\n    * @dev Forward an EVM script with an attached context\\n    */\\n    function forward(bytes evmScript, bytes context) external;\\n\\n    /**\\n    * @dev Tell the forwarder type\\n    * @return Always 2 (ForwarderType.WITH_CONTEXT)\\n    */\\n    function forwarderType() external pure returns (ForwarderType) {\\n        return ForwarderType.WITH_CONTEXT;\\n    }\\n}\\n\",\"keccak256\":\"0x494c946cadb9a307be22736a0e32cf829dc4b429a338c50f9b872d26c1b72770\"},\"@aragon/os/contracts/kernel/IKernel.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\nimport \\\"../acl/IACL.sol\\\";\\nimport \\\"../common/IVaultRecoverable.sol\\\";\\n\\n\\ninterface IKernelEvents {\\n    event SetApp(bytes32 indexed namespace, bytes32 indexed appId, address app);\\n}\\n\\n\\n// This should be an interface, but interfaces can't inherit yet :(\\ncontract IKernel is IKernelEvents, IVaultRecoverable {\\n    function acl() public view returns (IACL);\\n    function hasPermission(address who, address where, bytes32 what, bytes how) public view returns (bool);\\n\\n    function setApp(bytes32 namespace, bytes32 appId, address app) public;\\n    function getApp(bytes32 namespace, bytes32 appId) public view returns (address);\\n}\\n\",\"keccak256\":\"0x96e9fd607b156a96905ec0108bb4fbcc5ad85212bb98e03600069bb5727d2daa\"},\"@aragon/os/contracts/kernel/KernelConstants.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\n\\ncontract KernelAppIds {\\n    /* Hardcoded constants to save gas\\n    bytes32 internal constant KERNEL_CORE_APP_ID = apmNamehash(\\\"kernel\\\");\\n    bytes32 internal constant KERNEL_DEFAULT_ACL_APP_ID = apmNamehash(\\\"acl\\\");\\n    bytes32 internal constant KERNEL_DEFAULT_VAULT_APP_ID = apmNamehash(\\\"vault\\\");\\n    */\\n    bytes32 internal constant KERNEL_CORE_APP_ID = 0x3b4bf6bf3ad5000ecf0f989d5befde585c6860fea3e574a4fab4c49d1c177d9c;\\n    bytes32 internal constant KERNEL_DEFAULT_ACL_APP_ID = 0xe3262375f45a6e2026b7e7b18c2b807434f2508fe1a2a3dfb493c7df8f4aad6a;\\n    bytes32 internal constant KERNEL_DEFAULT_VAULT_APP_ID = 0x7e852e0fcfce6551c13800f1e7476f982525c2b5277ba14b24339c68416336d1;\\n}\\n\\n\\ncontract KernelNamespaceConstants {\\n    /* Hardcoded constants to save gas\\n    bytes32 internal constant KERNEL_CORE_NAMESPACE = keccak256(\\\"core\\\");\\n    bytes32 internal constant KERNEL_APP_BASES_NAMESPACE = keccak256(\\\"base\\\");\\n    bytes32 internal constant KERNEL_APP_ADDR_NAMESPACE = keccak256(\\\"app\\\");\\n    */\\n    bytes32 internal constant KERNEL_CORE_NAMESPACE = 0xc681a85306374a5ab27f0bbc385296a54bcd314a1948b6cf61c4ea1bc44bb9f8;\\n    bytes32 internal constant KERNEL_APP_BASES_NAMESPACE = 0xf1f3eb40f5bc1ad1344716ced8b8a0431d840b5783aea1fd01786bc26f35ac0f;\\n    bytes32 internal constant KERNEL_APP_ADDR_NAMESPACE = 0xd6f028ca0e8edb4a8c9757ca4fdccab25fa1e0317da1188108f7d2dee14902fb;\\n}\\n\",\"keccak256\":\"0x817f66cfc7bfafd19a4e6b1344850c5f7b72e39a1073fe862efebe608a07c0d3\"},\"@aragon/os/contracts/lib/math/SafeMath.sol\":{\"content\":\"// See https://github.com/OpenZeppelin/openzeppelin-solidity/blob/d51e38758e1d985661534534d5c61e27bece5042/contracts/math/SafeMath.sol\\n// Adapted to use pragma ^0.4.24 and satisfy our linter rules\\n\\npragma solidity ^0.4.24;\\n\\n\\n/**\\n * @title SafeMath\\n * @dev Math operations with safety checks that revert on error\\n */\\nlibrary SafeMath {\\n    string private constant ERROR_ADD_OVERFLOW = \\\"MATH_ADD_OVERFLOW\\\";\\n    string private constant ERROR_SUB_UNDERFLOW = \\\"MATH_SUB_UNDERFLOW\\\";\\n    string private constant ERROR_MUL_OVERFLOW = \\\"MATH_MUL_OVERFLOW\\\";\\n    string private constant ERROR_DIV_ZERO = \\\"MATH_DIV_ZERO\\\";\\n\\n    /**\\n    * @dev Multiplies two numbers, reverts on overflow.\\n    */\\n    function mul(uint256 _a, uint256 _b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\\n        if (_a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = _a * _b;\\n        require(c / _a == _b, ERROR_MUL_OVERFLOW);\\n\\n        return c;\\n    }\\n\\n    /**\\n    * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\\n    */\\n    function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\\n        require(_b > 0, ERROR_DIV_ZERO); // Solidity only automatically asserts when dividing by 0\\n        uint256 c = _a / _b;\\n        // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n    * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\\n    */\\n    function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\\n        require(_b <= _a, ERROR_SUB_UNDERFLOW);\\n        uint256 c = _a - _b;\\n\\n        return c;\\n    }\\n\\n    /**\\n    * @dev Adds two numbers, reverts on overflow.\\n    */\\n    function add(uint256 _a, uint256 _b) internal pure returns (uint256) {\\n        uint256 c = _a + _b;\\n        require(c >= _a, ERROR_ADD_OVERFLOW);\\n\\n        return c;\\n    }\\n\\n    /**\\n    * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\\n    * reverts when dividing by zero.\\n    */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b != 0, ERROR_DIV_ZERO);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x2e11c8dcead82c452ef452f4dbced40e20ae105fa4145d920dac6e077b31d846\"},\"@aragon/os/contracts/lib/math/SafeMath64.sol\":{\"content\":\"// See https://github.com/OpenZeppelin/openzeppelin-solidity/blob/d51e38758e1d985661534534d5c61e27bece5042/contracts/math/SafeMath.sol\\n// Adapted for uint64, pragma ^0.4.24, and satisfying our linter rules\\n// Also optimized the mul() implementation, see https://github.com/aragon/aragonOS/pull/417\\n\\npragma solidity ^0.4.24;\\n\\n\\n/**\\n * @title SafeMath64\\n * @dev Math operations for uint64 with safety checks that revert on error\\n */\\nlibrary SafeMath64 {\\n    string private constant ERROR_ADD_OVERFLOW = \\\"MATH64_ADD_OVERFLOW\\\";\\n    string private constant ERROR_SUB_UNDERFLOW = \\\"MATH64_SUB_UNDERFLOW\\\";\\n    string private constant ERROR_MUL_OVERFLOW = \\\"MATH64_MUL_OVERFLOW\\\";\\n    string private constant ERROR_DIV_ZERO = \\\"MATH64_DIV_ZERO\\\";\\n\\n    /**\\n    * @dev Multiplies two numbers, reverts on overflow.\\n    */\\n    function mul(uint64 _a, uint64 _b) internal pure returns (uint64) {\\n        uint256 c = uint256(_a) * uint256(_b);\\n        require(c < 0x010000000000000000, ERROR_MUL_OVERFLOW); // 2**64 (less gas this way)\\n\\n        return uint64(c);\\n    }\\n\\n    /**\\n    * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\\n    */\\n    function div(uint64 _a, uint64 _b) internal pure returns (uint64) {\\n        require(_b > 0, ERROR_DIV_ZERO); // Solidity only automatically asserts when dividing by 0\\n        uint64 c = _a / _b;\\n        // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n    * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\\n    */\\n    function sub(uint64 _a, uint64 _b) internal pure returns (uint64) {\\n        require(_b <= _a, ERROR_SUB_UNDERFLOW);\\n        uint64 c = _a - _b;\\n\\n        return c;\\n    }\\n\\n    /**\\n    * @dev Adds two numbers, reverts on overflow.\\n    */\\n    function add(uint64 _a, uint64 _b) internal pure returns (uint64) {\\n        uint64 c = _a + _b;\\n        require(c >= _a, ERROR_ADD_OVERFLOW);\\n\\n        return c;\\n    }\\n\\n    /**\\n    * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\\n    * reverts when dividing by zero.\\n    */\\n    function mod(uint64 a, uint64 b) internal pure returns (uint64) {\\n        require(b != 0, ERROR_DIV_ZERO);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x34f18573e7b2180645c67faaff60ebc713ab22c697606d3b3ce4fe0e745955f4\"},\"@aragon/os/contracts/lib/standards/ERC165.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\n\\ncontract ERC165 {\\n    // Includes supportsInterface method:\\n    bytes4 internal constant ERC165_INTERFACE_ID = bytes4(0x01ffc9a7);\\n\\n    /**\\n    * @dev Query if a contract implements a certain interface\\n    * @param _interfaceId The interface identifier being queried, as specified in ERC-165\\n    * @return True if the contract implements the requested interface and if its not 0xffffffff, false otherwise\\n    */\\n    function supportsInterface(bytes4 _interfaceId) public pure returns (bool) {\\n        return _interfaceId == ERC165_INTERFACE_ID;\\n    }\\n}\\n\",\"keccak256\":\"0x6f67f6ece954fde87dd5e1696b4b759d18280d3e45ee54233744dee11ce1d4b5\"},\"@aragon/os/contracts/lib/token/ERC20.sol\":{\"content\":\"// See https://github.com/OpenZeppelin/openzeppelin-solidity/blob/a9f910d34f0ab33a1ae5e714f69f9596a02b4d91/contracts/token/ERC20/ERC20.sol\\n\\npragma solidity ^0.4.24;\\n\\n\\n/**\\n * @title ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ncontract ERC20 {\\n    function totalSupply() public view returns (uint256);\\n\\n    function balanceOf(address _who) public view returns (uint256);\\n\\n    function allowance(address _owner, address _spender)\\n        public view returns (uint256);\\n\\n    function transfer(address _to, uint256 _value) public returns (bool);\\n\\n    function approve(address _spender, uint256 _value)\\n        public returns (bool);\\n\\n    function transferFrom(address _from, address _to, uint256 _value)\\n        public returns (bool);\\n\\n    event Transfer(\\n        address indexed from,\\n        address indexed to,\\n        uint256 value\\n    );\\n\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n}\\n\",\"keccak256\":\"0xa2e319fde92f9e70912f09bf6e99bbf8b9b798961d54ffcba59d347d37bde1b7\"},\"contracts/DisputableVoting.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    GPL-3.0-or-later\\n */\\n\\npragma solidity 0.4.24;\\n\\nimport \\\"@aragon/os/contracts/apps/disputable/DisputableAragonApp.sol\\\";\\nimport \\\"@aragon/os/contracts/forwarding/IForwarderWithContext.sol\\\";\\nimport \\\"@aragon/os/contracts/lib/math/SafeMath.sol\\\";\\nimport \\\"@aragon/os/contracts/lib/math/SafeMath64.sol\\\";\\nimport \\\"@aragon/minime/contracts/MiniMeToken.sol\\\";\\n\\n\\ncontract DisputableVoting is IForwarderWithContext, DisputableAragonApp {\\n    using SafeMath for uint256;\\n    using SafeMath64 for uint64;\\n\\n    // bytes32 public constant CREATE_VOTES_ROLE = keccak256(\\\"CREATE_VOTES_ROLE\\\");\\n    bytes32 public constant CREATE_VOTES_ROLE = 0xe7dcd7275292e064d090fbc5f3bd7995be23b502c1fed5cd94cfddbbdcd32bbc;\\n\\n    // bytes32 public constant CHANGE_VOTE_TIME_ROLE = keccak256(\\\"CHANGE_VOTE_TIME_ROLE\\\");\\n    bytes32 public constant CHANGE_VOTE_TIME_ROLE = 0xbc5d8ebc0830a2fed8649987b8263de1397b7fa892f3b87dc2d8cad35c691f86;\\n\\n    // bytes32 public constant CHANGE_SUPPORT_ROLE = keccak256(\\\"CHANGE_SUPPORT_ROLE\\\");\\n    bytes32 public constant CHANGE_SUPPORT_ROLE = 0xf3a5f71f3cb50dae9454dd13cdf0fd1b559f7e20d63c08902592486e6d460c90;\\n\\n    // bytes32 public constant CHANGE_QUORUM_ROLE = keccak256(\\\"CHANGE_QUORUM_ROLE\\\");\\n    bytes32 public constant CHANGE_QUORUM_ROLE = 0xa3f675280fb3c54662067f92659ca1ee3ef7c1a7f2a6ff03a5c4228aa26b6a82;\\n\\n    // bytes32 public constant CHANGE_DELEGATED_VOTING_PERIOD_ROLE = keccak256(\\\"CHANGE_DELEGATED_VOTING_PERIOD_ROLE\\\");\\n    bytes32 public constant CHANGE_DELEGATED_VOTING_PERIOD_ROLE = 0x59ba415d96e104e6483d76b79d9cd09941d04e229adcd62d7dc672c93975a19d;\\n\\n    // bytes32 public constant CHANGE_EXECUTION_DELAY_ROLE = keccak256(\\\"CHANGE_EXECUTION_DELAY_ROLE\\\");\\n    bytes32 public constant CHANGE_EXECUTION_DELAY_ROLE = 0x5e3a3edc315e366a0cc5c94ca94a8f9bbc2f1feebb2ef7704bfefcff0cdc4ee7;\\n\\n    // bytes32 public constant CHANGE_QUIET_ENDING_ROLE = keccak256(\\\"CHANGE_QUIET_ENDING_ROLE\\\");\\n    bytes32 public constant CHANGE_QUIET_ENDING_ROLE = 0x4f885d966bcd49734218a6e280d58c840b86e8cc13610b21ebd46f0b1da362c2;\\n\\n    uint256 public constant PCT_BASE = 10 ** 18; // 0% = 0; 1% = 10^16; 100% = 10^18\\n    uint256 public constant MAX_VOTES_DELEGATION_SET_LENGTH = 70;\\n\\n    // Validation errors\\n    string private constant ERROR_NO_VOTE = \\\"VOTING_NO_VOTE\\\";\\n    string private constant ERROR_VOTE_TIME_ZERO = \\\"VOTING_VOTE_TIME_ZERO\\\";\\n    string private constant ERROR_TOKEN_NOT_CONTRACT = \\\"VOTING_TOKEN_NOT_CONTRACT\\\";\\n    string private constant ERROR_SETTING_DOES_NOT_EXIST = \\\"VOTING_SETTING_DOES_NOT_EXIST\\\";\\n    string private constant ERROR_CHANGE_QUORUM_TOO_BIG = \\\"VOTING_CHANGE_QUORUM_TOO_BIG\\\";\\n    string private constant ERROR_CHANGE_SUPPORT_TOO_SMALL = \\\"VOTING_CHANGE_SUPPORT_TOO_SMALL\\\";\\n    string private constant ERROR_CHANGE_SUPPORT_TOO_BIG = \\\"VOTING_CHANGE_SUPPORT_TOO_BIG\\\";\\n    string private constant ERROR_INVALID_DELEGATED_VOTING_PERIOD = \\\"VOTING_INVALID_DLGT_VOTE_PERIOD\\\";\\n    string private constant ERROR_INVALID_QUIET_ENDING_PERIOD = \\\"VOTING_INVALID_QUIET_END_PERIOD\\\";\\n    string private constant ERROR_INVALID_EXECUTION_SCRIPT = \\\"VOTING_INVALID_EXECUTION_SCRIPT\\\";\\n\\n    // Workflow errors\\n    string private constant ERROR_CANNOT_FORWARD = \\\"VOTING_CANNOT_FORWARD\\\";\\n    string private constant ERROR_NO_TOTAL_VOTING_POWER = \\\"VOTING_NO_TOTAL_VOTING_POWER\\\";\\n    string private constant ERROR_CANNOT_VOTE = \\\"VOTING_CANNOT_VOTE\\\";\\n    string private constant ERROR_NOT_REPRESENTATIVE = \\\"VOTING_NOT_REPRESENTATIVE\\\";\\n    string private constant ERROR_PAST_REPRESENTATIVE_VOTING_WINDOW = \\\"VOTING_PAST_REP_VOTING_WINDOW\\\";\\n    string private constant ERROR_DELEGATES_EXCEEDS_MAX_LEN = \\\"VOTING_DELEGATES_EXCEEDS_MAX_LEN\\\";\\n    string private constant ERROR_CANNOT_PAUSE_VOTE = \\\"VOTING_CANNOT_PAUSE_VOTE\\\";\\n    string private constant ERROR_VOTE_NOT_PAUSED = \\\"VOTING_VOTE_NOT_PAUSED\\\";\\n    string private constant ERROR_CANNOT_EXECUTE = \\\"VOTING_CANNOT_EXECUTE\\\";\\n\\n    enum VoterState { Absent, Yea, Nay }\\n\\n    enum VoteStatus {\\n        Normal,                         // A vote in a \\\"normal\\\" state of operation (not one of the below)--note that this state is not related to the vote being open\\n        Paused,                         // A vote that is paused due to it having an open challenge or dispute\\n        Cancelled,                      // A vote that has been explicitly cancelled due to a challenge or dispute\\n        Executed                        // A vote that has been executed\\n    }\\n\\n    struct Setting {\\n        // \\\"Base\\\" duration of each vote -- vote lifespans may be adjusted by pause and extension durations\\n        uint64 voteTime;\\n\\n        // Required voter support % (yes power / voted power) for a vote to pass\\n        // Expressed as a percentage of 10^18; eg. 10^16 = 1%, 10^18 = 100%\\n        uint64 supportRequiredPct;\\n\\n        // Required voter quorum % (yes power / total power) for a vote to pass\\n        // Expressed as a percentage of 10^18; eg. 10^16 = 1%, 10^18 = 100%\\n        // Must be <= supportRequiredPct to avoid votes being impossible to pass\\n        uint64 minAcceptQuorumPct;\\n\\n        // Duration from the start of a vote that representatives are allowed to vote on behalf of principals\\n        // Must be <= voteTime; duration is bound as [)\\n        uint64 delegatedVotingPeriod;\\n\\n        // Duration before the end of a vote to detect non-quiet endings\\n        // Must be <= voteTime; duration is bound as [)\\n        uint64 quietEndingPeriod;\\n\\n        // Duration to extend a vote in case of non-quiet ending\\n        uint64 quietEndingExtension;\\n\\n        // Duration to wait before a passed vote can be executed\\n        // Duration is bound as [)\\n        uint64 executionDelay;\\n    }\\n\\n    struct VoteCast {\\n        VoterState state;\\n        address caster;                                     // Caster of the vote (only stored if caster was not the representative)\\n    }\\n\\n    struct Vote {\\n        uint256 yea;                                        // Voting power for\\n        uint256 nay;                                        // Voting power against\\n        uint256 totalPower;                                 // Total voting power (based on the snapshot block)\\n\\n        uint64 startDate;                                   // Datetime when the vote was created\\n        uint64 snapshotBlock;                               // Block number used to check voting power on attached token\\n        VoteStatus status;                                  // Status of the vote\\n\\n        uint256 settingId;                                  // Identification number of the setting applicable to the vote\\n        uint256 actionId;                                   // Identification number of the associated disputable action on the linked Agreement\\n\\n        uint64 pausedAt;                                    // Datetime when the vote was paused\\n        uint64 pauseDuration;                               // Duration of the pause (only updated once resumed)\\n        uint64 quietEndingExtensionDuration;                // Duration a vote was extended due to non-quiet endings\\n        VoterState quietEndingSnapshotSupport;              // Snapshot of the vote's support at the beginning of the first quiet ending period\\n\\n        bytes32 executionScriptHash;                        // Hash of the EVM script attached to the vote\\n        mapping (address => VoteCast) castVotes;            // Mapping of voter address => more information about their cast vote\\n    }\\n\\n    MiniMeToken public token;                               // Token for determining voting power; we assume it's not malicious\\n\\n    uint256 public settingsLength;                          // Number of settings created\\n    mapping (uint256 => Setting) internal settings;         // List of settings indexed by ID (starting at 0)\\n\\n    uint256 public votesLength;                             // Number of votes created\\n    mapping (uint256 => Vote) internal votes;               // List of votes indexed by ID (starting at 0)\\n    mapping (address => address) internal representatives;  // Mapping of voter => allowed representative\\n\\n    event NewSetting(uint256 settingId);\\n    event ChangeVoteTime(uint64 voteTime);\\n    event ChangeSupportRequired(uint64 supportRequiredPct);\\n    event ChangeMinQuorum(uint64 minAcceptQuorumPct);\\n    event ChangeDelegatedVotingPeriod(uint64 delegatedVotingPeriod);\\n    event ChangeQuietEndingConfiguration(uint64 quietEndingPeriod, uint64 quietEndingExtension);\\n    event ChangeExecutionDelay(uint64 executionDelay);\\n\\n    event StartVote(uint256 indexed voteId, address indexed creator, bytes context, bytes executionScript);\\n    event PauseVote(uint256 indexed voteId, uint256 indexed challengeId);\\n    event ResumeVote(uint256 indexed voteId);\\n    event CancelVote(uint256 indexed voteId);\\n    event ExecuteVote(uint256 indexed voteId);\\n    event QuietEndingExtendVote(uint256 indexed voteId, bool passing);\\n\\n    event CastVote(uint256 indexed voteId, address indexed voter, bool supports, address caster);\\n    event ChangeRepresentative(address indexed voter, address indexed representative);\\n    event ProxyVoteFailure(uint256 indexed voteId, address indexed voter, address indexed representative);\\n\\n    /**\\n    * @notice Initialize Disputable Voting with `_token.symbol(): string` for governance, a voting duration of `@transformTime(_voteTime)`, minimum support of `@formatPct(_supportRequiredPct)`%, minimum acceptance quorum of `@formatPct(_minAcceptQuorumPct)`%, a delegated voting period of `@transformTime(_delegatedVotingPeriod), and a execution delay of `@transformTime(_executionDelay)`\\n    * @param _token MiniMeToken Address that will be used as governance token\\n    * @param _voteTime Base duration a vote will be open for voting\\n    * @param _supportRequiredPct Required support % (yes power / voted power) for a vote to pass; expressed as a percentage of 10^18\\n    * @param _minAcceptQuorumPct Required quorum % (yes power / total power) for a vote to pass; expressed as a percentage of 10^18\\n    * @param _delegatedVotingPeriod Duration from the start of a vote that representatives are allowed to vote on behalf of principals\\n    * @param _quietEndingPeriod Duration to detect non-quiet endings\\n    * @param _quietEndingExtension Duration to extend a vote in case of non-quiet ending\\n    * @param _executionDelay Duration to wait before a passed vote can be executed\\n    */\\n    function initialize(\\n        MiniMeToken _token,\\n        uint64 _voteTime,\\n        uint64 _supportRequiredPct,\\n        uint64 _minAcceptQuorumPct,\\n        uint64 _delegatedVotingPeriod,\\n        uint64 _quietEndingPeriod,\\n        uint64 _quietEndingExtension,\\n        uint64 _executionDelay\\n    )\\n        external\\n    {\\n        initialized();\\n\\n        require(isContract(_token), ERROR_TOKEN_NOT_CONTRACT);\\n        token = _token;\\n\\n        (Setting storage setting, ) = _newSetting();\\n        _changeVoteTime(setting, _voteTime);\\n        _changeSupportRequiredPct(setting, _supportRequiredPct);\\n        _changeMinAcceptQuorumPct(setting, _minAcceptQuorumPct);\\n        _changeDelegatedVotingPeriod(setting, _delegatedVotingPeriod);\\n        _changeQuietEndingConfiguration(setting, _quietEndingPeriod, _quietEndingExtension);\\n        _changeExecutionDelay(setting, _executionDelay);\\n    }\\n\\n    /**\\n    * @notice Change vote time to `@transformTime(_voteTime)`\\n    * @param _voteTime New vote time\\n    */\\n    function changeVoteTime(uint64 _voteTime) external authP(CHANGE_VOTE_TIME_ROLE, arr(uint256(_voteTime))) {\\n        Setting storage setting = _newCopiedSettings();\\n        _changeVoteTime(setting, _voteTime);\\n    }\\n\\n    /**\\n    * @notice Change required support to `@formatPct(_supportRequiredPct)`%\\n    * @param _supportRequiredPct New required support; expressed as a percentage of 10^18\\n    */\\n    function changeSupportRequiredPct(uint64 _supportRequiredPct) external authP(CHANGE_SUPPORT_ROLE, arr(uint256(_supportRequiredPct))) {\\n        Setting storage setting = _newCopiedSettings();\\n        _changeSupportRequiredPct(setting, _supportRequiredPct);\\n    }\\n\\n    /**\\n    * @notice Change minimum acceptance quorum to `@formatPct(_minAcceptQuorumPct)`%\\n    * @param _minAcceptQuorumPct New minimum acceptance quorum; expressed as a percentage of 10^18\\n    */\\n    function changeMinAcceptQuorumPct(uint64 _minAcceptQuorumPct) external authP(CHANGE_QUORUM_ROLE, arr(uint256(_minAcceptQuorumPct))) {\\n        Setting storage setting = _newCopiedSettings();\\n        _changeMinAcceptQuorumPct(setting, _minAcceptQuorumPct);\\n    }\\n\\n    /**\\n    * @notice Change delegated voting period to `@transformTime(_delegatedVotingPeriod)`\\n    * @param _delegatedVotingPeriod New delegated voting period\\n    */\\n    function changeDelegatedVotingPeriod(uint64 _delegatedVotingPeriod)\\n        external\\n        authP(CHANGE_DELEGATED_VOTING_PERIOD_ROLE, arr(uint256(_delegatedVotingPeriod)))\\n    {\\n        Setting storage setting = _newCopiedSettings();\\n        _changeDelegatedVotingPeriod(setting, _delegatedVotingPeriod);\\n    }\\n\\n    /**\\n    * @notice Change quiet ending period to `@transformTime(_quietEndingPeriod)` with extensions of `@transformTime(_quietEndingExtension)`\\n    * @param _quietEndingPeriod New quiet ending period\\n    * @param _quietEndingExtension New quiet ending extension\\n    */\\n    function changeQuietEndingConfiguration(uint64 _quietEndingPeriod, uint64 _quietEndingExtension)\\n        external\\n        authP(CHANGE_QUIET_ENDING_ROLE, arr(uint256(_quietEndingPeriod), uint256(_quietEndingExtension)))\\n    {\\n        Setting storage setting = _newCopiedSettings();\\n        _changeQuietEndingConfiguration(setting, _quietEndingPeriod, _quietEndingExtension);\\n    }\\n\\n    /**\\n    * @notice Change execution delay to `@transformTime(_executionDelay)`\\n    * @param _executionDelay New execution delay\\n    */\\n    function changeExecutionDelay(uint64 _executionDelay) external authP(CHANGE_EXECUTION_DELAY_ROLE, arr(uint256(_executionDelay))) {\\n        Setting storage setting = _newCopiedSettings();\\n        _changeExecutionDelay(setting, _executionDelay);\\n    }\\n\\n    /**\\n    * @notice Create a new vote about \\\"`_context`\\\"\\n    * @param _executionScript Action (encoded as an EVM script) that will be allowed to execute if the vote passes\\n    * @param _context Additional context for the vote, also used as the disputable action's context on the linked Agreement\\n    * @return Identification number of the newly created vote\\n    */\\n    function newVote(bytes _executionScript, bytes _context) external authP(CREATE_VOTES_ROLE, arr(msg.sender)) returns (uint256) {\\n        return _newVote(_executionScript, _context);\\n    }\\n\\n    /**\\n    * @notice Vote `_supports ? 'yes' : 'no'` in vote #`_voteId`\\n    * @dev Initialization check is implicitly provided by `_getVote()` as new votes can only be\\n    *      created via `newVote()`, which requires initialization\\n    * @param _voteId Identification number of the vote\\n    * @param _supports Whether voter supports the vote\\n    */\\n    function vote(uint256 _voteId, bool _supports) external {\\n        Vote storage vote_ = _getVote(_voteId);\\n        require(_canVote(vote_, msg.sender), ERROR_CANNOT_VOTE);\\n\\n        _castVote(vote_, _voteId, _supports, msg.sender, address(0));\\n    }\\n\\n    /**\\n    * @notice Vote `_supports ? 'yes' : 'no'` in vote #`_voteId` on behalf of delegated voters\\n    * @dev Initialization check is implicitly provided by `_getVote()` as new votes can only be\\n    *      created via `newVote()`, which requires initialization\\n    * @param _voteId Identification number of the vote\\n    * @param _supports Whether the representative supports the vote\\n    * @param _voters Addresses of the delegated voters to vote on behalf of\\n    */\\n    function voteOnBehalfOf(uint256 _voteId, bool _supports, address[] _voters) external {\\n        require(_voters.length <= MAX_VOTES_DELEGATION_SET_LENGTH, ERROR_DELEGATES_EXCEEDS_MAX_LEN);\\n\\n        Vote storage vote_ = _getVote(_voteId);\\n        // Note that the period for representatives to vote can never go into a quiet ending\\n        // extension, and so we don't need to check other timing-based pre-conditions\\n        require(_canRepresentativesVote(vote_), ERROR_PAST_REPRESENTATIVE_VOTING_WINDOW);\\n\\n        for (uint256 i = 0; i < _voters.length; i++) {\\n            address voter = _voters[i];\\n            require(_hasVotingPower(vote_, voter), ERROR_CANNOT_VOTE);\\n            require(_isRepresentativeOf(voter, msg.sender), ERROR_NOT_REPRESENTATIVE);\\n\\n            if (!_hasCastVote(vote_, voter)) {\\n                _castVote(vote_, _voteId, _supports, voter, msg.sender);\\n            } else {\\n                emit ProxyVoteFailure(_voteId, voter, msg.sender);\\n            }\\n        }\\n    }\\n\\n    /**\\n    * @notice Execute vote #`_voteId`\\n    * @dev Initialization check is implicitly provided by `_getVote()` as new votes can only be\\n    *      created via `newVote()`, which requires initialization\\n    * @param _voteId Identification number of the vote\\n    * @param _executionScript Action (encoded as an EVM script) to be executed, must match the one used when the vote was created\\n    */\\n    function executeVote(uint256 _voteId, bytes _executionScript) external {\\n        Vote storage vote_ = _getVote(_voteId);\\n        require(_canExecute(vote_), ERROR_CANNOT_EXECUTE);\\n        require(vote_.executionScriptHash == keccak256(_executionScript), ERROR_INVALID_EXECUTION_SCRIPT);\\n\\n        vote_.status = VoteStatus.Executed;\\n        _closeDisputableAction(vote_.actionId);\\n\\n        // IMPORTANT! The linked Agreement is not blacklisted on purpose\\n        // It will be users responsibility to check the content of the EVMScripts submitted to the Disputable Voting app\\n        // to make sure these are not performing any malicious actions in the Agreement (e.g. maliciously closing a different action)\\n        runScript(_executionScript, new bytes(0), new address[](0));\\n        emit ExecuteVote(_voteId);\\n    }\\n\\n    /**\\n    * @notice `_representative == 0x0 ? 'Set your voting representative to ' + _representative : 'Remove your representative'`\\n    * @param _representative Address of the representative who is allowed to vote on behalf of the sender. Use the zero address for none.\\n    */\\n    function setRepresentative(address _representative) external isInitialized {\\n        representatives[msg.sender] = _representative;\\n        emit ChangeRepresentative(msg.sender, _representative);\\n    }\\n\\n    // Forwarding external fns\\n\\n    /**\\n    * @notice Create a vote to execute the desired action\\n    * @dev IForwarderWithContext interface conformance.\\n    *      This app (as a DisputableAragonApp) is required to be the initial step in the forwarding chain.\\n    * @param _evmScript Action (encoded as an EVM script) that will be allowed to execute if the vote passes\\n    * @param _context Additional context for the vote, also used as the disputable action's context on the linked Agreement\\n    */\\n    function forward(bytes _evmScript, bytes _context) external {\\n        require(_canForward(msg.sender, _evmScript), ERROR_CANNOT_FORWARD);\\n        _newVote(_evmScript, _context);\\n    }\\n\\n    // Forwarding getter fns\\n\\n    /**\\n    * @dev Tell if an address can forward actions (by creating a vote)\\n    *      IForwarderWithContext interface conformance\\n    * @param _sender Address intending to forward an action\\n    * @param _evmScript EVM script being forwarded\\n    * @return True if the address is allowed create a vote containing the action\\n    */\\n    function canForward(address _sender, bytes _evmScript) external view returns (bool) {\\n        return _canForward(_sender, _evmScript);\\n    }\\n\\n    // Disputable getter fns\\n\\n    /**\\n    * @dev Tell if a vote can be challenged\\n    *      Called by the linked Agreement when a challenge is requested for the associated vote\\n    * @param _voteId Identification number of the vote being queried\\n    * @return True if the vote can be challenged\\n    */\\n    function canChallenge(uint256 _voteId) external view returns (bool) {\\n        Vote storage vote_ = _getVote(_voteId);\\n        // Votes can only be challenged once\\n        return vote_.pausedAt == 0 && _isVoteOpenForVoting(vote_, settings[vote_.settingId]);\\n    }\\n\\n    /**\\n    * @dev Tell if a vote can be closed\\n    *      Called by the linked Agreement when the action associated with the vote is requested to be manually closed\\n    * @param _voteId Identification number of the vote being queried\\n    * @return True if the vote can be closed\\n    */\\n    function canClose(uint256 _voteId) external view returns (bool) {\\n        Vote storage vote_ = _getVote(_voteId);\\n        return (_isNormal(vote_) || _isExecuted(vote_)) && _hasEnded(vote_, settings[vote_.settingId]);\\n    }\\n\\n    // Getter fns\\n\\n    /**\\n    * @dev Tell the information for a setting\\n    *      Initialization check is implicitly provided by `_getSetting()` as new settings can only be\\n    *      created via `change*()` functions which require initialization\\n    * @param _settingId Identification number of the setting\\n    * @return voteTime Base vote duration\\n    * @return supportRequiredPct Required support % (yes power / voted power) for a vote to pass; expressed as a percentage of 10^18\\n    * @return minAcceptQuorumPct Required quorum % (yes power / total power) for a vote to pass; expressed as a percentage of 10^18\\n    * @return delegatedVotingPeriod Duration of the delegated voting period\\n    * @return quietEndingPeriod Duration to detect non-quiet endings\\n    * @return quietEndingExtension Duration to extend a vote in case of non-quiet ending\\n    * @return executionDelay Duration to wait before a passed vote can be executed\\n    */\\n    function getSetting(uint256 _settingId)\\n        external\\n        view\\n        returns (\\n            uint64 voteTime,\\n            uint64 supportRequiredPct,\\n            uint64 minAcceptQuorumPct,\\n            uint64 delegatedVotingPeriod,\\n            uint64 quietEndingPeriod,\\n            uint64 quietEndingExtension,\\n            uint64 executionDelay\\n        )\\n    {\\n        Setting storage setting = _getSetting(_settingId);\\n        voteTime = setting.voteTime;\\n        supportRequiredPct = setting.supportRequiredPct;\\n        minAcceptQuorumPct = setting.minAcceptQuorumPct;\\n        delegatedVotingPeriod = setting.delegatedVotingPeriod;\\n        quietEndingPeriod = setting.quietEndingPeriod;\\n        quietEndingExtension = setting.quietEndingExtension;\\n        executionDelay = setting.executionDelay;\\n    }\\n\\n    /**\\n    * @dev Tell the information for a vote\\n    *      Initialization check is implicitly provided by `_getVote()` as new votes can only be\\n    *      created via `newVote()`, which requires initialization\\n    * @param _voteId Identification number of the vote\\n    * @return yea Voting power for\\n    * @return nay Voting power against\\n    * @return totalPower Total voting power available (based on the snapshot block)\\n    * @return startDate Datetime when the vote was created\\n    * @return snapshotBlock Block number used to check voting power on attached token\\n    * @return status Status of the vote\\n    * @return settingId Identification number of the setting applicable to the vote\\n    * @return actionId Identification number of the associated disputable action on the linked Agreement\\n    * @return pausedAt Datetime when the vote was paused\\n    * @return pauseDuration Duration of the pause (only updated once resumed)\\n    * @return quietEndingExtensionDuration Duration a vote was extended due to non-quiet endings\\n    * @return quietEndingSnapshotSupport Snapshot of the vote's support at the beginning of the first quiet ending period\\n    * @return executionScriptHash Hash of the EVM script attached to the vote\\n    */\\n    function getVote(uint256 _voteId)\\n        external\\n        view\\n        returns (\\n            uint256 yea,\\n            uint256 nay,\\n            uint256 totalPower,\\n            uint64 startDate,\\n            uint64 snapshotBlock,\\n            VoteStatus status,\\n            uint256 settingId,\\n            uint256 actionId,\\n            uint64 pausedAt,\\n            uint64 pauseDuration,\\n            uint64 quietEndingExtensionDuration,\\n            VoterState quietEndingSnapshotSupport,\\n            bytes32 executionScriptHash\\n        )\\n    {\\n        Vote storage vote_ = _getVote(_voteId);\\n\\n        yea = vote_.yea;\\n        nay = vote_.nay;\\n        totalPower = vote_.totalPower;\\n        startDate = vote_.startDate;\\n        snapshotBlock = vote_.snapshotBlock;\\n        status = vote_.status;\\n        settingId = vote_.settingId;\\n        actionId = vote_.actionId;\\n        pausedAt = vote_.pausedAt;\\n        pauseDuration = vote_.pauseDuration;\\n        quietEndingExtensionDuration = vote_.quietEndingExtensionDuration;\\n        quietEndingSnapshotSupport = vote_.quietEndingSnapshotSupport;\\n        executionScriptHash = vote_.executionScriptHash;\\n    }\\n\\n    /**\\n    * @dev Tell the state of a voter for a vote\\n    *      Initialization check is implicitly provided by `_getVote()` as new votes can only be\\n    *      created via `newVote()`, which requires initialization\\n    * @param _voteId Identification number of the vote\\n    * @param _voter Address of the voter being queried\\n    * @return state Voter's cast state being queried\\n    * @return caster Address of the vote's caster\\n    */\\n    function getCastVote(uint256 _voteId, address _voter) external view returns (VoterState state, address caster) {\\n        Vote storage vote_ = _getVote(_voteId);\\n        state = _voterState(vote_, _voter);\\n        caster = _voteCaster(vote_, _voter);\\n    }\\n\\n    /**\\n    * @dev Tell if a voter can participate in a vote\\n    *      Initialization check is implicitly provided by `_getVote()` as new votes can only be\\n    *      created via `newVote()`, which requires initialization\\n    * @param _voteId Identification number of the vote being queried\\n    * @param _voter Address of the voter being queried\\n    * @return True if the voter can participate in the vote\\n    */\\n    function canVote(uint256 _voteId, address _voter) external view returns (bool) {\\n        return _canVote(_getVote(_voteId), _voter);\\n    }\\n\\n    /**\\n    * @dev Tell if a representative can vote on behalf of delegated voters in a vote\\n    *      Initialization check is implicitly provided by `_getVote()` as new votes can only be\\n    *      created via `newVote()`, which requires initialization\\n    * @param _voteId Identification number of the vote being queried\\n    * @param _voters Addresses of the delegated voters being queried\\n    * @param _representative Address of the representative being queried\\n    * @return True if the representative can vote on behalf of the delegated voters in the vote\\n    */\\n    function canVoteOnBehalfOf(uint256 _voteId, address[] _voters, address _representative) external view returns (bool) {\\n        require(_voters.length <= MAX_VOTES_DELEGATION_SET_LENGTH, ERROR_DELEGATES_EXCEEDS_MAX_LEN);\\n\\n        Vote storage vote_ = _getVote(_voteId);\\n        if (!_canRepresentativesVote(vote_)) {\\n            return false;\\n        }\\n\\n        for (uint256 i = 0; i < _voters.length; i++) {\\n            address voter = _voters[i];\\n            if (!_hasVotingPower(vote_, voter) || !_isRepresentativeOf(voter, _representative) || _hasCastVote(vote_, voter)) {\\n                return false;\\n            }\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n    * @dev Tell if a vote can be executed\\n    *      Initialization check is implicitly provided by `_getVote()` as new votes can only be\\n    *      created via `newVote()`, which requires initialization\\n    * @param _voteId Identification number of the vote being queried\\n    * @return True if the vote can be executed\\n    */\\n    function canExecute(uint256 _voteId) external view returns (bool) {\\n        return _canExecute(_getVote(_voteId));\\n    }\\n\\n    /**\\n    * @dev Tell if a vote is open for voting\\n    *      Initialization check is implicitly provided by `_getVote()` as new votes can only be\\n    *      created via `newVote()`, which requires initialization\\n    * @param _voteId Identification number of the vote being queried\\n    * @return True if the vote is open for voting\\n    */\\n    function isVoteOpenForVoting(uint256 _voteId) external view returns (bool) {\\n        Vote storage vote_ = _getVote(_voteId);\\n        Setting storage setting = settings[vote_.settingId];\\n        return _isVoteOpenForVoting(vote_, setting);\\n    }\\n\\n    /**\\n    * @dev Tell if a vote currently allows representatives to vote for delegated voters\\n    *      Initialization check is implicitly provided by `_getVote()` as new votes can only be\\n    *      created via `newVote()`, which requires initialization\\n    * @param _voteId Vote identifier\\n    * @return True if the vote currently allows representatives to vote\\n    */\\n    function canRepresentativesVote(uint256 _voteId) external view returns (bool) {\\n        Vote storage vote_ = _getVote(_voteId);\\n        return _canRepresentativesVote(vote_);\\n    }\\n\\n    /**\\n    * @dev Tell if a representative currently represents another voter\\n    * @param _voter Address of the delegated voter being queried\\n    * @param _representative Address of the representative being queried\\n    * @return True if the representative currently represents the voter\\n    */\\n    function isRepresentativeOf(address _voter, address _representative) external view isInitialized returns (bool) {\\n        return _isRepresentativeOf(_voter, _representative);\\n    }\\n\\n    // DisputableAragonApp callback implementations\\n\\n    /**\\n    * @dev Received when a vote is challenged\\n    * @param _voteId Identification number of the vote\\n    * @param _challengeId Identification number of the challenge associated to the vote on the linked Agreement\\n    */\\n    function _onDisputableActionChallenged(uint256 _voteId, uint256 _challengeId, address /* _challenger */) internal {\\n        Vote storage vote_ = _getVote(_voteId);\\n        require(_isNormal(vote_), ERROR_CANNOT_PAUSE_VOTE);\\n\\n        vote_.status = VoteStatus.Paused;\\n        vote_.pausedAt = getTimestamp64();\\n        emit PauseVote(_voteId, _challengeId);\\n    }\\n\\n    /**\\n    * @dev Received when a vote was ruled in favour of the submitter\\n    * @param _voteId Identification number of the vote\\n    */\\n    function _onDisputableActionAllowed(uint256 _voteId) internal {\\n        Vote storage vote_ = _getVote(_voteId);\\n        require(_isPaused(vote_), ERROR_VOTE_NOT_PAUSED);\\n\\n        vote_.status = VoteStatus.Normal;\\n        vote_.pauseDuration = getTimestamp64().sub(vote_.pausedAt);\\n        emit ResumeVote(_voteId);\\n    }\\n\\n    /**\\n    * @dev Received when a vote was ruled in favour of the challenger\\n    * @param _voteId Identification number of the vote\\n    */\\n    function _onDisputableActionRejected(uint256 _voteId) internal {\\n        Vote storage vote_ = _getVote(_voteId);\\n        require(_isPaused(vote_), ERROR_VOTE_NOT_PAUSED);\\n\\n        vote_.status = VoteStatus.Cancelled;\\n        vote_.pauseDuration = getTimestamp64().sub(vote_.pausedAt);\\n        emit CancelVote(_voteId);\\n    }\\n\\n    /**\\n    * @dev Received when a vote was ruled as void\\n    * @param _voteId Identification number of the vote\\n    */\\n    function _onDisputableActionVoided(uint256 _voteId) internal {\\n        // When a challenged vote is ruled as voided, it is considered as being rejected.\\n        // This could be the case for challenges where the linked Agreement's arbitrator refuses to rule the case.\\n        _onDisputableActionRejected(_voteId);\\n    }\\n\\n    // Internal fns\\n\\n    /**\\n    * @dev Create a new empty setting instance\\n    * @return New setting's instance\\n    * @return New setting's identification number\\n    */\\n    function _newSetting() internal returns (Setting storage setting, uint256 settingId) {\\n        settingId = settingsLength++;\\n        setting = settings[settingId];\\n        emit NewSetting(settingId);\\n    }\\n\\n    /**\\n    * @dev Create a copy of the current settings as a new setting instance\\n    * @return New setting's instance\\n    */\\n    function _newCopiedSettings() internal returns (Setting storage) {\\n        (Setting storage to, uint256 settingId) = _newSetting();\\n        Setting storage from = _getSetting(settingId - 1);\\n        to.voteTime = from.voteTime;\\n        to.supportRequiredPct = from.supportRequiredPct;\\n        to.minAcceptQuorumPct = from.minAcceptQuorumPct;\\n        to.delegatedVotingPeriod = from.delegatedVotingPeriod;\\n        to.quietEndingPeriod = from.quietEndingPeriod;\\n        to.quietEndingExtension = from.quietEndingExtension;\\n        to.executionDelay = from.executionDelay;\\n        return to;\\n    }\\n\\n    /**\\n    * @dev Change vote time\\n    * @param _setting Setting instance to update\\n    * @param _voteTime New vote time\\n    */\\n    function _changeVoteTime(Setting storage _setting, uint64 _voteTime) internal {\\n        require(_voteTime > 0, ERROR_VOTE_TIME_ZERO);\\n\\n        _setting.voteTime = _voteTime;\\n        emit ChangeVoteTime(_voteTime);\\n    }\\n\\n    /**\\n    * @dev Change the required support\\n    * @param _setting Setting instance to update\\n    * @param _supportRequiredPct New required support; expressed as a percentage of 10^18\\n    */\\n    function _changeSupportRequiredPct(Setting storage _setting, uint64 _supportRequiredPct) internal {\\n        require(_setting.minAcceptQuorumPct <= _supportRequiredPct, ERROR_CHANGE_SUPPORT_TOO_SMALL);\\n        require(_supportRequiredPct < PCT_BASE, ERROR_CHANGE_SUPPORT_TOO_BIG);\\n\\n        _setting.supportRequiredPct = _supportRequiredPct;\\n        emit ChangeSupportRequired(_supportRequiredPct);\\n    }\\n\\n    /**\\n    * @dev Change the minimum acceptance quorum\\n    * @param _setting Setting instance to update\\n    * @param _minAcceptQuorumPct New acceptance quorum; expressed as a percentage of 10^18\\n    */\\n    function _changeMinAcceptQuorumPct(Setting storage _setting, uint64 _minAcceptQuorumPct) internal {\\n        require(_minAcceptQuorumPct <= _setting.supportRequiredPct, ERROR_CHANGE_QUORUM_TOO_BIG);\\n\\n        _setting.minAcceptQuorumPct = _minAcceptQuorumPct;\\n        emit ChangeMinQuorum(_minAcceptQuorumPct);\\n    }\\n\\n    /**\\n    * @dev Change the delegated voting period\\n    * @param _setting Setting instance to update\\n    * @param _delegatedVotingPeriod New delegated voting period\\n    */\\n    function _changeDelegatedVotingPeriod(Setting storage _setting, uint64 _delegatedVotingPeriod) internal {\\n        require(_delegatedVotingPeriod <= _setting.voteTime, ERROR_INVALID_DELEGATED_VOTING_PERIOD);\\n\\n        _setting.delegatedVotingPeriod = _delegatedVotingPeriod;\\n        emit ChangeDelegatedVotingPeriod(_delegatedVotingPeriod);\\n    }\\n\\n    /**\\n    * @dev Change the quiet ending configuration\\n    * @param _setting Setting instance to update\\n    * @param _quietEndingPeriod New quiet ending period\\n    * @param _quietEndingExtension New quiet ending extension\\n    */\\n    function _changeQuietEndingConfiguration(Setting storage _setting, uint64 _quietEndingPeriod, uint64 _quietEndingExtension) internal {\\n        require(_quietEndingPeriod <= _setting.voteTime, ERROR_INVALID_QUIET_ENDING_PERIOD);\\n\\n        _setting.quietEndingPeriod = _quietEndingPeriod;\\n        _setting.quietEndingExtension = _quietEndingExtension;\\n        emit ChangeQuietEndingConfiguration(_quietEndingPeriod, _quietEndingExtension);\\n    }\\n\\n    /**\\n    * @dev Change the execution delay\\n    * @param _setting Setting instance to update\\n    * @param _executionDelay New execution delay\\n    */\\n    function _changeExecutionDelay(Setting storage _setting, uint64 _executionDelay) internal {\\n        _setting.executionDelay = _executionDelay;\\n        emit ChangeExecutionDelay(_executionDelay);\\n    }\\n\\n    /**\\n    * @dev Create a new vote\\n    * @param _executionScript Action (encoded as an EVM script) that will be allowed to execute if the vote passes\\n    * @param _context Additional context for the vote, also used as the disputable action's context on the linked Agreement\\n    * @return voteId Identification number for the newly created vote\\n    */\\n    function _newVote(bytes _executionScript, bytes _context) internal returns (uint256 voteId) {\\n        uint64 snapshotBlock = getBlockNumber64() - 1; // avoid double voting in this very block\\n        uint256 totalPower = token.totalSupplyAt(snapshotBlock);\\n        require(totalPower > 0, ERROR_NO_TOTAL_VOTING_POWER);\\n\\n        voteId = votesLength++;\\n\\n        Vote storage vote_ = votes[voteId];\\n        vote_.totalPower = totalPower;\\n        vote_.startDate = getTimestamp64();\\n        vote_.snapshotBlock = snapshotBlock;\\n        vote_.status = VoteStatus.Normal;\\n        vote_.settingId = _getCurrentSettingId();\\n        vote_.executionScriptHash = keccak256(_executionScript);\\n\\n        // Notify the linked Agreement about the new vote; this is mandatory in making the vote disputable\\n        // Note that we send `msg.sender` as the action's submitter--the linked Agreement may expect to be able to pull funds from this account\\n        vote_.actionId = _registerDisputableAction(voteId, _context, msg.sender);\\n\\n        emit StartVote(voteId, msg.sender, _context, _executionScript);\\n    }\\n\\n    /**\\n    * @dev Cast a vote\\n    *      Assumes all eligibility checks have passed for the given vote and voter\\n    * @param _vote Vote instance\\n    * @param _voteId Identification number of vote\\n    * @param _supports Whether principal voter supports the vote\\n    * @param _voter Address of principal voter\\n    * @param _caster Address of vote caster, if voting via representative\\n    */\\n    function _castVote(Vote storage _vote, uint256 _voteId, bool _supports, address _voter, address _caster) internal {\\n        Setting storage setting = settings[_vote.settingId];\\n        if (_hasStartedQuietEndingPeriod(_vote, setting)) {\\n            _ensureQuietEnding(_vote, setting, _voteId);\\n        }\\n\\n        uint256 yeas = _vote.yea;\\n        uint256 nays = _vote.nay;\\n        uint256 voterStake = token.balanceOfAt(_voter, _vote.snapshotBlock);\\n\\n        VoteCast storage castVote = _vote.castVotes[_voter];\\n        VoterState previousVoterState = castVote.state;\\n\\n        // If voter had previously voted, reset their vote\\n        // Note that votes can only be changed once by the principal voter to overrule their representative's vote\\n        if (previousVoterState == VoterState.Yea) {\\n            yeas = yeas.sub(voterStake);\\n        } else if (previousVoterState == VoterState.Nay) {\\n            nays = nays.sub(voterStake);\\n        }\\n\\n        if (_supports) {\\n            yeas = yeas.add(voterStake);\\n        } else {\\n            nays = nays.add(voterStake);\\n        }\\n\\n        _vote.yea = yeas;\\n        _vote.nay = nays;\\n        castVote.state = _voterStateFor(_supports);\\n        castVote.caster = _caster;\\n        emit CastVote(_voteId, _voter, _supports, _caster == address(0) ? _voter : _caster);\\n    }\\n\\n    /**\\n    * @dev Ensure we keep track of the information related for detecting a quiet ending\\n    * @param _vote Vote instance\\n    * @param _setting Setting instance applicable to the vote\\n    * @param _voteId Identification number of the vote\\n    */\\n    function _ensureQuietEnding(Vote storage _vote, Setting storage _setting, uint256 _voteId) internal {\\n        bool isAccepted = _isAccepted(_vote, _setting);\\n\\n        if (_vote.quietEndingSnapshotSupport == VoterState.Absent) {\\n            // If we do not have a snapshot of the support yet, simply store the given value.\\n            // Note that if there are no votes during the quiet ending period, it is obviously impossible for the vote to be flipped and\\n            // this snapshot is never stored.\\n            _vote.quietEndingSnapshotSupport = _voterStateFor(isAccepted);\\n        } else {\\n            // We are calculating quiet ending extensions via \\\"rolling snapshots\\\", and so we only update the vote's cached duration once\\n            // the last period is over and we've confirmed the flip.\\n            if (getTimestamp() >= _lastComputedVoteEndDate(_vote, _setting)) {\\n                _vote.quietEndingExtensionDuration = _vote.quietEndingExtensionDuration.add(_setting.quietEndingExtension);\\n                emit QuietEndingExtendVote(_voteId, isAccepted);\\n            }\\n        }\\n    }\\n\\n    /**\\n    * @dev Fetch a setting's instance by identification number\\n    * @return Identification number of the current setting\\n    */\\n    function _getSetting(uint256 _settingId) internal view returns (Setting storage) {\\n        require(_settingId < settingsLength, ERROR_SETTING_DOES_NOT_EXIST);\\n        return settings[_settingId];\\n    }\\n\\n    /**\\n    * @dev Tell the identification number of the current setting\\n    * @return Identification number of the current setting\\n    */\\n    function _getCurrentSettingId() internal view returns (uint256) {\\n        // No need for SafeMath, note that a new setting is created during initialization\\n        return settingsLength - 1;\\n    }\\n\\n    /**\\n    * @dev Fetch a vote instance by identification number\\n    * @param _voteId Identification number of the vote\\n    * @return Vote instance\\n    */\\n    function _getVote(uint256 _voteId) internal view returns (Vote storage) {\\n        require(_voteId < votesLength, ERROR_NO_VOTE);\\n        return votes[_voteId];\\n    }\\n\\n    /**\\n    * @dev Tell if a voter can participate in a vote.\\n    *      Note that a voter cannot change their vote once cast, except by the principal voter to overrule their representative's vote.\\n    * @param _vote Vote instance being queried\\n    * @param _voter Address of the voter being queried\\n    * @return True if the voter can participate a certain vote\\n    */\\n    function _canVote(Vote storage _vote, address _voter) internal view returns (bool) {\\n        Setting storage setting = settings[_vote.settingId];\\n        return _isVoteOpenForVoting(_vote, setting) && _hasVotingPower(_vote, _voter) && _voteCaster(_vote, _voter) != _voter;\\n    }\\n\\n    /**\\n    * @dev Tell if a vote currently allows representatives to vote for delegated voters\\n    * @param _vote Vote instance being queried\\n    * @return True if the vote currently allows representatives to vote\\n    */\\n    function _canRepresentativesVote(Vote storage _vote) internal view returns (bool) {\\n        return _isNormal(_vote) && !_hasFinishedDelegatedVotingPeriod(_vote, settings[_vote.settingId]);\\n    }\\n\\n    /**\\n    * @dev Tell if a vote can be executed\\n    * @param _vote Vote instance being queried\\n    * @return True if the vote can be executed\\n    */\\n    function _canExecute(Vote storage _vote) internal view returns (bool) {\\n        // If the vote is executed, paused, or cancelled, it cannot be executed\\n        if (!_isNormal(_vote)) {\\n            return false;\\n        }\\n\\n        Setting storage setting = settings[_vote.settingId];\\n\\n        // If the vote is still open, it cannot be executed\\n        if (!_hasEnded(_vote, setting)) {\\n            return false;\\n        }\\n\\n        // If the vote's execution delay has not finished yet, it cannot be executed\\n        if (!_hasFinishedExecutionDelay(_vote, setting)) {\\n            return false;\\n        }\\n\\n        // Check the vote has enough support and has reached the min quorum\\n        return _isAccepted(_vote, setting);\\n    }\\n\\n    /**\\n    * @dev Tell if a vote is in a \\\"normal\\\" non-exceptional state\\n    * @param _vote Vote instance being queried\\n    * @return True if the vote is normal\\n    */\\n    function _isNormal(Vote storage _vote) internal view returns (bool) {\\n        return _vote.status == VoteStatus.Normal;\\n    }\\n\\n    /**\\n    * @dev Tell if a vote is paused\\n    * @param _vote Vote instance being queried\\n    * @return True if the vote is paused\\n    */\\n    function _isPaused(Vote storage _vote) internal view returns (bool) {\\n        return _vote.status == VoteStatus.Paused;\\n    }\\n\\n    /**\\n    * @dev Tell if a vote was executed\\n    * @param _vote Vote instance being queried\\n    * @return True if the vote was executed\\n    */\\n    function _isExecuted(Vote storage _vote) internal view returns (bool) {\\n        return _vote.status == VoteStatus.Executed;\\n    }\\n\\n    /**\\n    * @dev Tell if a vote is currently accepted\\n    * @param _vote Vote instance being queried\\n    * @param _setting Setting instance applicable to the vote\\n    * @return True if the vote is accepted\\n    */\\n    function _isAccepted(Vote storage _vote, Setting storage _setting) internal view returns (bool) {\\n        uint256 yeas = _vote.yea;\\n        uint256 nays = _vote.nay;\\n        uint64 supportRequiredPct = _setting.supportRequiredPct;\\n        uint64 minimumAcceptanceQuorumPct = _setting.minAcceptQuorumPct;\\n        return _isValuePct(yeas, yeas.add(nays), supportRequiredPct) &&\\n               _isValuePct(yeas, _vote.totalPower, minimumAcceptanceQuorumPct);\\n    }\\n\\n    /**\\n    * @dev Tell if a vote is open for voting\\n    * @param _vote Vote instance being queried\\n    * @param _setting Setting instance applicable to the vote\\n    * @return True if the vote is open for voting\\n    */\\n    function _isVoteOpenForVoting(Vote storage _vote, Setting storage _setting) internal view returns (bool) {\\n        return _isNormal(_vote) && !_hasEnded(_vote, _setting);\\n    }\\n\\n    /**\\n    * @dev Tell if a vote has ended\\n    * @param _vote Vote instance being queried\\n    * @param _setting Setting instance applicable to the vote\\n    * @return True if the vote has ended\\n    */\\n    function _hasEnded(Vote storage _vote, Setting storage _setting) internal view returns (bool) {\\n        return getTimestamp() >= _currentVoteEndDate(_vote, _setting);\\n    }\\n\\n    /**\\n    * @dev Tell if a vote's delegated voting period has finished\\n    *      This function doesn't ensure that the vote is still open\\n    * @param _vote Vote instance being queried\\n    * @param _setting Setting instance applicable to the vote\\n    * @return True if the vote's delegated voting period has finished\\n    */\\n    function _hasFinishedDelegatedVotingPeriod(Vote storage _vote, Setting storage _setting) internal view returns (bool) {\\n        uint64 baseDelegatedVotingPeriodEndDate = _vote.startDate.add(_setting.delegatedVotingPeriod);\\n\\n        // If the vote was paused before the delegated voting period ended, we need to extend it\\n        uint64 pausedAt = _vote.pausedAt;\\n        uint64 pauseDuration = _vote.pauseDuration;\\n        uint64 actualDeletedVotingEndDate = pausedAt != 0 && pausedAt < baseDelegatedVotingPeriodEndDate\\n            ? baseDelegatedVotingPeriodEndDate.add(pauseDuration)\\n            : baseDelegatedVotingPeriodEndDate;\\n\\n        return getTimestamp() >= actualDeletedVotingEndDate;\\n    }\\n\\n    /**\\n    * @dev Tell if a vote's quiet ending period has started\\n    *      This function doesn't ensure that the vote is still open\\n    * @param _vote Vote instance being queried\\n    * @param _setting Setting instance applicable to the vote\\n    * @return True if the vote's quiet ending period has started\\n    */\\n    function _hasStartedQuietEndingPeriod(Vote storage _vote, Setting storage _setting) internal view returns (bool) {\\n        uint64 voteBaseEndDate = _baseVoteEndDate(_vote, _setting);\\n        uint64 baseQuietEndingPeriodStartDate = voteBaseEndDate.sub(_setting.quietEndingPeriod);\\n\\n        // If the vote was paused before the quiet ending period started, we need to delay it\\n        uint64 pausedAt = _vote.pausedAt;\\n        uint64 pauseDuration = _vote.pauseDuration;\\n        uint64 actualQuietEndingPeriodStartDate = pausedAt != 0 && pausedAt < baseQuietEndingPeriodStartDate\\n            ? baseQuietEndingPeriodStartDate.add(pauseDuration)\\n            : baseQuietEndingPeriodStartDate;\\n\\n        return getTimestamp() >= actualQuietEndingPeriodStartDate;\\n    }\\n\\n    /**\\n    * @dev Tell if a vote's execution delay has finished\\n    * @param _vote Vote instance being queried\\n    * @param _setting Setting instance applicable to the vote\\n    * @return True if the vote's execution delay has finished\\n    */\\n    function _hasFinishedExecutionDelay(Vote storage _vote, Setting storage _setting) internal view returns (bool) {\\n        uint64 endDate = _currentVoteEndDate(_vote, _setting);\\n        return getTimestamp() >= endDate.add(_setting.executionDelay);\\n    }\\n\\n    /**\\n    * @dev Calculate the original end date of a vote\\n    *      It does not consider extensions from pauses or the quiet ending mechanism\\n    * @param _vote Vote instance being queried\\n    * @param _setting Setting instance applicable to the vote\\n    * @return Datetime of the vote's original end date\\n    */\\n    function _baseVoteEndDate(Vote storage _vote, Setting storage _setting) internal view returns (uint64) {\\n        return _vote.startDate.add(_setting.voteTime);\\n    }\\n\\n    /**\\n    * @dev Tell the last computed end date of a vote.\\n    *      It considers extensions from pauses and the quiet ending mechanism.\\n    *      We call this the \\\"last computed end date\\\" because we use the currently cached quiet ending extension, which may be off-by-one from reality\\n    *      because it is only updated on the first vote in a new extension (which may never happen).\\n    *      The pause duration will only be included after the vote has \\\"resumed\\\" from its pause, as we do not know how long the pause will be in advance.\\n    * @param _vote Vote instance being queried\\n    * @param _setting Setting instance applicable to the vote\\n    * @return Datetime of the vote's last computed end date\\n    */\\n    function _lastComputedVoteEndDate(Vote storage _vote, Setting storage _setting) internal view returns (uint64) {\\n        uint64 endDateAfterPause = _baseVoteEndDate(_vote, _setting).add(_vote.pauseDuration);\\n        return endDateAfterPause.add(_vote.quietEndingExtensionDuration);\\n    }\\n\\n    /**\\n    * @dev Calculate the current end date of a vote.\\n    *      It considers extensions from pauses and the quiet ending mechanism.\\n    *      We call this the \\\"current end date\\\" because it takes into account a posssibly \\\"missing\\\" quiet ending extension that was not cached with the vote.\\n    *      The pause duration will only be included after the vote has \\\"resumed\\\" from its pause, as we do not know how long the pause will be in advance.\\n    * @param _vote Vote instance being queried\\n    * @param _setting Setting instance applicable to the vote\\n    * @return Datetime of the vote's current end date\\n    */\\n    function _currentVoteEndDate(Vote storage _vote, Setting storage _setting) internal view returns (uint64) {\\n        uint64 lastComputedEndDate = _lastComputedVoteEndDate(_vote, _setting);\\n\\n        // The last computed end date is correct if we have not passed it yet or if no flip was detected in the last extension\\n        if (getTimestamp() < lastComputedEndDate || !_wasFlipped(_vote)) {\\n            return lastComputedEndDate;\\n        }\\n\\n        // Otherwise, since the last computed end date was reached and included a flip, we need to extend the end date by one more period\\n        return lastComputedEndDate.add(_setting.quietEndingExtension);\\n    }\\n\\n    /**\\n    * @dev Tell if a vote was flipped in its most recent quiet ending period\\n    *      This function assumes that it will only be called after the most recent quiet ending period has already ended\\n    * @param _vote Vote instance being queried\\n    * @return True if the vote was flipped\\n    */\\n    function _wasFlipped(Vote storage _vote) internal view returns (bool) {\\n        // If there was no snapshot taken, it means no one voted during the quiet ending period. Thus, it cannot have been flipped.\\n        VoterState snapshotSupport = _vote.quietEndingSnapshotSupport;\\n        if (snapshotSupport == VoterState.Absent) {\\n            return false;\\n        }\\n\\n        // Otherwise, we calculate if the vote was flipped by comparing its current acceptance state to its last state at the start of the extension period\\n        bool wasInitiallyAccepted = snapshotSupport == VoterState.Yea;\\n        Setting storage setting = settings[_vote.settingId];\\n        uint256 currentExtensions = _vote.quietEndingExtensionDuration / setting.quietEndingExtension;\\n        bool wasAcceptedBeforeLastFlip = wasInitiallyAccepted != (currentExtensions % 2 != 0);\\n        return wasAcceptedBeforeLastFlip != _isAccepted(_vote, setting);\\n    }\\n\\n    /**\\n    * @dev Tell if a voter has voting power for a vote\\n    * @param _vote Vote instance being queried\\n    * @param _voter Address of the voter being queried\\n    * @return True if the voter has voting power for a certain vote\\n    */\\n    function _hasVotingPower(Vote storage _vote, address _voter) internal view returns (bool) {\\n        return token.balanceOfAt(_voter, _vote.snapshotBlock) > 0;\\n    }\\n\\n    /**\\n    * @dev Tell if a voter has cast their choice in a vote (by themselves or via a representative)\\n    * @param _vote Vote instance being queried\\n    * @param _voter Address of the voter being queried\\n    * @return True if the voter has cast their choice in the vote\\n    */\\n    function _hasCastVote(Vote storage _vote, address _voter) internal view returns (bool) {\\n        return _voterState(_vote, _voter) != VoterState.Absent;\\n    }\\n\\n    /**\\n    * @dev Tell the state of a voter for a vote\\n    * @param _vote Vote instance being queried\\n    * @param _voter Address of the voter being queried\\n    * @return Voting state of the voter\\n    */\\n    function _voterState(Vote storage _vote, address _voter) internal view returns (VoterState) {\\n        return _vote.castVotes[_voter].state;\\n    }\\n\\n    /**\\n    * @dev Tell the caster of a voter on a vote\\n    * @param _vote Vote instance being queried\\n    * @param _voter Address of the voter being queried\\n    * @return Address of the vote's caster\\n    */\\n    function _voteCaster(Vote storage _vote, address _voter) internal view returns (address) {\\n        if (!_hasCastVote(_vote, _voter)) {\\n            return address(0);\\n        }\\n\\n        address _caster = _vote.castVotes[_voter].caster;\\n        return _caster == address(0) ? _voter : _caster;\\n    }\\n\\n    /**\\n    * @dev Tell if a representative currently represents another voter\\n    * @param _voter Address of the delegated voter being queried\\n    * @param _representative Address of the representative being queried\\n    * @return True if the representative currently represents the voter\\n    */\\n    function _isRepresentativeOf(address _voter, address _representative) internal view returns (bool) {\\n        return representatives[_voter] == _representative;\\n    }\\n\\n    /**\\n    * @dev Tell if an address can forward actions\\n    * @param _sender Address intending to forward an action\\n    * @return True if the address can create votes\\n    */\\n    function _canForward(address _sender, bytes) internal view returns (bool) {\\n        IAgreement agreement = _getAgreement();\\n        // To make sure the sender address is reachable by ACL oracles, we need to pass it as the first argument.\\n        // Permissions set with ANY_ENTITY do not provide the original sender's address into the ACL Oracle's `grantee` argument.\\n        return agreement != IAgreement(0) && canPerform(_sender, CREATE_VOTES_ROLE, arr(_sender));\\n    }\\n\\n    /**\\n    * @dev Calculates whether a given value is greater than a percentage of its total\\n    * @param _value Numerator\\n    * @param _total Divisor\\n    * @param _pct Required percentage necessary, expressed as a percentage of 10^18\\n    * @return True if the value is above the required percentage\\n    */\\n    function _isValuePct(uint256 _value, uint256 _total, uint256 _pct) internal pure returns (bool) {\\n        if (_total == 0) {\\n            return false;\\n        }\\n\\n        uint256 computedPct = _value.mul(PCT_BASE) / _total;\\n        return computedPct > _pct;\\n    }\\n\\n    /**\\n    * @dev Translate a voter's support into a voter state\\n    * @param _supports Whether voter supports the vote\\n    * @return Voter state, as an enum\\n    */\\n    function _voterStateFor(bool _supports) internal pure returns (VoterState) {\\n        return _supports ? VoterState.Yea : VoterState.Nay;\\n    }\\n}\\n\",\"keccak256\":\"0x2c26b4829f09100575eadbe24969c0c48646785ca2705170c3deeb672c49da21\"}},\"version\":1}",
  "bytecode": "0x6080604052620000176401000000006200001d810204565b6200023b565b6200003064010000000062000125810204565b60408051808201909152601881527f494e49545f414c52454144595f494e495449414c495a45440000000000000000602082015290156200010c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015620000d0578181015183820152602001620000b6565b50505050905090810190601f168015620000fe5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b506200012360001964010000000062000154810204565b565b60006200014f60008051602062005d2083398151915264010000000062003fd76200023382021704565b905090565b6200016764010000000062000125810204565b60408051808201909152601881527f494e49545f414c52454144595f494e495449414c495a454400000000000000006020820152901562000206576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252838181518152602001915080519060200190808383600083811015620000d0578181015183820152602001620000b6565b506200023060008051602062005d2083398151915282640100000000620032176200023782021704565b50565b5490565b9055565b615ad5806200024b6000396000f3006080604052600436106102be5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166301aab00c81146102c357806301ffc9a7146102ea5780630803fac0146103385780630a0932da1461034d578063143b8f271461037957806318fbc289146103915780631e9ae2f4146103a65780632914b9bd146103c957806332f0a3b51461043e57806340b43701146104535780634b4e45cf146104b75780635049ece9146104cc57806356fefc55146104f457806357d0c1791461050957806358c56109146105425780635a55c1f0146105635780635e754d55146106205780635eb243321461064c5780636207c9e01461066e5780636ab6802b146106835780636ecc064e1461069b57806374804316146106bd57806376740b5b146106e757806376f98942146106ff5780637ad267b6146107145780637c1d0b871461072c5780637e7db6e11461074e5780637f439ce01461076f57806380afdea81461079657806382dfcbaf146107ab5780638a11804e146107db5780638b3dd749146107f05780638f911dca1461080557806390ab08851461081a578063955131ed14610841578063979f5b4c14610865578063980704cf1461087a5780639d4941d8146108d1578063a1658fad146108f2578063a479e50814610959578063a7542d551461096e578063acec48f014610986578063b0863063146109d8578063b2deae83146109f0578063bca60cf514610a12578063be2c64d414610a27578063c0774df314610a3c578063c2e687f514610a69578063c9d27afe14610a8b578063cc63604a14610aa8578063cdb2867b14610ac0578063d35424fa14610ae4578063d4aae0c414610af9578063de4796ed14610b0e578063de4f634714610b23578063f83a151514610b38578063fc0c546a14610b50578063fc157cb414610b65578063fd64eccb14610b7a575b600080fd5b3480156102cf57600080fd5b506102d8610b8f565b60408051918252519081900360200190f35b3480156102f657600080fd5b506103247fffffffff0000000000000000000000000000000000000000000000000000000060043516610bb3565b604080519115158252519081900360200190f35b34801561034457600080fd5b50610324610c10565b34801561035957600080fd5b506102d86024600480358281019290820135918135918201910135610c39565b34801561038557600080fd5b50610324600435610da5565b34801561039d57600080fd5b506102d8610ddd565b3480156103b257600080fd5b506103c7600160a060020a0360043516610de2565b005b3480156103d557600080fd5b506040805160206004803580820135601f8101849004840285018401909552848452610422943694929360249392840191908190840183828082843750949750610fc39650505050505050565b60408051600160a060020a039092168252519081900360200190f35b34801561044a57600080fd5b506104226110c2565b34801561045f57600080fd5b5061046b600435611153565b6040805167ffffffffffffffff988916815296881660208801529487168686015292861660608601529085166080850152841660a084015290921660c082015290519081900360e00190f35b3480156104c357600080fd5b506102d86111e0565b3480156104d857600080fd5b506103c767ffffffffffffffff600435811690602435166111e6565b34801561050057600080fd5b506102d86112ce565b34801561051557600080fd5b5061051e6112f2565b6040518082600281111561052e57fe5b60ff16815260200191505060405180910390f35b34801561054e57600080fd5b506103c7600160a060020a03600435166112f7565b34801561056f57600080fd5b5061057b6004356113ea565b604080518e8152602081018e90529081018c905267ffffffffffffffff808c1660608301528a16608082015260a081018960038111156105b757fe5b60ff168152602081018990526040810188905267ffffffffffffffff80881660608301528681166080830152851660a082015260c0018360028111156105f957fe5b60ff1681526020810192909252506040805191829003019c509a5050505050505050505050f35b34801561062c57600080fd5b506103c760246004803582810192908201359181359182019101356114f5565b34801561065857600080fd5b506103c767ffffffffffffffff6004351661161d565b34801561067a57600080fd5b506102d86116ff565b34801561068f57600080fd5b50610324600435611723565b3480156106a757600080fd5b506103c767ffffffffffffffff60043516611770565b3480156106c957600080fd5b506103c760048035906024803515159160443591820191013561184c565b3480156106f357600080fd5b50610324600435611b33565b34801561070b57600080fd5b506102d8611b7e565b34801561072057600080fd5b506103c7600435611ba2565b34801561073857600080fd5b506103c767ffffffffffffffff60043516611c4a565b34801561075a57600080fd5b50610324600160a060020a0360043516611d26565b34801561077b57600080fd5b506103c7600435602435600160a060020a0360443516611d2c565b3480156107a257600080fd5b506102d8611dd8565b3480156107b757600080fd5b50610324600480359060248035908101910135600160a060020a0360443516611e08565b3480156107e757600080fd5b506102d8611f3e565b3480156107fc57600080fd5b506102d8611f62565b34801561081157600080fd5b506102d8611f8d565b34801561082657600080fd5b50610324600160a060020a0360043581169060243516611fb1565b34801561084d57600080fd5b506103c7600480359060248035908101910135612053565b34801561087157600080fd5b506102d8612268565b34801561088657600080fd5b5061089e600435600160a060020a036024351661228c565b604051808360028111156108ae57fe5b60ff168152600160a060020a039092166020830152506040805191829003019150f35b3480156108dd57600080fd5b506103c7600160a060020a03600435166122bc565b3480156108fe57600080fd5b506040805160206004604435818101358381028086018501909652808552610324958335600160a060020a031695602480359636969560649593949201929182918501908490808284375094975061254b9650505050505050565b34801561096557600080fd5b506104226126b4565b34801561097a57600080fd5b50610324600435612769565b34801561099257600080fd5b506103c7600160a060020a036004351667ffffffffffffffff60243581169060443581169060643581169060843581169060a43581169060c43581169060e43516612780565b3480156109e457600080fd5b506103c7600435612895565b3480156109fc57600080fd5b506103c767ffffffffffffffff6004351661293a565b348015610a1e57600080fd5b50610422612a16565b348015610a3357600080fd5b506102d8612a20565b348015610a4857600080fd5b5061032460048035600160a060020a03169060248035908101910135612a44565b348015610a7557600080fd5b506103c767ffffffffffffffff60043516612a80565b348015610a9757600080fd5b506103c76004356024351515612b5c565b348015610ab457600080fd5b50610324600435612c08565b348015610acc57600080fd5b50610324600435600160a060020a0360243516612c1b565b348015610af057600080fd5b506102d8612c2f565b348015610b0557600080fd5b50610422612c53565b348015610b1a57600080fd5b50610324612c7e565b348015610b2f57600080fd5b506102d8612c91565b348015610b4457600080fd5b506103c7600435612c97565b348015610b5c57600080fd5b50610422612d3c565b348015610b7157600080fd5b506102d8612d4b565b348015610b8657600080fd5b50610324612d57565b7fbc5d8ebc0830a2fed8649987b8263de1397b7fa892f3b87dc2d8cad35c691f8681565b6000610bbe82612d5c565b80610c0a57507fffffffff0000000000000000000000000000000000000000000000000000000082167ff3d3bb5100000000000000000000000000000000000000000000000000000000145b92915050565b600080610c1b611f62565b90508015801590610c33575080610c30612db5565b10155b91505090565b60007fe7dcd7275292e064d090fbc5f3bd7995be23b502c1fed5cd94cfddbbdcd32bbc610c6533612db9565b610c7033838361254b565b60408051808201909152600f81527f4150505f415554485f4641494c454400000000000000000000000000000000006020820152901515610d325760405160e560020a62461bcd0281526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610cf7578181015183820152602001610cdf565b50505050905090810190601f168015610d245780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50610d9a87878080601f0160208091040260200160405190810160405280939291908181526020018383808284375050604080516020601f8d018190048102820181019092528b815294508b93508a9250829150840183828082843750612dcd945050505050565b979650505050505050565b6000806000610db38461312a565b600481015460009081526002602052604090209092509050610dd582826131c8565b949350505050565b604681565b604080516000808252602082019092527f8dad640ab1b088990c972676ada708447affc660890ec9fc9a5483241c49f03690610e21903390839061254b565b60408051808201909152600f81527f4150505f415554485f4641494c454400000000000000000000000000000000006020820152901515610ea75760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610cf7578181015183820152602001610cdf565b50610eb06131ec565b9150600160a060020a038216158015610ed15750600160a060020a03831615155b6040805190810160405280602081526020017f44495350555441424c455f41475245454d454e545f53544154455f494e56414c815250901515610f595760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610cf7578181015183820152602001610cdf565b50610f8a7f6dbe80ccdeafbf5f3fff5738b224414f85e9370da36f61bf21c65159df7409e98463ffffffff61321716565b604051600160a060020a038416907f64d4a120bf365888d0b3f10e4d7deb8415919eaad62ee6fb5f5619082d6f641890600090a2505050565b6000610fcd6126b4565b600160a060020a03166304bf2a7f836040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561104457818101518382015260200161102c565b50505050905090810190601f1680156110715780820380516001836020036101000a031916815260200191505b5092505050602060405180830381600087803b15801561109057600080fd5b505af11580156110a4573d6000803e3d6000fd5b505050506040513d60208110156110ba57600080fd5b505192915050565b60006110cc612c53565b600160a060020a03166332f0a3b56040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561112257600080fd5b505af1158015611136573d6000803e3d6000fd5b505050506040513d602081101561114c57600080fd5b5051905090565b6000806000806000806000806111688961321b565b805460019091015467ffffffffffffffff8083169c6801000000000000000080850483169d5070010000000000000000000000000000000080860484169d50780100000000000000000000000000000000000000000000000090950483169b508383169a508304821698509290910416945092505050565b60015481565b60007f4f885d966bcd49734218a6e280d58c840b86e8cc13610b21ebd46f0b1da362c261122067ffffffffffffffff8086169085166132b9565b61122b33838361254b565b60408051808201909152600f81527f4150505f415554485f4641494c4544000000000000000000000000000000000060208201529015156112b15760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610cf7578181015183820152602001610cdf565b506112ba613314565b92506112c783868661344b565b5050505050565b7f5e3a3edc315e366a0cc5c94ca94a8f9bbc2f1feebb2ef7704bfefcff0cdc4ee781565b600290565b6112ff610c10565b60408051808201909152601481527f494e49545f4e4f545f494e495449414c495a454400000000000000000000000060208201529015156113855760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610cf7578181015183820152602001610cdf565b5033600081815260056020526040808220805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03861690811790915590519092917f3b734cbbc757d28ca321c79f67fd0b3c625ca41fc7aa1aa9cca32e6d6fd0f81091a350565b6000806000806000806000806000806000806000806114088f61312a565b905080600001549d5080600101549c5080600201549b508060030160009054906101000a900467ffffffffffffffff169a508060030160089054906101000a900467ffffffffffffffff1699508060030160109054906101000a900460ff16985080600401549750806005015496508060060160009054906101000a900467ffffffffffffffff1695508060060160089054906101000a900467ffffffffffffffff1694508060060160109054906101000a900467ffffffffffffffff1693508060060160189054906101000a900460ff169250806007015491505091939597999b9d90929496989a9c50565b61152f3385858080601f0160208091040260200160405190810160405280939291908181526020018383808284375061356b945050505050565b60408051808201909152601581527f564f54494e475f43414e4e4f545f464f5257415244000000000000000000000060208201529015156115b55760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610cf7578181015183820152602001610cdf565b506112c784848080601f0160208091040260200160405190810160405280939291908181526020018383808284375050604080516020601f8a018190048102820181019092528881529450889350879250829150840183828082843750612dcd945050505050565b60007fa3f675280fb3c54662067f92659ca1ee3ef7c1a7f2a6ff03a5c4228aa26b6a8261165367ffffffffffffffff84166135c8565b61165e33838361254b565b60408051808201909152600f81527f4150505f415554485f4641494c4544000000000000000000000000000000000060208201529015156116e45760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610cf7578181015183820152602001610cdf565b506116ed613314565b92506116f98385613609565b50505050565b7ff3a5f71f3cb50dae9454dd13cdf0fd1b559f7e20d63c08902592486e6d460c9081565b60008061172f8361312a565b600681015490915067ffffffffffffffff161580156117675750600481015460009081526002602052604090206117679082906131c8565b91505b50919050565b60007f5e3a3edc315e366a0cc5c94ca94a8f9bbc2f1feebb2ef7704bfefcff0cdc4ee76117a667ffffffffffffffff84166135c8565b6117b133838361254b565b60408051808201909152600f81527f4150505f415554485f4641494c4544000000000000000000000000000000000060208201529015156118375760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610cf7578181015183820152602001610cdf565b50611840613314565b92506116f98385613727565b6040805180820190915260208082527f564f54494e475f44454c4547415445535f455843454544535f4d41585f4c454e908201526000908190819060468511156118db5760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610cf7578181015183820152602001610cdf565b506118e58761312a565b92506118f0836137a6565b60408051808201909152601d81527f564f54494e475f504153545f5245505f564f54494e475f57494e444f5700000060208201529015156119765760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610cf7578181015183820152602001610cdf565b50600091505b83821015611b2a5784848381811061199057fe5b90506020020135600160a060020a031690506119ac83826137dd565b60408051808201909152601281527f564f54494e475f43414e4e4f545f564f544500000000000000000000000000006020820152901515611a325760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610cf7578181015183820152602001610cdf565b50611a3d813361389d565b60408051808201909152601981527f564f54494e475f4e4f545f524550524553454e544154495645000000000000006020820152901515611ac35760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610cf7578181015183820152602001610cdf565b50611ace83826138bf565b1515611ae657611ae183888884336138e0565b611b1f565b6040513390600160a060020a0383169089907fbf94009f3cb6ffcb2eea43b502ff43295b654a96dfcdc68592c90397148ec25690600090a45b60019091019061197c565b50505050505050565b600080611b3f8361312a565b9050611b4a81613b4a565b80611b595750611b5981613b7c565b8015611767575060048101546000908152600260205260409020611767908290613b85565b7f59ba415d96e104e6483d76b79d9cd09941d04e229adcd62d7dc672c93975a19d81565b33611bab6131ec565b600160a060020a0316146040805190810160405280601f81526020017f44495350555441424c455f53454e4445525f4e4f545f41475245454d454e5400815250901515611c3d5760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610cf7578181015183820152602001610cdf565b50611c4781613bac565b50565b60007ff3a5f71f3cb50dae9454dd13cdf0fd1b559f7e20d63c08902592486e6d460c90611c8067ffffffffffffffff84166135c8565b611c8b33838361254b565b60408051808201909152600f81527f4150505f415554485f4641494c454400000000000000000000000000000000006020820152901515611d115760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610cf7578181015183820152602001610cdf565b50611d1a613314565b92506116f98385613cfe565b50600190565b33611d356131ec565b600160a060020a0316146040805190810160405280601f81526020017f44495350555441424c455f53454e4445525f4e4f545f41475245454d454e5400815250901515611dc75760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610cf7578181015183820152602001610cdf565b50611dd3838383613eac565b505050565b6000611e037fd625496217aa6a3453eecb9c3489dc5a53e6c67b444329ea2b2cbc9ff547639b613fd7565b905090565b6040805180820190915260208082527f564f54494e475f44454c4547415445535f455843454544535f4d41585f4c454e908201526000908190819081906046871115611e995760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610cf7578181015183820152602001610cdf565b50611ea38861312a565b9250611eae836137a6565b1515611ebd5760009350611f33565b600091505b85821015611f2e57868683818110611ed657fe5b90506020020135600160a060020a03169050611ef283826137dd565b1580611f055750611f03818661389d565b155b80611f155750611f1583826138bf565b15611f235760009350611f33565b600190910190611ec2565b600193505b505050949350505050565b7f4f885d966bcd49734218a6e280d58c840b86e8cc13610b21ebd46f0b1da362c281565b6000611e037febb05b386a8d34882b8711d156f463690983dc47815980fb82aeeff1aa43579e613fd7565b7fef025787d7cd1a96d9014b8dc7b44899b8c1350859fb9e1e05f5a546dd65158d81565b6000611fbb610c10565b60408051808201909152601481527f494e49545f4e4f545f494e495449414c495a454400000000000000000000000060208201529015156120415760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610cf7578181015183820152602001610cdf565b5061204c838361389d565b9392505050565b600061205e8461312a565b905061206981613fdf565b60408051808201909152601581527f564f54494e475f43414e4e4f545f45584543555445000000000000000000000060208201529015156120ef5760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610cf7578181015183820152602001610cdf565b50828260405180838380828437604080519390910183900383206007880154848301909252601f84527f564f54494e475f494e56414c49445f455845435554494f4e5f53435249505400602085015292955090911492506121989150505760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610cf7578181015183820152602001610cdf565b5060038101805470ff00000000000000000000000000000000191670030000000000000000000000000000000017905560058101546121d69061404a565b61223683838080601f01602080910402602001604051908101604052809392919081815260200183838082843750506040805160008082526020820190925294509250612221915050565b506040805160008152602081019091526140d4565b5060405184907fbf8e2b108bb7c980e08903a8a46527699d5e84905a082d56dacb4150725c8cab90600090a250505050565b7fa3f675280fb3c54662067f92659ca1ee3ef7c1a7f2a6ff03a5c4228aa26b6a8281565b600080600061229a8561312a565b90506122a68185614703565b92506122b28185614725565b9150509250929050565b60008060006122ca84611d26565b60408051808201909152601281527f5245434f5645525f444953414c4c4f574544000000000000000000000000000060208201529015156123505760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610cf7578181015183820152602001610cdf565b506123596110c2565b925061236483614778565b60408051808201909152601a81527f5245434f5645525f5641554c545f4e4f545f434f4e545241435400000000000060208201529015156123ea5760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610cf7578181015183820152602001610cdf565b50600160a060020a038416151561243b5760405130319250600160a060020a0384169083156108fc029084906000818181858888f19350505050158015612435573d6000803e3d6000fd5b506124fa565b5082612456600160a060020a0382163063ffffffff61479e16565b9150612472600160a060020a038216848463ffffffff6148b316565b60408051808201909152601d81527f5245434f5645525f544f4b454e5f5452414e534645525f4641494c454400000060208201529015156124f85760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610cf7578181015183820152602001610cdf565b505b83600160a060020a031683600160a060020a03167f596caf56044b55fb8c4ca640089bbc2b63cae3e978b851f5745cbb7c5b288e02846040518082815260200191505060405180910390a350505050565b600080612556610c10565b151561256557600091506126ac565b61256d612c53565b9050600160a060020a038116151561258857600091506126ac565b80600160a060020a031663fdef91068630876125a38861493e565b6040517c010000000000000000000000000000000000000000000000000000000063ffffffff8716028152600160a060020a03808616600483019081529085166024830152604482018490526080606483019081528351608484015283519192909160a490910190602085019080838360005b8381101561262e578181015183820152602001612616565b50505050905090810190601f16801561265b5780820380516001836020036101000a031916815260200191505b5095505050505050602060405180830381600087803b15801561267d57600080fd5b505af1158015612691573d6000803e3d6000fd5b505050506040513d60208110156126a757600080fd5b505191505b509392505050565b6000806126bf612c53565b604080517fbe00bbd80000000000000000000000000000000000000000000000000000000081527fd6f028ca0e8edb4a8c9757ca4fdccab25fa1e0317da1188108f7d2dee14902fb60048201527fddbcfd564f642ab5627cf68b9b7d374fb4f8a36e941a75d89c87998cef03bd6160248201529051600160a060020a03929092169163be00bbd8916044808201926020929091908290030181600087803b15801561109057600080fd5b6000806127758361312a565b9050611767816137a6565b600061278a614948565b61279389614778565b60408051808201909152601981527f564f54494e475f544f4b454e5f4e4f545f434f4e54524143540000000000000060208201529015156128195760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610cf7578181015183820152602001610cdf565b506000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a038b1617905561284a614a10565b5090506128578189614a63565b6128618188613cfe565b61286b8187613609565b6128758186614b49565b61288081858561344b565b61288a8183613727565b505050505050505050565b3361289e6131ec565b600160a060020a0316146040805190810160405280601f81526020017f44495350555441424c455f53454e4445525f4e4f545f41475245454d454e54008152509015156129305760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610cf7578181015183820152602001610cdf565b50611c4781614c62565b60007f59ba415d96e104e6483d76b79d9cd09941d04e229adcd62d7dc672c93975a19d61297067ffffffffffffffff84166135c8565b61297b33838361254b565b60408051808201909152600f81527f4150505f415554485f4641494c454400000000000000000000000000000000006020820152901515612a015760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610cf7578181015183820152602001610cdf565b50612a0a613314565b92506116f98385614b49565b6000611e036131ec565b7fe7dcd7275292e064d090fbc5f3bd7995be23b502c1fed5cd94cfddbbdcd32bbc81565b6000610dd58484848080601f0160208091040260200160405190810160405280939291908181526020018383808284375061356b945050505050565b60007fbc5d8ebc0830a2fed8649987b8263de1397b7fa892f3b87dc2d8cad35c691f86612ab667ffffffffffffffff84166135c8565b612ac133838361254b565b60408051808201909152600f81527f4150505f415554485f4641494c454400000000000000000000000000000000006020820152901515612b475760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610cf7578181015183820152602001610cdf565b50612b50613314565b92506116f98385614a63565b6000612b678361312a565b9050612b738133614c6b565b60408051808201909152601281527f564f54494e475f43414e4e4f545f564f544500000000000000000000000000006020820152901515612bf95760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610cf7578181015183820152602001610cdf565b50611dd38184843360006138e0565b6000610c0a612c168361312a565b613fdf565b600061204c612c298461312a565b83614c6b565b7f8dad640ab1b088990c972676ada708447affc660890ec9fc9a5483241c49f03681565b6000611e037f4172f0f7d2289153072b0a6ca36959e0cbe2efc3afe50fc81636caa96338137b613fd7565b6000600019612c8b611f62565b14905090565b60035481565b33612ca06131ec565b600160a060020a0316146040805190810160405280601f81526020017f44495350555441424c455f53454e4445525f4e4f545f41475245454d454e5400815250901515612d325760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610cf7578181015183820152602001610cdf565b50611c4781614cc7565b600054600160a060020a031681565b670de0b6b3a764000081565b600190565b6000612d6782614e16565b80610c0a5750507fffffffff00000000000000000000000000000000000000000000000000000000167f54053e6c000000000000000000000000000000000000000000000000000000001490565b4390565b6060610c0a82600160a060020a03166135c8565b6000806000806001612ddd614e60565b60008054604080517f981b24d00000000000000000000000000000000000000000000000000000000081529490930367ffffffffffffffff811660048601529251929650600160a060020a03169263981b24d09260248083019360209383900390910190829087803b158015612e5257600080fd5b505af1158015612e66573d6000803e3d6000fd5b505050506040513d6020811015612e7c57600080fd5b505160408051808201909152601c81527f564f54494e475f4e4f5f544f54414c5f564f54494e475f504f57455200000000602082015290925060008311612f085760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610cf7578181015183820152602001610cdf565b50506003805460018101909155600081815260046020526040902060028101839055909350612f35614e72565b60038201805467ffffffffffffffff191667ffffffffffffffff928316176fffffffffffffffff0000000000000000191668010000000000000000928616929092029190911770ff0000000000000000000000000000000019169055612f99614e7f565b60048201556040518651879190819060208401908083835b60208310612fd05780518252601f199092019160209182019101612fb1565b5181516020939093036101000a6000190180199091169216919091179052604051920182900390912060078501555061300e91508590508633614e89565b816005018190555033600160a060020a0316847fd7bf7ccb2e4cfc6f0a0a257caed8badff9e8edf074f4d8d53d90cac9c515a6838789604051808060200180602001838103835285818151815260200191508051906020019080838360005b8381101561308557818101518382015260200161306d565b50505050905090810190601f1680156130b25780820380516001836020036101000a031916815260200191505b50838103825284518152845160209182019186019080838360005b838110156130e55781810151838201526020016130cd565b50505050905090810190601f1680156131125780820380516001836020036101000a031916815260200191505b5094505050505060405180910390a350505092915050565b60035460408051808201909152600e81527f564f54494e475f4e4f5f564f5445000000000000000000000000000000000000602082015260009183106131b55760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610cf7578181015183820152602001610cdf565b5050600090815260046020526040902090565b60006131d383613b4a565b801561204c57506131e48383613b85565b159392505050565b6000611e037f6dbe80ccdeafbf5f3fff5738b224414f85e9370da36f61bf21c65159df7409e9613fd7565b9055565b60015460408051808201909152601d81527f564f54494e475f53455454494e475f444f45535f4e4f545f4558495354000000602082015260009183106132a65760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610cf7578181015183820152602001610cdf565b5050600090815260026020526040902090565b6040805160028082526060808301845292602083019080388339019050509050828160008151811015156132e957fe5b60209081029091010152805182908290600190811061330457fe5b6020908102909101015292915050565b600080600080613322614a10565b925092506133326001830361321b565b8054845467ffffffffffffffff1990811667ffffffffffffffff9283161780875583546801000000000000000090819004841681026fffffffffffffffff000000000000000019928316178089558554700100000000000000000000000000000000908190048616810277ffffffffffffffff000000000000000000000000000000001992831617808b55875478010000000000000000000000000000000000000000000000009081900488160277ffffffffffffffffffffffffffffffffffffffffffffffff909116178a5560018088018054918c0180549097169188169190911780875581548590048816909402939094169290921780855592548290049094160292169190911790559293508392905050505090565b825460408051808201909152601f81527f564f54494e475f494e56414c49445f51554945545f454e445f504552494f440060208201529067ffffffffffffffff90811690841611156134e25760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610cf7578181015183820152602001610cdf565b5060018301805467ffffffffffffffff191667ffffffffffffffff8481169182176fffffffffffffffff00000000000000001916680100000000000000009185169182021790925560408051918252602082019290925281517fa194c49d80327ca6b93c94de63248b209eabfdf2911b0b258286473d93df92a4929181900390910190a1505050565b6000806135766131ec565b9050600160a060020a038116158015906135be57506135be847fe7dcd7275292e064d090fbc5f3bd7995be23b502c1fed5cd94cfddbbdcd32bbc6135b982612db9565b61254b565b91505b5092915050565b60408051600180825281830190925260609160208083019080388339019050509050818160008151811015156135fa57fe5b60209081029091010152919050565b815460408051808201909152601c81527f564f54494e475f4348414e47455f51554f52554d5f544f4f5f4249470000000060208201529067ffffffffffffffff68010000000000000000909104811690831611156136ac5760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610cf7578181015183820152602001610cdf565b50815467ffffffffffffffff8216700100000000000000000000000000000000810277ffffffffffffffff000000000000000000000000000000001990921691909117835560408051918252517f3172f2e9273c729c2a47cc8bf7e7f18506e3e3035126d562602bd2155bc78a509181900360200190a15050565b60018201805467ffffffffffffffff8316700100000000000000000000000000000000810277ffffffffffffffff00000000000000000000000000000000199092169190911790915560408051918252517fa917ba4499a7580dd381d63de169b0c5bad43e872db28bbac0f06a1e0047e75d9181900360200190a15050565b60006137b182613b4a565b8015610c0a5750600482015460009081526002602052604090206137d6908390614f7c565b1592915050565b600080546003840154604080517f4ee2cd7e000000000000000000000000000000000000000000000000000000008152600160a060020a0386811660048301526801000000000000000090930467ffffffffffffffff166024820152905184939290921691634ee2cd7e9160448082019260209290919082900301818787803b15801561386957600080fd5b505af115801561387d573d6000803e3d6000fd5b505050506040513d602081101561389357600080fd5b5051119392505050565b600160a060020a03918216600090815260056020526040902054821691161490565b6000806138cc8484614703565b60028111156138d757fe5b14159392505050565b6004850154600090815260026020526040812090808080806139028b87615055565b15613912576139128b878c61511c565b8a5460018c01546000805460038f0154604080517f4ee2cd7e000000000000000000000000000000000000000000000000000000008152600160a060020a038f811660048301526801000000000000000090930467ffffffffffffffff1660248201529051959a509398501692634ee2cd7e926044808201936020939283900390910190829087803b1580156139a757600080fd5b505af11580156139bb573d6000803e3d6000fd5b505050506040513d60208110156139d157600080fd5b5051600160a060020a038916600090815260088d01602052604090208054919450925060ff1690506001816002811115613a0757fe5b1415613a2457613a1d858463ffffffff6152b216565b9450613a4b565b6002816002811115613a3257fe5b1415613a4b57613a48848463ffffffff6152b216565b93505b8815613a6857613a61858463ffffffff61534616565b9450613a7b565b613a78848463ffffffff61534616565b93505b848b5560018b01849055613a8e896153d4565b8254839060ff19166001836002811115613aa457fe5b02179055508154600160a060020a0380891661010081027fffffffffffffffffffffff0000000000000000000000000000000000000000ff9093169290921784558916908b907f1c3607eb5a3925b4a4cae4e90a9345b2a2955daeac124e761d05e5288df11963908c9015613b19578a613b1b565b8b5b604080519215158352600160a060020a0390911660208301528051918290030190a35050505050505050505050565b6000805b600383810154700100000000000000000000000000000000900460ff1690811115613b7557fe5b1492915050565b60006003613b4e565b6000613b9183836153ea565b67ffffffffffffffff16613ba3615459565b10159392505050565b6000613bb78261312a565b9050613bc28161545d565b60408051808201909152601681527f564f54494e475f564f54455f4e4f545f504155534544000000000000000000006020820152901515613c485760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610cf7578181015183820152602001610cdf565b5060038101805470ff00000000000000000000000000000000191690556006810154613c969067ffffffffffffffff16613c80614e72565b67ffffffffffffffff169063ffffffff61546616565b60068201805467ffffffffffffffff9290921668010000000000000000026fffffffffffffffff00000000000000001990921691909117905560405182907f91f598d24ad2394e84049626d590e9a75dc54508a6e7bf88895d335eb9f395dd90600090a25050565b815460408051808201909152601f81527f564f54494e475f4348414e47455f535550504f52545f544f4f5f534d414c4c0060208201529067ffffffffffffffff808416700100000000000000000000000000000000909204161115613da85760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610cf7578181015183820152602001610cdf565b5060408051808201909152601d81527f564f54494e475f4348414e47455f535550504f52545f544f4f5f4249470000006020820152670de0b6b3a764000067ffffffffffffffff831610613e415760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610cf7578181015183820152602001610cdf565b50815467ffffffffffffffff82166801000000000000000081026fffffffffffffffff00000000000000001990921691909117835560408051918252517f903b617f7f36eb047a29b89d1bf7885fdae31d250c3320fccf11d045c11b396e9181900360200190a15050565b6000613eb78461312a565b9050613ec281613b4a565b60408051808201909152601881527f564f54494e475f43414e4e4f545f50415553455f564f544500000000000000006020820152901515613f485760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610cf7578181015183820152602001610cdf565b5060038101805470ff000000000000000000000000000000001916700100000000000000000000000000000000179055613f80614e72565b60068201805467ffffffffffffffff191667ffffffffffffffff92909216919091179055604051839085907f0acb8ef0fdffe8e5404a8511f8f4c38ed4bd1643888377569fc2d50d5ee8d83a90600090a350505050565b5490565b5490565b600080613feb83613b4a565b1515613ffa576000915061176a565b50600482015460009081526002602052604090206140188382613b85565b1515614027576000915061176a565b61403183826154ff565b1515614040576000915061176a565b6117678382615561565b60006140546155e0565b905080600160a060020a0316633b92da72836040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050600060405180830381600087803b1580156140b857600080fd5b505af11580156140cc573d6000803e3d6000fd5b505050505050565b60606000806060806140e4610c10565b60408051808201909152601481527f494e49545f4e4f545f494e495449414c495a4544000000000000000000000000602082015290151561416a5760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610cf7578181015183820152602001610cdf565b50600080614176612c53565b9150614180611dd8565b905061418b8a610fc3565b60408051808201909152601b81527f45564d52554e5f4558454355544f525f554e415641494c41424c4500000000006020820152909650600160a060020a038716151561421d5760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610cf7578181015183820152602001610cdf565b506040516060602482019081528b5160848301528b517f279cea3500000000000000000000000000000000000000000000000000000000975087928d928d928d9282916044820191606481019160a490910190602089019080838360005b8381101561429357818101518382015260200161427b565b50505050905090810190601f1680156142c05780820380516001836020036101000a031916815260200191505b50848103835286518152865160209182019188019080838360005b838110156142f35781810151838201526020016142db565b50505050905090810190601f1680156143205780820380516001836020036101000a031916815260200191505b508481038252855181528551602091820191808801910280838360005b8381101561435557818101518382015260200161433d565b505050509050019650505050505050604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050509350600080855160208701895af4604051935080801561444357603f3d1180156143f85760203d03806020883e860160405261443d565b60e560020a62461bcd02865260206004870152601e60248701527f45564d52554e5f4558454355544f525f494e56414c49445f52455455524e00006044870152606486fd5b5061444c565b3d6000863e3d85fd5b505085600160a060020a03167f5229a5dba83a54ae8cb5b51bdd6de9474cacbe9dd332f5185f3a4f4f2e3f4ad98b8b8660405180806020018060200180602001848103845287818151815260200191508051906020019080838360005b838110156144c15781810151838201526020016144a9565b50505050905090810190601f1680156144ee5780820380516001836020036101000a031916815260200191505b50848103835286518152865160209182019188019080838360005b83811015614521578181015183820152602001614509565b50505050905090810190601f16801561454e5780820380516001836020036101000a031916815260200191505b50848103825285518152855160209182019187019080838360005b83811015614581578181015183820152602001614569565b50505050905090810190601f1680156145ae5780820380516001836020036101000a031916815260200191505b50965050505050505060405180910390a282965081600160a060020a03166145d4612c53565b600160a060020a0316146040805190810160405280601f81526020017f45564d52554e5f50524f5445435445445f53544154455f4d4f444946494544008152509015156146665760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610cf7578181015183820152602001610cdf565b5080614670611dd8565b60408051808201909152601f81527f45564d52554e5f50524f5445435445445f53544154455f4d4f44494649454400602082015291146146f55760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610cf7578181015183820152602001610cdf565b505050505050509392505050565b600160a060020a03166000908152600891909101602052604090205460ff1690565b60008061473284846138bf565b151561474157600091506135c1565b50600160a060020a038083166000908152600885016020526040902054610100900416801561477057806135be565b509092915050565b600080600160a060020a0383161515614794576000915061176a565b50506000903b1190565b60408051600160a060020a0383166024808301919091528251808303909101815260449091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f70a0823100000000000000000000000000000000000000000000000000000000179052600090818061481e868461567d565b60408051808201909152601c81527f534146455f4552435f32305f42414c414e43455f524556455254454400000000602082015291935091508215156148a95760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610cf7578181015183820152602001610cdf565b5095945050505050565b60408051600160a060020a038416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb0000000000000000000000000000000000000000000000000000000017905260009061493585826156ae565b95945050505050565b8051602002815290565b614950611f62565b60408051808201909152601881527f494e49545f414c52454144595f494e495449414c495a45440000000000000000602082015290156149d55760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610cf7578181015183820152602001610cdf565b50614a0e6149e1612db5565b7febb05b386a8d34882b8711d156f463690983dc47815980fb82aeeff1aa43579e9063ffffffff61321716565b565b60018054808201909155600081815260026020908152604091829020825184815292519093927f011e4fd6859d1a60bf9566bc5400b22aa9950bb088178451fbb9ff71a9410b3692908290030190a19091565b60408051808201909152601581527f564f54494e475f564f54455f54494d455f5a45524f00000000000000000000006020820152600067ffffffffffffffff831611614af45760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610cf7578181015183820152602001610cdf565b50815467ffffffffffffffff821667ffffffffffffffff199091168117835560408051918252517f776dcd10c15e7a1bd4fbb6c824d2a80fa8a40a3a6b401fddc678696b7fb06abe9181900360200190a15050565b815460408051808201909152601f81527f564f54494e475f494e56414c49445f444c47545f564f54455f504552494f440060208201529067ffffffffffffffff9081169083161115614be05760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610cf7578181015183820152602001610cdf565b50815467ffffffffffffffff82167801000000000000000000000000000000000000000000000000810277ffffffffffffffffffffffffffffffffffffffffffffffff90921691909117835560408051918252517f2c2d753fade2041a1abb2972579386f82ae7d7256809c4d44506c4c152fd01eb9181900360200190a15050565b611c4781614cc7565b60048201546000908152600260205260408120614c8884826131c8565b8015614c995750614c9984846137dd565b80156135be575082600160a060020a0316614cb48585614725565b600160a060020a03161415949350505050565b6000614cd28261312a565b9050614cdd8161545d565b60408051808201909152601681527f564f54494e475f564f54455f4e4f545f504155534544000000000000000000006020820152901515614d635760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610cf7578181015183820152602001610cdf565b5060038101805470ff0000000000000000000000000000000019167002000000000000000000000000000000001790556006810154614dae9067ffffffffffffffff16613c80614e72565b60068201805467ffffffffffffffff9290921668010000000000000000026fffffffffffffffff00000000000000001990921691909117905560405182907f342b22decf184652237398af8d345da7d9743ae2e1c4122e7c32899c6a81f9a990600090a25050565b7fffffffff0000000000000000000000000000000000000000000000000000000081167f01ffc9a70000000000000000000000000000000000000000000000000000000014919050565b6000611e03614e6d612db5565b615700565b6000611e03614e6d615459565b6001546000190190565b600080614e946155e0565b905080600160a060020a031663e95fdd1d8686866040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808481526020018060200183600160a060020a0316600160a060020a03168152602001828103825284818151815260200191508051906020019080838360005b83811015614f2e578181015183820152602001614f16565b50505050905090810190601f168015614f5b5780820380516001836020036101000a031916815260200191505b50945050505050602060405180830381600087803b15801561267d57600080fd5b805460038301546000918291829182918291614fc79167ffffffffffffffff90811691780100000000000000000000000000000000000000000000000090041663ffffffff61579916565b600688015490945067ffffffffffffffff808216945068010000000000000000909104169150821580159061500f57508367ffffffffffffffff168367ffffffffffffffff16105b6150195783615033565b61503367ffffffffffffffff85168363ffffffff61579916565b90508067ffffffffffffffff16615048615459565b1015979650505050505050565b6000806000806000806150688888615834565b600188015490955061508d9067ffffffffffffffff808816911663ffffffff61546616565b600689015490945067ffffffffffffffff80821694506801000000000000000090910416915082158015906150d557508367ffffffffffffffff168367ffffffffffffffff16105b6150df57836150f9565b6150f967ffffffffffffffff85168363ffffffff61579916565b90508067ffffffffffffffff1661510e615459565b101598975050505050505050565b60006151288484615561565b9050600060068501547801000000000000000000000000000000000000000000000000900460ff16600281111561515b57fe5b14156151c25761516a816153d4565b6006850180547fffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffffff1678010000000000000000000000000000000000000000000000008360028111156151b857fe5b02179055506116f9565b6151cc848461585b565b67ffffffffffffffff166151de615459565b106116f9576001830154600685015461522b9170010000000000000000000000000000000090910467ffffffffffffffff908116916801000000000000000090041663ffffffff61579916565b60068501805467ffffffffffffffff929092167001000000000000000000000000000000000277ffffffffffffffff0000000000000000000000000000000019909216919091179055604080518215158152905183917fa5e552089c71c91761a836c6c6b8d6ccd0fb1ee4a7362fc3835a8c1c7aafdc1f919081900360200190a250505050565b60408051808201909152601281527f4d4154485f5355425f554e444552464c4f570000000000000000000000000000602082015260009081908484111561533e5760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610cf7578181015183820152602001610cdf565b505050900390565b60408051808201909152601181527f4d4154485f4144445f4f564552464c4f57000000000000000000000000000000602082015260009083830190848210156126ac5760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610cf7578181015183820152602001610cdf565b6000816153e2576002610c0a565b506001919050565b6000806153f7848461585b565b90508067ffffffffffffffff1661540c615459565b108061541e575061541c846158d3565b155b1561542b578091506135c1565b60018301546135be9067ffffffffffffffff838116916801000000000000000090041663ffffffff61579916565b4290565b60006001613b4e565b60408051808201909152601481527f4d41544836345f5355425f554e444552464c4f570000000000000000000000006020820152600090819067ffffffffffffffff808616908516111561533e5760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610cf7578181015183820152602001610cdf565b60008061550c84846153ea565b60018401549091506155459067ffffffffffffffff8084169170010000000000000000000000000000000090041663ffffffff61579916565b67ffffffffffffffff16615557615459565b1015949350505050565b815460018301548254600092919067ffffffffffffffff6801000000000000000082048116917001000000000000000000000000000000009004166155c0846155b0818663ffffffff61534616565b8467ffffffffffffffff166159bc565b8015610d9a5750610d9a8488600201548367ffffffffffffffff166159bc565b6000806155eb6131ec565b6040805180820190915260208082527f44495350555441424c455f41475245454d454e545f53544154455f494e56414c90820152909150600160a060020a038216151561176a5760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610cf7578181015183820152602001610cdf565b6000806000806040516020818751602089018a5afa925060008311156156a257805191505b50909590945092505050565b6000806040516020818551602087016000895af160008111156156f2573d80156156df57602081146156e8576156f0565b600193506156f0565b600183511493505b505b5090949350505050565b9055565b60408051808201909152601581527f55494e5436345f4e554d4245525f544f4f5f4249470000000000000000000000602082015260009067ffffffffffffffff8311156157925760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610cf7578181015183820152602001610cdf565b5090919050565b60408051808201909152601381527f4d41544836345f4144445f4f564552464c4f570000000000000000000000000060208201526000908383019067ffffffffffffffff80861690831610156126ac5760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610cf7578181015183820152602001610cdf565b8054600383015460009161204c9167ffffffffffffffff908116911663ffffffff61579916565b60008061589a8460060160089054906101000a900467ffffffffffffffff166158848686615834565b67ffffffffffffffff169063ffffffff61579916565b60068501549091506135be9067ffffffffffffffff8084169170010000000000000000000000000000000090041663ffffffff61579916565b60068101546000907801000000000000000000000000000000000000000000000000900460ff16818080808085600281111561590b57fe5b141561591a57600095506159b2565b600185600281111561592857fe5b60048901546000908152600260205260409020600181015460068b0154939092149650945067ffffffffffffffff6801000000000000000090910481169170010000000000000000000000000000000090041681151561598457fe5b0467ffffffffffffffff169150600282061515841515141590506159a88784615561565b1515811515141595505b5050505050919050565b6000808315156159cf57600091506126ac565b836159e886670de0b6b3a764000063ffffffff6159fe16565b8115156159f157fe5b0492909211949350505050565b600080831515615a1157600091506135c1565b50828202828482811515615a2157fe5b60408051808201909152601181527f4d4154485f4d554c5f4f564552464c4f57000000000000000000000000000000602082015292919004146126ac5760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610cf7578181015183820152602001610cdf5600a165627a7a7230582049f4301feb6dd6b41607648eab7d8060c0ba30ae26e0ffa37ad140110495a8590029ebb05b386a8d34882b8711d156f463690983dc47815980fb82aeeff1aa43579e",
  "deployedBytecode": "0x6080604052600436106102be5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166301aab00c81146102c357806301ffc9a7146102ea5780630803fac0146103385780630a0932da1461034d578063143b8f271461037957806318fbc289146103915780631e9ae2f4146103a65780632914b9bd146103c957806332f0a3b51461043e57806340b43701146104535780634b4e45cf146104b75780635049ece9146104cc57806356fefc55146104f457806357d0c1791461050957806358c56109146105425780635a55c1f0146105635780635e754d55146106205780635eb243321461064c5780636207c9e01461066e5780636ab6802b146106835780636ecc064e1461069b57806374804316146106bd57806376740b5b146106e757806376f98942146106ff5780637ad267b6146107145780637c1d0b871461072c5780637e7db6e11461074e5780637f439ce01461076f57806380afdea81461079657806382dfcbaf146107ab5780638a11804e146107db5780638b3dd749146107f05780638f911dca1461080557806390ab08851461081a578063955131ed14610841578063979f5b4c14610865578063980704cf1461087a5780639d4941d8146108d1578063a1658fad146108f2578063a479e50814610959578063a7542d551461096e578063acec48f014610986578063b0863063146109d8578063b2deae83146109f0578063bca60cf514610a12578063be2c64d414610a27578063c0774df314610a3c578063c2e687f514610a69578063c9d27afe14610a8b578063cc63604a14610aa8578063cdb2867b14610ac0578063d35424fa14610ae4578063d4aae0c414610af9578063de4796ed14610b0e578063de4f634714610b23578063f83a151514610b38578063fc0c546a14610b50578063fc157cb414610b65578063fd64eccb14610b7a575b600080fd5b3480156102cf57600080fd5b506102d8610b8f565b60408051918252519081900360200190f35b3480156102f657600080fd5b506103247fffffffff0000000000000000000000000000000000000000000000000000000060043516610bb3565b604080519115158252519081900360200190f35b34801561034457600080fd5b50610324610c10565b34801561035957600080fd5b506102d86024600480358281019290820135918135918201910135610c39565b34801561038557600080fd5b50610324600435610da5565b34801561039d57600080fd5b506102d8610ddd565b3480156103b257600080fd5b506103c7600160a060020a0360043516610de2565b005b3480156103d557600080fd5b506040805160206004803580820135601f8101849004840285018401909552848452610422943694929360249392840191908190840183828082843750949750610fc39650505050505050565b60408051600160a060020a039092168252519081900360200190f35b34801561044a57600080fd5b506104226110c2565b34801561045f57600080fd5b5061046b600435611153565b6040805167ffffffffffffffff988916815296881660208801529487168686015292861660608601529085166080850152841660a084015290921660c082015290519081900360e00190f35b3480156104c357600080fd5b506102d86111e0565b3480156104d857600080fd5b506103c767ffffffffffffffff600435811690602435166111e6565b34801561050057600080fd5b506102d86112ce565b34801561051557600080fd5b5061051e6112f2565b6040518082600281111561052e57fe5b60ff16815260200191505060405180910390f35b34801561054e57600080fd5b506103c7600160a060020a03600435166112f7565b34801561056f57600080fd5b5061057b6004356113ea565b604080518e8152602081018e90529081018c905267ffffffffffffffff808c1660608301528a16608082015260a081018960038111156105b757fe5b60ff168152602081018990526040810188905267ffffffffffffffff80881660608301528681166080830152851660a082015260c0018360028111156105f957fe5b60ff1681526020810192909252506040805191829003019c509a5050505050505050505050f35b34801561062c57600080fd5b506103c760246004803582810192908201359181359182019101356114f5565b34801561065857600080fd5b506103c767ffffffffffffffff6004351661161d565b34801561067a57600080fd5b506102d86116ff565b34801561068f57600080fd5b50610324600435611723565b3480156106a757600080fd5b506103c767ffffffffffffffff60043516611770565b3480156106c957600080fd5b506103c760048035906024803515159160443591820191013561184c565b3480156106f357600080fd5b50610324600435611b33565b34801561070b57600080fd5b506102d8611b7e565b34801561072057600080fd5b506103c7600435611ba2565b34801561073857600080fd5b506103c767ffffffffffffffff60043516611c4a565b34801561075a57600080fd5b50610324600160a060020a0360043516611d26565b34801561077b57600080fd5b506103c7600435602435600160a060020a0360443516611d2c565b3480156107a257600080fd5b506102d8611dd8565b3480156107b757600080fd5b50610324600480359060248035908101910135600160a060020a0360443516611e08565b3480156107e757600080fd5b506102d8611f3e565b3480156107fc57600080fd5b506102d8611f62565b34801561081157600080fd5b506102d8611f8d565b34801561082657600080fd5b50610324600160a060020a0360043581169060243516611fb1565b34801561084d57600080fd5b506103c7600480359060248035908101910135612053565b34801561087157600080fd5b506102d8612268565b34801561088657600080fd5b5061089e600435600160a060020a036024351661228c565b604051808360028111156108ae57fe5b60ff168152600160a060020a039092166020830152506040805191829003019150f35b3480156108dd57600080fd5b506103c7600160a060020a03600435166122bc565b3480156108fe57600080fd5b506040805160206004604435818101358381028086018501909652808552610324958335600160a060020a031695602480359636969560649593949201929182918501908490808284375094975061254b9650505050505050565b34801561096557600080fd5b506104226126b4565b34801561097a57600080fd5b50610324600435612769565b34801561099257600080fd5b506103c7600160a060020a036004351667ffffffffffffffff60243581169060443581169060643581169060843581169060a43581169060c43581169060e43516612780565b3480156109e457600080fd5b506103c7600435612895565b3480156109fc57600080fd5b506103c767ffffffffffffffff6004351661293a565b348015610a1e57600080fd5b50610422612a16565b348015610a3357600080fd5b506102d8612a20565b348015610a4857600080fd5b5061032460048035600160a060020a03169060248035908101910135612a44565b348015610a7557600080fd5b506103c767ffffffffffffffff60043516612a80565b348015610a9757600080fd5b506103c76004356024351515612b5c565b348015610ab457600080fd5b50610324600435612c08565b348015610acc57600080fd5b50610324600435600160a060020a0360243516612c1b565b348015610af057600080fd5b506102d8612c2f565b348015610b0557600080fd5b50610422612c53565b348015610b1a57600080fd5b50610324612c7e565b348015610b2f57600080fd5b506102d8612c91565b348015610b4457600080fd5b506103c7600435612c97565b348015610b5c57600080fd5b50610422612d3c565b348015610b7157600080fd5b506102d8612d4b565b348015610b8657600080fd5b50610324612d57565b7fbc5d8ebc0830a2fed8649987b8263de1397b7fa892f3b87dc2d8cad35c691f8681565b6000610bbe82612d5c565b80610c0a57507fffffffff0000000000000000000000000000000000000000000000000000000082167ff3d3bb5100000000000000000000000000000000000000000000000000000000145b92915050565b600080610c1b611f62565b90508015801590610c33575080610c30612db5565b10155b91505090565b60007fe7dcd7275292e064d090fbc5f3bd7995be23b502c1fed5cd94cfddbbdcd32bbc610c6533612db9565b610c7033838361254b565b60408051808201909152600f81527f4150505f415554485f4641494c454400000000000000000000000000000000006020820152901515610d325760405160e560020a62461bcd0281526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610cf7578181015183820152602001610cdf565b50505050905090810190601f168015610d245780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50610d9a87878080601f0160208091040260200160405190810160405280939291908181526020018383808284375050604080516020601f8d018190048102820181019092528b815294508b93508a9250829150840183828082843750612dcd945050505050565b979650505050505050565b6000806000610db38461312a565b600481015460009081526002602052604090209092509050610dd582826131c8565b949350505050565b604681565b604080516000808252602082019092527f8dad640ab1b088990c972676ada708447affc660890ec9fc9a5483241c49f03690610e21903390839061254b565b60408051808201909152600f81527f4150505f415554485f4641494c454400000000000000000000000000000000006020820152901515610ea75760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610cf7578181015183820152602001610cdf565b50610eb06131ec565b9150600160a060020a038216158015610ed15750600160a060020a03831615155b6040805190810160405280602081526020017f44495350555441424c455f41475245454d454e545f53544154455f494e56414c815250901515610f595760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610cf7578181015183820152602001610cdf565b50610f8a7f6dbe80ccdeafbf5f3fff5738b224414f85e9370da36f61bf21c65159df7409e98463ffffffff61321716565b604051600160a060020a038416907f64d4a120bf365888d0b3f10e4d7deb8415919eaad62ee6fb5f5619082d6f641890600090a2505050565b6000610fcd6126b4565b600160a060020a03166304bf2a7f836040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561104457818101518382015260200161102c565b50505050905090810190601f1680156110715780820380516001836020036101000a031916815260200191505b5092505050602060405180830381600087803b15801561109057600080fd5b505af11580156110a4573d6000803e3d6000fd5b505050506040513d60208110156110ba57600080fd5b505192915050565b60006110cc612c53565b600160a060020a03166332f0a3b56040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561112257600080fd5b505af1158015611136573d6000803e3d6000fd5b505050506040513d602081101561114c57600080fd5b5051905090565b6000806000806000806000806111688961321b565b805460019091015467ffffffffffffffff8083169c6801000000000000000080850483169d5070010000000000000000000000000000000080860484169d50780100000000000000000000000000000000000000000000000090950483169b508383169a508304821698509290910416945092505050565b60015481565b60007f4f885d966bcd49734218a6e280d58c840b86e8cc13610b21ebd46f0b1da362c261122067ffffffffffffffff8086169085166132b9565b61122b33838361254b565b60408051808201909152600f81527f4150505f415554485f4641494c4544000000000000000000000000000000000060208201529015156112b15760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610cf7578181015183820152602001610cdf565b506112ba613314565b92506112c783868661344b565b5050505050565b7f5e3a3edc315e366a0cc5c94ca94a8f9bbc2f1feebb2ef7704bfefcff0cdc4ee781565b600290565b6112ff610c10565b60408051808201909152601481527f494e49545f4e4f545f494e495449414c495a454400000000000000000000000060208201529015156113855760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610cf7578181015183820152602001610cdf565b5033600081815260056020526040808220805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03861690811790915590519092917f3b734cbbc757d28ca321c79f67fd0b3c625ca41fc7aa1aa9cca32e6d6fd0f81091a350565b6000806000806000806000806000806000806000806114088f61312a565b905080600001549d5080600101549c5080600201549b508060030160009054906101000a900467ffffffffffffffff169a508060030160089054906101000a900467ffffffffffffffff1699508060030160109054906101000a900460ff16985080600401549750806005015496508060060160009054906101000a900467ffffffffffffffff1695508060060160089054906101000a900467ffffffffffffffff1694508060060160109054906101000a900467ffffffffffffffff1693508060060160189054906101000a900460ff169250806007015491505091939597999b9d90929496989a9c50565b61152f3385858080601f0160208091040260200160405190810160405280939291908181526020018383808284375061356b945050505050565b60408051808201909152601581527f564f54494e475f43414e4e4f545f464f5257415244000000000000000000000060208201529015156115b55760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610cf7578181015183820152602001610cdf565b506112c784848080601f0160208091040260200160405190810160405280939291908181526020018383808284375050604080516020601f8a018190048102820181019092528881529450889350879250829150840183828082843750612dcd945050505050565b60007fa3f675280fb3c54662067f92659ca1ee3ef7c1a7f2a6ff03a5c4228aa26b6a8261165367ffffffffffffffff84166135c8565b61165e33838361254b565b60408051808201909152600f81527f4150505f415554485f4641494c4544000000000000000000000000000000000060208201529015156116e45760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610cf7578181015183820152602001610cdf565b506116ed613314565b92506116f98385613609565b50505050565b7ff3a5f71f3cb50dae9454dd13cdf0fd1b559f7e20d63c08902592486e6d460c9081565b60008061172f8361312a565b600681015490915067ffffffffffffffff161580156117675750600481015460009081526002602052604090206117679082906131c8565b91505b50919050565b60007f5e3a3edc315e366a0cc5c94ca94a8f9bbc2f1feebb2ef7704bfefcff0cdc4ee76117a667ffffffffffffffff84166135c8565b6117b133838361254b565b60408051808201909152600f81527f4150505f415554485f4641494c4544000000000000000000000000000000000060208201529015156118375760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610cf7578181015183820152602001610cdf565b50611840613314565b92506116f98385613727565b6040805180820190915260208082527f564f54494e475f44454c4547415445535f455843454544535f4d41585f4c454e908201526000908190819060468511156118db5760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610cf7578181015183820152602001610cdf565b506118e58761312a565b92506118f0836137a6565b60408051808201909152601d81527f564f54494e475f504153545f5245505f564f54494e475f57494e444f5700000060208201529015156119765760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610cf7578181015183820152602001610cdf565b50600091505b83821015611b2a5784848381811061199057fe5b90506020020135600160a060020a031690506119ac83826137dd565b60408051808201909152601281527f564f54494e475f43414e4e4f545f564f544500000000000000000000000000006020820152901515611a325760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610cf7578181015183820152602001610cdf565b50611a3d813361389d565b60408051808201909152601981527f564f54494e475f4e4f545f524550524553454e544154495645000000000000006020820152901515611ac35760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610cf7578181015183820152602001610cdf565b50611ace83826138bf565b1515611ae657611ae183888884336138e0565b611b1f565b6040513390600160a060020a0383169089907fbf94009f3cb6ffcb2eea43b502ff43295b654a96dfcdc68592c90397148ec25690600090a45b60019091019061197c565b50505050505050565b600080611b3f8361312a565b9050611b4a81613b4a565b80611b595750611b5981613b7c565b8015611767575060048101546000908152600260205260409020611767908290613b85565b7f59ba415d96e104e6483d76b79d9cd09941d04e229adcd62d7dc672c93975a19d81565b33611bab6131ec565b600160a060020a0316146040805190810160405280601f81526020017f44495350555441424c455f53454e4445525f4e4f545f41475245454d454e5400815250901515611c3d5760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610cf7578181015183820152602001610cdf565b50611c4781613bac565b50565b60007ff3a5f71f3cb50dae9454dd13cdf0fd1b559f7e20d63c08902592486e6d460c90611c8067ffffffffffffffff84166135c8565b611c8b33838361254b565b60408051808201909152600f81527f4150505f415554485f4641494c454400000000000000000000000000000000006020820152901515611d115760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610cf7578181015183820152602001610cdf565b50611d1a613314565b92506116f98385613cfe565b50600190565b33611d356131ec565b600160a060020a0316146040805190810160405280601f81526020017f44495350555441424c455f53454e4445525f4e4f545f41475245454d454e5400815250901515611dc75760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610cf7578181015183820152602001610cdf565b50611dd3838383613eac565b505050565b6000611e037fd625496217aa6a3453eecb9c3489dc5a53e6c67b444329ea2b2cbc9ff547639b613fd7565b905090565b6040805180820190915260208082527f564f54494e475f44454c4547415445535f455843454544535f4d41585f4c454e908201526000908190819081906046871115611e995760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610cf7578181015183820152602001610cdf565b50611ea38861312a565b9250611eae836137a6565b1515611ebd5760009350611f33565b600091505b85821015611f2e57868683818110611ed657fe5b90506020020135600160a060020a03169050611ef283826137dd565b1580611f055750611f03818661389d565b155b80611f155750611f1583826138bf565b15611f235760009350611f33565b600190910190611ec2565b600193505b505050949350505050565b7f4f885d966bcd49734218a6e280d58c840b86e8cc13610b21ebd46f0b1da362c281565b6000611e037febb05b386a8d34882b8711d156f463690983dc47815980fb82aeeff1aa43579e613fd7565b7fef025787d7cd1a96d9014b8dc7b44899b8c1350859fb9e1e05f5a546dd65158d81565b6000611fbb610c10565b60408051808201909152601481527f494e49545f4e4f545f494e495449414c495a454400000000000000000000000060208201529015156120415760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610cf7578181015183820152602001610cdf565b5061204c838361389d565b9392505050565b600061205e8461312a565b905061206981613fdf565b60408051808201909152601581527f564f54494e475f43414e4e4f545f45584543555445000000000000000000000060208201529015156120ef5760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610cf7578181015183820152602001610cdf565b50828260405180838380828437604080519390910183900383206007880154848301909252601f84527f564f54494e475f494e56414c49445f455845435554494f4e5f53435249505400602085015292955090911492506121989150505760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610cf7578181015183820152602001610cdf565b5060038101805470ff00000000000000000000000000000000191670030000000000000000000000000000000017905560058101546121d69061404a565b61223683838080601f01602080910402602001604051908101604052809392919081815260200183838082843750506040805160008082526020820190925294509250612221915050565b506040805160008152602081019091526140d4565b5060405184907fbf8e2b108bb7c980e08903a8a46527699d5e84905a082d56dacb4150725c8cab90600090a250505050565b7fa3f675280fb3c54662067f92659ca1ee3ef7c1a7f2a6ff03a5c4228aa26b6a8281565b600080600061229a8561312a565b90506122a68185614703565b92506122b28185614725565b9150509250929050565b60008060006122ca84611d26565b60408051808201909152601281527f5245434f5645525f444953414c4c4f574544000000000000000000000000000060208201529015156123505760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610cf7578181015183820152602001610cdf565b506123596110c2565b925061236483614778565b60408051808201909152601a81527f5245434f5645525f5641554c545f4e4f545f434f4e545241435400000000000060208201529015156123ea5760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610cf7578181015183820152602001610cdf565b50600160a060020a038416151561243b5760405130319250600160a060020a0384169083156108fc029084906000818181858888f19350505050158015612435573d6000803e3d6000fd5b506124fa565b5082612456600160a060020a0382163063ffffffff61479e16565b9150612472600160a060020a038216848463ffffffff6148b316565b60408051808201909152601d81527f5245434f5645525f544f4b454e5f5452414e534645525f4641494c454400000060208201529015156124f85760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610cf7578181015183820152602001610cdf565b505b83600160a060020a031683600160a060020a03167f596caf56044b55fb8c4ca640089bbc2b63cae3e978b851f5745cbb7c5b288e02846040518082815260200191505060405180910390a350505050565b600080612556610c10565b151561256557600091506126ac565b61256d612c53565b9050600160a060020a038116151561258857600091506126ac565b80600160a060020a031663fdef91068630876125a38861493e565b6040517c010000000000000000000000000000000000000000000000000000000063ffffffff8716028152600160a060020a03808616600483019081529085166024830152604482018490526080606483019081528351608484015283519192909160a490910190602085019080838360005b8381101561262e578181015183820152602001612616565b50505050905090810190601f16801561265b5780820380516001836020036101000a031916815260200191505b5095505050505050602060405180830381600087803b15801561267d57600080fd5b505af1158015612691573d6000803e3d6000fd5b505050506040513d60208110156126a757600080fd5b505191505b509392505050565b6000806126bf612c53565b604080517fbe00bbd80000000000000000000000000000000000000000000000000000000081527fd6f028ca0e8edb4a8c9757ca4fdccab25fa1e0317da1188108f7d2dee14902fb60048201527fddbcfd564f642ab5627cf68b9b7d374fb4f8a36e941a75d89c87998cef03bd6160248201529051600160a060020a03929092169163be00bbd8916044808201926020929091908290030181600087803b15801561109057600080fd5b6000806127758361312a565b9050611767816137a6565b600061278a614948565b61279389614778565b60408051808201909152601981527f564f54494e475f544f4b454e5f4e4f545f434f4e54524143540000000000000060208201529015156128195760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610cf7578181015183820152602001610cdf565b506000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a038b1617905561284a614a10565b5090506128578189614a63565b6128618188613cfe565b61286b8187613609565b6128758186614b49565b61288081858561344b565b61288a8183613727565b505050505050505050565b3361289e6131ec565b600160a060020a0316146040805190810160405280601f81526020017f44495350555441424c455f53454e4445525f4e4f545f41475245454d454e54008152509015156129305760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610cf7578181015183820152602001610cdf565b50611c4781614c62565b60007f59ba415d96e104e6483d76b79d9cd09941d04e229adcd62d7dc672c93975a19d61297067ffffffffffffffff84166135c8565b61297b33838361254b565b60408051808201909152600f81527f4150505f415554485f4641494c454400000000000000000000000000000000006020820152901515612a015760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610cf7578181015183820152602001610cdf565b50612a0a613314565b92506116f98385614b49565b6000611e036131ec565b7fe7dcd7275292e064d090fbc5f3bd7995be23b502c1fed5cd94cfddbbdcd32bbc81565b6000610dd58484848080601f0160208091040260200160405190810160405280939291908181526020018383808284375061356b945050505050565b60007fbc5d8ebc0830a2fed8649987b8263de1397b7fa892f3b87dc2d8cad35c691f86612ab667ffffffffffffffff84166135c8565b612ac133838361254b565b60408051808201909152600f81527f4150505f415554485f4641494c454400000000000000000000000000000000006020820152901515612b475760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610cf7578181015183820152602001610cdf565b50612b50613314565b92506116f98385614a63565b6000612b678361312a565b9050612b738133614c6b565b60408051808201909152601281527f564f54494e475f43414e4e4f545f564f544500000000000000000000000000006020820152901515612bf95760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610cf7578181015183820152602001610cdf565b50611dd38184843360006138e0565b6000610c0a612c168361312a565b613fdf565b600061204c612c298461312a565b83614c6b565b7f8dad640ab1b088990c972676ada708447affc660890ec9fc9a5483241c49f03681565b6000611e037f4172f0f7d2289153072b0a6ca36959e0cbe2efc3afe50fc81636caa96338137b613fd7565b6000600019612c8b611f62565b14905090565b60035481565b33612ca06131ec565b600160a060020a0316146040805190810160405280601f81526020017f44495350555441424c455f53454e4445525f4e4f545f41475245454d454e5400815250901515612d325760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610cf7578181015183820152602001610cdf565b50611c4781614cc7565b600054600160a060020a031681565b670de0b6b3a764000081565b600190565b6000612d6782614e16565b80610c0a5750507fffffffff00000000000000000000000000000000000000000000000000000000167f54053e6c000000000000000000000000000000000000000000000000000000001490565b4390565b6060610c0a82600160a060020a03166135c8565b6000806000806001612ddd614e60565b60008054604080517f981b24d00000000000000000000000000000000000000000000000000000000081529490930367ffffffffffffffff811660048601529251929650600160a060020a03169263981b24d09260248083019360209383900390910190829087803b158015612e5257600080fd5b505af1158015612e66573d6000803e3d6000fd5b505050506040513d6020811015612e7c57600080fd5b505160408051808201909152601c81527f564f54494e475f4e4f5f544f54414c5f564f54494e475f504f57455200000000602082015290925060008311612f085760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610cf7578181015183820152602001610cdf565b50506003805460018101909155600081815260046020526040902060028101839055909350612f35614e72565b60038201805467ffffffffffffffff191667ffffffffffffffff928316176fffffffffffffffff0000000000000000191668010000000000000000928616929092029190911770ff0000000000000000000000000000000019169055612f99614e7f565b60048201556040518651879190819060208401908083835b60208310612fd05780518252601f199092019160209182019101612fb1565b5181516020939093036101000a6000190180199091169216919091179052604051920182900390912060078501555061300e91508590508633614e89565b816005018190555033600160a060020a0316847fd7bf7ccb2e4cfc6f0a0a257caed8badff9e8edf074f4d8d53d90cac9c515a6838789604051808060200180602001838103835285818151815260200191508051906020019080838360005b8381101561308557818101518382015260200161306d565b50505050905090810190601f1680156130b25780820380516001836020036101000a031916815260200191505b50838103825284518152845160209182019186019080838360005b838110156130e55781810151838201526020016130cd565b50505050905090810190601f1680156131125780820380516001836020036101000a031916815260200191505b5094505050505060405180910390a350505092915050565b60035460408051808201909152600e81527f564f54494e475f4e4f5f564f5445000000000000000000000000000000000000602082015260009183106131b55760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610cf7578181015183820152602001610cdf565b5050600090815260046020526040902090565b60006131d383613b4a565b801561204c57506131e48383613b85565b159392505050565b6000611e037f6dbe80ccdeafbf5f3fff5738b224414f85e9370da36f61bf21c65159df7409e9613fd7565b9055565b60015460408051808201909152601d81527f564f54494e475f53455454494e475f444f45535f4e4f545f4558495354000000602082015260009183106132a65760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610cf7578181015183820152602001610cdf565b5050600090815260026020526040902090565b6040805160028082526060808301845292602083019080388339019050509050828160008151811015156132e957fe5b60209081029091010152805182908290600190811061330457fe5b6020908102909101015292915050565b600080600080613322614a10565b925092506133326001830361321b565b8054845467ffffffffffffffff1990811667ffffffffffffffff9283161780875583546801000000000000000090819004841681026fffffffffffffffff000000000000000019928316178089558554700100000000000000000000000000000000908190048616810277ffffffffffffffff000000000000000000000000000000001992831617808b55875478010000000000000000000000000000000000000000000000009081900488160277ffffffffffffffffffffffffffffffffffffffffffffffff909116178a5560018088018054918c0180549097169188169190911780875581548590048816909402939094169290921780855592548290049094160292169190911790559293508392905050505090565b825460408051808201909152601f81527f564f54494e475f494e56414c49445f51554945545f454e445f504552494f440060208201529067ffffffffffffffff90811690841611156134e25760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610cf7578181015183820152602001610cdf565b5060018301805467ffffffffffffffff191667ffffffffffffffff8481169182176fffffffffffffffff00000000000000001916680100000000000000009185169182021790925560408051918252602082019290925281517fa194c49d80327ca6b93c94de63248b209eabfdf2911b0b258286473d93df92a4929181900390910190a1505050565b6000806135766131ec565b9050600160a060020a038116158015906135be57506135be847fe7dcd7275292e064d090fbc5f3bd7995be23b502c1fed5cd94cfddbbdcd32bbc6135b982612db9565b61254b565b91505b5092915050565b60408051600180825281830190925260609160208083019080388339019050509050818160008151811015156135fa57fe5b60209081029091010152919050565b815460408051808201909152601c81527f564f54494e475f4348414e47455f51554f52554d5f544f4f5f4249470000000060208201529067ffffffffffffffff68010000000000000000909104811690831611156136ac5760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610cf7578181015183820152602001610cdf565b50815467ffffffffffffffff8216700100000000000000000000000000000000810277ffffffffffffffff000000000000000000000000000000001990921691909117835560408051918252517f3172f2e9273c729c2a47cc8bf7e7f18506e3e3035126d562602bd2155bc78a509181900360200190a15050565b60018201805467ffffffffffffffff8316700100000000000000000000000000000000810277ffffffffffffffff00000000000000000000000000000000199092169190911790915560408051918252517fa917ba4499a7580dd381d63de169b0c5bad43e872db28bbac0f06a1e0047e75d9181900360200190a15050565b60006137b182613b4a565b8015610c0a5750600482015460009081526002602052604090206137d6908390614f7c565b1592915050565b600080546003840154604080517f4ee2cd7e000000000000000000000000000000000000000000000000000000008152600160a060020a0386811660048301526801000000000000000090930467ffffffffffffffff166024820152905184939290921691634ee2cd7e9160448082019260209290919082900301818787803b15801561386957600080fd5b505af115801561387d573d6000803e3d6000fd5b505050506040513d602081101561389357600080fd5b5051119392505050565b600160a060020a03918216600090815260056020526040902054821691161490565b6000806138cc8484614703565b60028111156138d757fe5b14159392505050565b6004850154600090815260026020526040812090808080806139028b87615055565b15613912576139128b878c61511c565b8a5460018c01546000805460038f0154604080517f4ee2cd7e000000000000000000000000000000000000000000000000000000008152600160a060020a038f811660048301526801000000000000000090930467ffffffffffffffff1660248201529051959a509398501692634ee2cd7e926044808201936020939283900390910190829087803b1580156139a757600080fd5b505af11580156139bb573d6000803e3d6000fd5b505050506040513d60208110156139d157600080fd5b5051600160a060020a038916600090815260088d01602052604090208054919450925060ff1690506001816002811115613a0757fe5b1415613a2457613a1d858463ffffffff6152b216565b9450613a4b565b6002816002811115613a3257fe5b1415613a4b57613a48848463ffffffff6152b216565b93505b8815613a6857613a61858463ffffffff61534616565b9450613a7b565b613a78848463ffffffff61534616565b93505b848b5560018b01849055613a8e896153d4565b8254839060ff19166001836002811115613aa457fe5b02179055508154600160a060020a0380891661010081027fffffffffffffffffffffff0000000000000000000000000000000000000000ff9093169290921784558916908b907f1c3607eb5a3925b4a4cae4e90a9345b2a2955daeac124e761d05e5288df11963908c9015613b19578a613b1b565b8b5b604080519215158352600160a060020a0390911660208301528051918290030190a35050505050505050505050565b6000805b600383810154700100000000000000000000000000000000900460ff1690811115613b7557fe5b1492915050565b60006003613b4e565b6000613b9183836153ea565b67ffffffffffffffff16613ba3615459565b10159392505050565b6000613bb78261312a565b9050613bc28161545d565b60408051808201909152601681527f564f54494e475f564f54455f4e4f545f504155534544000000000000000000006020820152901515613c485760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610cf7578181015183820152602001610cdf565b5060038101805470ff00000000000000000000000000000000191690556006810154613c969067ffffffffffffffff16613c80614e72565b67ffffffffffffffff169063ffffffff61546616565b60068201805467ffffffffffffffff9290921668010000000000000000026fffffffffffffffff00000000000000001990921691909117905560405182907f91f598d24ad2394e84049626d590e9a75dc54508a6e7bf88895d335eb9f395dd90600090a25050565b815460408051808201909152601f81527f564f54494e475f4348414e47455f535550504f52545f544f4f5f534d414c4c0060208201529067ffffffffffffffff808416700100000000000000000000000000000000909204161115613da85760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610cf7578181015183820152602001610cdf565b5060408051808201909152601d81527f564f54494e475f4348414e47455f535550504f52545f544f4f5f4249470000006020820152670de0b6b3a764000067ffffffffffffffff831610613e415760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610cf7578181015183820152602001610cdf565b50815467ffffffffffffffff82166801000000000000000081026fffffffffffffffff00000000000000001990921691909117835560408051918252517f903b617f7f36eb047a29b89d1bf7885fdae31d250c3320fccf11d045c11b396e9181900360200190a15050565b6000613eb78461312a565b9050613ec281613b4a565b60408051808201909152601881527f564f54494e475f43414e4e4f545f50415553455f564f544500000000000000006020820152901515613f485760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610cf7578181015183820152602001610cdf565b5060038101805470ff000000000000000000000000000000001916700100000000000000000000000000000000179055613f80614e72565b60068201805467ffffffffffffffff191667ffffffffffffffff92909216919091179055604051839085907f0acb8ef0fdffe8e5404a8511f8f4c38ed4bd1643888377569fc2d50d5ee8d83a90600090a350505050565b5490565b5490565b600080613feb83613b4a565b1515613ffa576000915061176a565b50600482015460009081526002602052604090206140188382613b85565b1515614027576000915061176a565b61403183826154ff565b1515614040576000915061176a565b6117678382615561565b60006140546155e0565b905080600160a060020a0316633b92da72836040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050600060405180830381600087803b1580156140b857600080fd5b505af11580156140cc573d6000803e3d6000fd5b505050505050565b60606000806060806140e4610c10565b60408051808201909152601481527f494e49545f4e4f545f494e495449414c495a4544000000000000000000000000602082015290151561416a5760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610cf7578181015183820152602001610cdf565b50600080614176612c53565b9150614180611dd8565b905061418b8a610fc3565b60408051808201909152601b81527f45564d52554e5f4558454355544f525f554e415641494c41424c4500000000006020820152909650600160a060020a038716151561421d5760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610cf7578181015183820152602001610cdf565b506040516060602482019081528b5160848301528b517f279cea3500000000000000000000000000000000000000000000000000000000975087928d928d928d9282916044820191606481019160a490910190602089019080838360005b8381101561429357818101518382015260200161427b565b50505050905090810190601f1680156142c05780820380516001836020036101000a031916815260200191505b50848103835286518152865160209182019188019080838360005b838110156142f35781810151838201526020016142db565b50505050905090810190601f1680156143205780820380516001836020036101000a031916815260200191505b508481038252855181528551602091820191808801910280838360005b8381101561435557818101518382015260200161433d565b505050509050019650505050505050604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050509350600080855160208701895af4604051935080801561444357603f3d1180156143f85760203d03806020883e860160405261443d565b60e560020a62461bcd02865260206004870152601e60248701527f45564d52554e5f4558454355544f525f494e56414c49445f52455455524e00006044870152606486fd5b5061444c565b3d6000863e3d85fd5b505085600160a060020a03167f5229a5dba83a54ae8cb5b51bdd6de9474cacbe9dd332f5185f3a4f4f2e3f4ad98b8b8660405180806020018060200180602001848103845287818151815260200191508051906020019080838360005b838110156144c15781810151838201526020016144a9565b50505050905090810190601f1680156144ee5780820380516001836020036101000a031916815260200191505b50848103835286518152865160209182019188019080838360005b83811015614521578181015183820152602001614509565b50505050905090810190601f16801561454e5780820380516001836020036101000a031916815260200191505b50848103825285518152855160209182019187019080838360005b83811015614581578181015183820152602001614569565b50505050905090810190601f1680156145ae5780820380516001836020036101000a031916815260200191505b50965050505050505060405180910390a282965081600160a060020a03166145d4612c53565b600160a060020a0316146040805190810160405280601f81526020017f45564d52554e5f50524f5445435445445f53544154455f4d4f444946494544008152509015156146665760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610cf7578181015183820152602001610cdf565b5080614670611dd8565b60408051808201909152601f81527f45564d52554e5f50524f5445435445445f53544154455f4d4f44494649454400602082015291146146f55760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610cf7578181015183820152602001610cdf565b505050505050509392505050565b600160a060020a03166000908152600891909101602052604090205460ff1690565b60008061473284846138bf565b151561474157600091506135c1565b50600160a060020a038083166000908152600885016020526040902054610100900416801561477057806135be565b509092915050565b600080600160a060020a0383161515614794576000915061176a565b50506000903b1190565b60408051600160a060020a0383166024808301919091528251808303909101815260449091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f70a0823100000000000000000000000000000000000000000000000000000000179052600090818061481e868461567d565b60408051808201909152601c81527f534146455f4552435f32305f42414c414e43455f524556455254454400000000602082015291935091508215156148a95760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610cf7578181015183820152602001610cdf565b5095945050505050565b60408051600160a060020a038416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb0000000000000000000000000000000000000000000000000000000017905260009061493585826156ae565b95945050505050565b8051602002815290565b614950611f62565b60408051808201909152601881527f494e49545f414c52454144595f494e495449414c495a45440000000000000000602082015290156149d55760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610cf7578181015183820152602001610cdf565b50614a0e6149e1612db5565b7febb05b386a8d34882b8711d156f463690983dc47815980fb82aeeff1aa43579e9063ffffffff61321716565b565b60018054808201909155600081815260026020908152604091829020825184815292519093927f011e4fd6859d1a60bf9566bc5400b22aa9950bb088178451fbb9ff71a9410b3692908290030190a19091565b60408051808201909152601581527f564f54494e475f564f54455f54494d455f5a45524f00000000000000000000006020820152600067ffffffffffffffff831611614af45760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610cf7578181015183820152602001610cdf565b50815467ffffffffffffffff821667ffffffffffffffff199091168117835560408051918252517f776dcd10c15e7a1bd4fbb6c824d2a80fa8a40a3a6b401fddc678696b7fb06abe9181900360200190a15050565b815460408051808201909152601f81527f564f54494e475f494e56414c49445f444c47545f564f54455f504552494f440060208201529067ffffffffffffffff9081169083161115614be05760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610cf7578181015183820152602001610cdf565b50815467ffffffffffffffff82167801000000000000000000000000000000000000000000000000810277ffffffffffffffffffffffffffffffffffffffffffffffff90921691909117835560408051918252517f2c2d753fade2041a1abb2972579386f82ae7d7256809c4d44506c4c152fd01eb9181900360200190a15050565b611c4781614cc7565b60048201546000908152600260205260408120614c8884826131c8565b8015614c995750614c9984846137dd565b80156135be575082600160a060020a0316614cb48585614725565b600160a060020a03161415949350505050565b6000614cd28261312a565b9050614cdd8161545d565b60408051808201909152601681527f564f54494e475f564f54455f4e4f545f504155534544000000000000000000006020820152901515614d635760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610cf7578181015183820152602001610cdf565b5060038101805470ff0000000000000000000000000000000019167002000000000000000000000000000000001790556006810154614dae9067ffffffffffffffff16613c80614e72565b60068201805467ffffffffffffffff9290921668010000000000000000026fffffffffffffffff00000000000000001990921691909117905560405182907f342b22decf184652237398af8d345da7d9743ae2e1c4122e7c32899c6a81f9a990600090a25050565b7fffffffff0000000000000000000000000000000000000000000000000000000081167f01ffc9a70000000000000000000000000000000000000000000000000000000014919050565b6000611e03614e6d612db5565b615700565b6000611e03614e6d615459565b6001546000190190565b600080614e946155e0565b905080600160a060020a031663e95fdd1d8686866040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808481526020018060200183600160a060020a0316600160a060020a03168152602001828103825284818151815260200191508051906020019080838360005b83811015614f2e578181015183820152602001614f16565b50505050905090810190601f168015614f5b5780820380516001836020036101000a031916815260200191505b50945050505050602060405180830381600087803b15801561267d57600080fd5b805460038301546000918291829182918291614fc79167ffffffffffffffff90811691780100000000000000000000000000000000000000000000000090041663ffffffff61579916565b600688015490945067ffffffffffffffff808216945068010000000000000000909104169150821580159061500f57508367ffffffffffffffff168367ffffffffffffffff16105b6150195783615033565b61503367ffffffffffffffff85168363ffffffff61579916565b90508067ffffffffffffffff16615048615459565b1015979650505050505050565b6000806000806000806150688888615834565b600188015490955061508d9067ffffffffffffffff808816911663ffffffff61546616565b600689015490945067ffffffffffffffff80821694506801000000000000000090910416915082158015906150d557508367ffffffffffffffff168367ffffffffffffffff16105b6150df57836150f9565b6150f967ffffffffffffffff85168363ffffffff61579916565b90508067ffffffffffffffff1661510e615459565b101598975050505050505050565b60006151288484615561565b9050600060068501547801000000000000000000000000000000000000000000000000900460ff16600281111561515b57fe5b14156151c25761516a816153d4565b6006850180547fffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffffff1678010000000000000000000000000000000000000000000000008360028111156151b857fe5b02179055506116f9565b6151cc848461585b565b67ffffffffffffffff166151de615459565b106116f9576001830154600685015461522b9170010000000000000000000000000000000090910467ffffffffffffffff908116916801000000000000000090041663ffffffff61579916565b60068501805467ffffffffffffffff929092167001000000000000000000000000000000000277ffffffffffffffff0000000000000000000000000000000019909216919091179055604080518215158152905183917fa5e552089c71c91761a836c6c6b8d6ccd0fb1ee4a7362fc3835a8c1c7aafdc1f919081900360200190a250505050565b60408051808201909152601281527f4d4154485f5355425f554e444552464c4f570000000000000000000000000000602082015260009081908484111561533e5760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610cf7578181015183820152602001610cdf565b505050900390565b60408051808201909152601181527f4d4154485f4144445f4f564552464c4f57000000000000000000000000000000602082015260009083830190848210156126ac5760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610cf7578181015183820152602001610cdf565b6000816153e2576002610c0a565b506001919050565b6000806153f7848461585b565b90508067ffffffffffffffff1661540c615459565b108061541e575061541c846158d3565b155b1561542b578091506135c1565b60018301546135be9067ffffffffffffffff838116916801000000000000000090041663ffffffff61579916565b4290565b60006001613b4e565b60408051808201909152601481527f4d41544836345f5355425f554e444552464c4f570000000000000000000000006020820152600090819067ffffffffffffffff808616908516111561533e5760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610cf7578181015183820152602001610cdf565b60008061550c84846153ea565b60018401549091506155459067ffffffffffffffff8084169170010000000000000000000000000000000090041663ffffffff61579916565b67ffffffffffffffff16615557615459565b1015949350505050565b815460018301548254600092919067ffffffffffffffff6801000000000000000082048116917001000000000000000000000000000000009004166155c0846155b0818663ffffffff61534616565b8467ffffffffffffffff166159bc565b8015610d9a5750610d9a8488600201548367ffffffffffffffff166159bc565b6000806155eb6131ec565b6040805180820190915260208082527f44495350555441424c455f41475245454d454e545f53544154455f494e56414c90820152909150600160a060020a038216151561176a5760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610cf7578181015183820152602001610cdf565b6000806000806040516020818751602089018a5afa925060008311156156a257805191505b50909590945092505050565b6000806040516020818551602087016000895af160008111156156f2573d80156156df57602081146156e8576156f0565b600193506156f0565b600183511493505b505b5090949350505050565b9055565b60408051808201909152601581527f55494e5436345f4e554d4245525f544f4f5f4249470000000000000000000000602082015260009067ffffffffffffffff8311156157925760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610cf7578181015183820152602001610cdf565b5090919050565b60408051808201909152601381527f4d41544836345f4144445f4f564552464c4f570000000000000000000000000060208201526000908383019067ffffffffffffffff80861690831610156126ac5760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610cf7578181015183820152602001610cdf565b8054600383015460009161204c9167ffffffffffffffff908116911663ffffffff61579916565b60008061589a8460060160089054906101000a900467ffffffffffffffff166158848686615834565b67ffffffffffffffff169063ffffffff61579916565b60068501549091506135be9067ffffffffffffffff8084169170010000000000000000000000000000000090041663ffffffff61579916565b60068101546000907801000000000000000000000000000000000000000000000000900460ff16818080808085600281111561590b57fe5b141561591a57600095506159b2565b600185600281111561592857fe5b60048901546000908152600260205260409020600181015460068b0154939092149650945067ffffffffffffffff6801000000000000000090910481169170010000000000000000000000000000000090041681151561598457fe5b0467ffffffffffffffff169150600282061515841515141590506159a88784615561565b1515811515141595505b5050505050919050565b6000808315156159cf57600091506126ac565b836159e886670de0b6b3a764000063ffffffff6159fe16565b8115156159f157fe5b0492909211949350505050565b600080831515615a1157600091506135c1565b50828202828482811515615a2157fe5b60408051808201909152601181527f4d4154485f4d554c5f4f564552464c4f57000000000000000000000000000000602082015292919004146126ac5760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610cf7578181015183820152602001610cdf5600a165627a7a7230582049f4301feb6dd6b41607648eab7d8060c0ba30ae26e0ffa37ad140110495a8590029",
  "devdoc": {
    "methods": {
      "allowRecoverability(address)": {
        "details": "By default deriving from AragonApp makes it recoverable",
        "params": {
          "token": "Token address that would be recovered"
        },
        "return": "bool whether the app allows the recovery"
      },
      "canChallenge(uint256)": {
        "details": "Tell if a vote can be challenged     Called by the linked Agreement when a challenge is requested for the associated vote",
        "params": {
          "_voteId": "Identification number of the vote being queried"
        },
        "return": "True if the vote can be challenged"
      },
      "canClose(uint256)": {
        "details": "Tell if a vote can be closed     Called by the linked Agreement when the action associated with the vote is requested to be manually closed",
        "params": {
          "_voteId": "Identification number of the vote being queried"
        },
        "return": "True if the vote can be closed"
      },
      "canExecute(uint256)": {
        "details": "Tell if a vote can be executed     Initialization check is implicitly provided by `_getVote()` as new votes can only be     created via `newVote()`, which requires initialization",
        "params": {
          "_voteId": "Identification number of the vote being queried"
        },
        "return": "True if the vote can be executed"
      },
      "canForward(address,bytes)": {
        "details": "Tell if an address can forward actions (by creating a vote)     IForwarderWithContext interface conformance",
        "params": {
          "_evmScript": "EVM script being forwarded",
          "_sender": "Address intending to forward an action"
        },
        "return": "True if the address is allowed create a vote containing the action"
      },
      "canPerform(address,bytes32,uint256[])": {
        "details": "Check whether an action can be performed by a sender for a particular role on this app",
        "params": {
          "_params": "Permission params for the role",
          "_role": "Role on this app",
          "_sender": "Sender of the call"
        },
        "return": "Boolean indicating whether the sender has the permissions to perform the action.        Always returns false if the app hasn't been initialized yet."
      },
      "canRepresentativesVote(uint256)": {
        "details": "Tell if a vote currently allows representatives to vote for delegated voters     Initialization check is implicitly provided by `_getVote()` as new votes can only be     created via `newVote()`, which requires initialization",
        "params": {
          "_voteId": "Vote identifier"
        },
        "return": "True if the vote currently allows representatives to vote"
      },
      "canVote(uint256,address)": {
        "details": "Tell if a voter can participate in a vote     Initialization check is implicitly provided by `_getVote()` as new votes can only be     created via `newVote()`, which requires initialization",
        "params": {
          "_voteId": "Identification number of the vote being queried",
          "_voter": "Address of the voter being queried"
        },
        "return": "True if the voter can participate in the vote"
      },
      "canVoteOnBehalfOf(uint256,address[],address)": {
        "details": "Tell if a representative can vote on behalf of delegated voters in a vote     Initialization check is implicitly provided by `_getVote()` as new votes can only be     created via `newVote()`, which requires initialization",
        "params": {
          "_representative": "Address of the representative being queried",
          "_voteId": "Identification number of the vote being queried",
          "_voters": "Addresses of the delegated voters being queried"
        },
        "return": "True if the representative can vote on behalf of the delegated voters in the vote"
      },
      "changeDelegatedVotingPeriod(uint64)": {
        "params": {
          "_delegatedVotingPeriod": "New delegated voting period"
        }
      },
      "changeExecutionDelay(uint64)": {
        "params": {
          "_executionDelay": "New execution delay"
        }
      },
      "changeMinAcceptQuorumPct(uint64)": {
        "params": {
          "_minAcceptQuorumPct": "New minimum acceptance quorum; expressed as a percentage of 10^18"
        }
      },
      "changeQuietEndingConfiguration(uint64,uint64)": {
        "params": {
          "_quietEndingExtension": "New quiet ending extension",
          "_quietEndingPeriod": "New quiet ending period"
        }
      },
      "changeSupportRequiredPct(uint64)": {
        "params": {
          "_supportRequiredPct": "New required support; expressed as a percentage of 10^18"
        }
      },
      "changeVoteTime(uint64)": {
        "params": {
          "_voteTime": "New vote time"
        }
      },
      "executeVote(uint256,bytes)": {
        "details": "Initialization check is implicitly provided by `_getVote()` as new votes can only be     created via `newVote()`, which requires initialization",
        "params": {
          "_executionScript": "Action (encoded as an EVM script) to be executed, must match the one used when the vote was created",
          "_voteId": "Identification number of the vote"
        }
      },
      "forward(bytes,bytes)": {
        "details": "IForwarderWithContext interface conformance.     This app (as a DisputableAragonApp) is required to be the initial step in the forwarding chain.",
        "params": {
          "_context": "Additional context for the vote, also used as the disputable action's context on the linked Agreement",
          "_evmScript": "Action (encoded as an EVM script) that will be allowed to execute if the vote passes"
        }
      },
      "forwarderType()": {
        "details": "Tell the forwarder type",
        "return": "Always 2 (ForwarderType.WITH_CONTEXT)"
      },
      "getAgreement()": {
        "details": "Tell the linked Agreement",
        "return": "Agreement"
      },
      "getCastVote(uint256,address)": {
        "details": "Tell the state of a voter for a vote     Initialization check is implicitly provided by `_getVote()` as new votes can only be     created via `newVote()`, which requires initialization",
        "params": {
          "_voteId": "Identification number of the vote",
          "_voter": "Address of the voter being queried"
        },
        "return": "state Voter's cast state being queriedcaster Address of the vote's caster"
      },
      "getInitializationBlock()": {
        "return": "Block number in which the contract was initialized"
      },
      "getRecoveryVault()": {
        "details": "Get the recovery vault for the app",
        "return": "Recovery vault address for the app"
      },
      "getSetting(uint256)": {
        "details": "Tell the information for a setting     Initialization check is implicitly provided by `_getSetting()` as new settings can only be     created via `change*()` functions which require initialization",
        "params": {
          "_settingId": "Identification number of the setting"
        },
        "return": "voteTime Base vote durationsupportRequiredPct Required support % (yes power / voted power) for a vote to pass; expressed as a percentage of 10^18minAcceptQuorumPct Required quorum % (yes power / total power) for a vote to pass; expressed as a percentage of 10^18delegatedVotingPeriod Duration of the delegated voting periodquietEndingPeriod Duration to detect non-quiet endingsquietEndingExtension Duration to extend a vote in case of non-quiet endingexecutionDelay Duration to wait before a passed vote can be executed"
      },
      "getVote(uint256)": {
        "details": "Tell the information for a vote     Initialization check is implicitly provided by `_getVote()` as new votes can only be     created via `newVote()`, which requires initialization",
        "params": {
          "_voteId": "Identification number of the vote"
        },
        "return": "yea Voting power fornay Voting power againsttotalPower Total voting power available (based on the snapshot block)startDate Datetime when the vote was createdsnapshotBlock Block number used to check voting power on attached tokenstatus Status of the votesettingId Identification number of the setting applicable to the voteactionId Identification number of the associated disputable action on the linked AgreementpausedAt Datetime when the vote was pausedpauseDuration Duration of the pause (only updated once resumed)quietEndingExtensionDuration Duration a vote was extended due to non-quiet endingsquietEndingSnapshotSupport Snapshot of the vote's support at the beginning of the first quiet ending periodexecutionScriptHash Hash of the EVM script attached to the vote"
      },
      "hasInitialized()": {
        "return": "Whether the contract has been initialized by the time of the current block"
      },
      "initialize(address,uint64,uint64,uint64,uint64,uint64,uint64,uint64)": {
        "params": {
          "_delegatedVotingPeriod": "Duration from the start of a vote that representatives are allowed to vote on behalf of principals",
          "_executionDelay": "Duration to wait before a passed vote can be executed",
          "_minAcceptQuorumPct": "Required quorum % (yes power / total power) for a vote to pass; expressed as a percentage of 10^18",
          "_quietEndingExtension": "Duration to extend a vote in case of non-quiet ending",
          "_quietEndingPeriod": "Duration to detect non-quiet endings",
          "_supportRequiredPct": "Required support % (yes power / voted power) for a vote to pass; expressed as a percentage of 10^18",
          "_token": "MiniMeToken Address that will be used as governance token",
          "_voteTime": "Base duration a vote will be open for voting"
        }
      },
      "isForwarder()": {
        "details": "Report whether the implementing app is a forwarder     Required for backwards compatibility with aragonOS 4",
        "return": "Always true"
      },
      "isRepresentativeOf(address,address)": {
        "details": "Tell if a representative currently represents another voter",
        "params": {
          "_representative": "Address of the representative being queried",
          "_voter": "Address of the delegated voter being queried"
        },
        "return": "True if the representative currently represents the voter"
      },
      "isVoteOpenForVoting(uint256)": {
        "details": "Tell if a vote is open for voting     Initialization check is implicitly provided by `_getVote()` as new votes can only be     created via `newVote()`, which requires initialization",
        "params": {
          "_voteId": "Identification number of the vote being queried"
        },
        "return": "True if the vote is open for voting"
      },
      "newVote(bytes,bytes)": {
        "params": {
          "_context": "Additional context for the vote, also used as the disputable action's context on the linked Agreement",
          "_executionScript": "Action (encoded as an EVM script) that will be allowed to execute if the vote passes"
        },
        "return": "Identification number of the newly created vote"
      },
      "onDisputableActionAllowed(uint256)": {
        "details": "This hook must be implemented by Disputable apps. We provide a base implementation to ensure that the `onlyAgreement` modifier     is included. Subclasses should implement the internal implementation of the hook.",
        "params": {
          "_disputableActionId": "Identifier of the action to be allowed"
        }
      },
      "onDisputableActionChallenged(uint256,uint256,address)": {
        "details": "This hook must be implemented by Disputable apps. We provide a base implementation to ensure that the `onlyAgreement` modifier     is included. Subclasses should implement the internal implementation of the hook.",
        "params": {
          "_challengeId": "Identifier of the challenge in the context of the Agreement",
          "_challenger": "Address that submitted the challenge",
          "_disputableActionId": "Identifier of the action to be challenged"
        }
      },
      "onDisputableActionRejected(uint256)": {
        "details": "This hook must be implemented by Disputable apps. We provide a base implementation to ensure that the `onlyAgreement` modifier     is included. Subclasses should implement the internal implementation of the hook.",
        "params": {
          "_disputableActionId": "Identifier of the action to be rejected"
        }
      },
      "onDisputableActionVoided(uint256)": {
        "details": "This hook must be implemented by Disputable apps. We provide a base implementation to ensure that the `onlyAgreement` modifier     is included. Subclasses should implement the internal implementation of the hook.",
        "params": {
          "_disputableActionId": "Identifier of the action to be voided"
        }
      },
      "setAgreement(address)": {
        "params": {
          "_agreement": "Agreement instance to be set"
        }
      },
      "setRepresentative(address)": {
        "params": {
          "_representative": "Address of the representative who is allowed to vote on behalf of the sender. Use the zero address for none."
        }
      },
      "supportsInterface(bytes4)": {
        "details": "Query if a contract implements a certain interface",
        "params": {
          "_interfaceId": "The interface identifier being queried, as specified in ERC-165"
        },
        "return": "True if the contract implements the requested interface and if its not 0xffffffff, false otherwise"
      },
      "transferToVault(address)": {
        "params": {
          "_token": "Token balance to be sent to recovery vault."
        }
      },
      "vote(uint256,bool)": {
        "details": "Initialization check is implicitly provided by `_getVote()` as new votes can only be     created via `newVote()`, which requires initialization",
        "params": {
          "_supports": "Whether voter supports the vote",
          "_voteId": "Identification number of the vote"
        }
      },
      "voteOnBehalfOf(uint256,bool,address[])": {
        "details": "Initialization check is implicitly provided by `_getVote()` as new votes can only be     created via `newVote()`, which requires initialization",
        "params": {
          "_supports": "Whether the representative supports the vote",
          "_voteId": "Identification number of the vote",
          "_voters": "Addresses of the delegated voters to vote on behalf of"
        }
      }
    }
  },
  "userdoc": {
    "methods": {
      "changeDelegatedVotingPeriod(uint64)": {
        "notice": "Change delegated voting period to `@transformTime(_delegatedVotingPeriod)`"
      },
      "changeExecutionDelay(uint64)": {
        "notice": "Change execution delay to `@transformTime(_executionDelay)`"
      },
      "changeMinAcceptQuorumPct(uint64)": {
        "notice": "Change minimum acceptance quorum to `@formatPct(_minAcceptQuorumPct)`%"
      },
      "changeQuietEndingConfiguration(uint64,uint64)": {
        "notice": "Change quiet ending period to `@transformTime(_quietEndingPeriod)` with extensions of `@transformTime(_quietEndingExtension)`"
      },
      "changeSupportRequiredPct(uint64)": {
        "notice": "Change required support to `@formatPct(_supportRequiredPct)`%"
      },
      "changeVoteTime(uint64)": {
        "notice": "Change vote time to `@transformTime(_voteTime)`"
      },
      "executeVote(uint256,bytes)": {
        "notice": "Execute vote #`_voteId`"
      },
      "forward(bytes,bytes)": {
        "notice": "Create a vote to execute the desired action"
      },
      "initialize(address,uint64,uint64,uint64,uint64,uint64,uint64,uint64)": {
        "notice": "Initialize Disputable Voting with `_token.symbol(): string` for governance, a voting duration of `@transformTime(_voteTime)`, minimum support of `@formatPct(_supportRequiredPct)`%, minimum acceptance quorum of `@formatPct(_minAcceptQuorumPct)`%, a delegated voting period of `@transformTime(_delegatedVotingPeriod), and a execution delay of `@transformTime(_executionDelay)`"
      },
      "newVote(bytes,bytes)": {
        "notice": "Create a new vote about \"`_context`\""
      },
      "onDisputableActionAllowed(uint256)": {
        "notice": "Allow disputable action #`_disputableActionId`"
      },
      "onDisputableActionChallenged(uint256,uint256,address)": {
        "notice": "Challenge disputable action #`_disputableActionId`"
      },
      "onDisputableActionRejected(uint256)": {
        "notice": "Reject disputable action #`_disputableActionId`"
      },
      "onDisputableActionVoided(uint256)": {
        "notice": "Void disputable action #`_disputableActionId`"
      },
      "setAgreement(address)": {
        "notice": "Set Agreement to `_agreement`"
      },
      "setRepresentative(address)": {
        "notice": "`_representative == 0x0 ? 'Set your voting representative to ' + _representative : 'Remove your representative'`"
      },
      "transferToVault(address)": {
        "notice": "Send funds to recovery Vault. This contract should never receive funds,        but in case it does, this function allows one to recover them."
      },
      "vote(uint256,bool)": {
        "notice": "Vote `_supports ? 'yes' : 'no'` in vote #`_voteId`"
      },
      "voteOnBehalfOf(uint256,bool,address[])": {
        "notice": "Vote `_supports ? 'yes' : 'no'` in vote #`_voteId` on behalf of delegated voters"
      }
    }
  }
}